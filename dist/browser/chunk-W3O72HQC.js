import{a as u}from"./chunk-2UNPP24U.js";import{O as n,S as g,X as m,f as a,g as p,w as d}from"./chunk-KOPF5GMC.js";import{a as l}from"./chunk-EQDQRRRY.js";var f=class i{constructor(e){this.assetService=e}destroy$=new a;polling$=new a;_state=new p({showProgressBox:!1,currentJobId:null,progressPercentage:0,progressMessage:"Starting import...",isCompleted:!1,isImportComplete:!1,importResults:null,failedImportsCsvData:null});state$=this._state.asObservable();get currentState(){return this._state.value}startImport(e,t){this.updateState({showProgressBox:!0,currentJobId:e,progressPercentage:0,progressMessage:`Processing ${t.total_assets} assets...`,isCompleted:!1,isImportComplete:!1,importResults:t,failedImportsCsvData:null}),this.startProgressPolling()}closeProgressBox(){this.updateState({showProgressBox:!1,currentJobId:null,progressPercentage:0,progressMessage:"Starting import...",isCompleted:!1,isImportComplete:!1,importResults:null,failedImportsCsvData:null}),this.polling$.next(),this.polling$=new a}startProgressPolling(){this.currentState.currentJobId&&d(2e3).pipe(n(this.destroy$),n(this.polling$)).subscribe(()=>{this.checkImportProgress()})}checkImportProgress(){this.currentState.currentJobId&&this.assetService.getImportProgress(this.currentState.currentJobId).subscribe({next:e=>{let t=e.data||e,s=t.progress_percentage,r=Math.round(s||0),o;if(t.is_processing){let h=t.processed_assets||0,v=t.total_assets||0,I=t.successful_imports||0,S=t.failed_imports||0;o=`Processing: ${h}/${v} assets (${I} success, ${S} failed)`}else t.is_completed?o="Import completed - generating report...":o=t.status||"Processing...";let c=t.is_completed||!1;this.updateState({progressPercentage:r,progressMessage:o,isCompleted:c,importResults:t}),c&&(this.polling$.next(),this.polling$.complete(),this.handleImportComplete(t))},error:e=>{console.error("Error checking progress:",e),this.updateState({progressMessage:"Error checking progress"})}})}handleImportComplete(e){let t=e.successful_imports||0,s=e.failed_imports||0,r=e.total_assets||0,o=`Import complete! ${t} successful, ${s} failed out of ${r} assets`;this.updateState({isImportComplete:!0,progressMessage:o,importResults:e}),s>0&&e.errors&&e.errors.length>0&&this.generateFailedImportsCSV(e.errors)}generateFailedImportsCSV(e){let s=[["Asset Name","Error","Details"].join(","),...e.map(r=>[`"${(r.name||"").replace(/"/g,'""')}"`,`"${(r.error||"").replace(/"/g,'""')}"`,`"${(r.details||"").replace(/"/g,'""')}"`].join(","))].join(`
`);this.updateState({failedImportsCsvData:s})}downloadFailedImportsCSV(){let e=this.currentState.failedImportsCsvData;if(e){let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),s=document.createElement("a"),r=URL.createObjectURL(t);s.href=r,s.download="failed-imports.csv",document.body.appendChild(s),s.click(),document.body.removeChild(s)}}updateState(e){this._state.next(l(l({},this.currentState),e))}ngOnDestroy(){this.destroy$.next(),this.destroy$.complete(),this.polling$.next(),this.polling$.complete()}static \u0275fac=function(t){return new(t||i)(m(u))};static \u0275prov=g({token:i,factory:i.\u0275fac,providedIn:"root"})};export{f as a};
