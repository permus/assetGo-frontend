{
  "version": 3,
  "sources": ["src/app/reports/services/reports-api.service.ts", "src/app/reports/services/export.service.ts", "src/app/reports/pages/reports.page.ts", "src/app/reports/pages/reports.page.html", "src/app/reports/reports-routing.module.ts", "src/app/reports/reports.module.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport {\r\n  BaseResponse,\r\n  AssetSummaryResponse,\r\n  AssetUtilizationRow,\r\n  AssetDepreciationRow,\r\n  AssetWarrantyRow,\r\n  AssetComplianceRow,\r\n  MaintenanceSummaryResponse,\r\n  MaintenanceComplianceRow,\r\n  MaintenanceCostRow,\r\n  DowntimeRow,\r\n  FailureAnalysisRow,\r\n  TechnicianPerformanceRow,\r\n  ExportRequest,\r\n  ExportResponse,\r\n  ExportStatusResponse,\r\n  ReportRunStatus,\r\n  ExportHistoryResponse,\r\n  ReportDefinition,\r\n  ReportConfig,\r\n  LocationOption,\r\n  AssetOption,\r\n  UserOption,\r\n  StatusOption,\r\n  PriorityOption,\r\n  CategoryOption\r\n} from '../models/reports.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReportsApiService {\r\n  private apiUrl = `${environment.apiUrl}/reports`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Asset Reports\r\n  getAssetSummary(config: ReportConfig): Observable<AssetSummaryResponse> {\r\n    const params = this.buildParams(config);\r\n    console.log('Making API request to:', `${this.apiUrl}/assets/summary`);\r\n    console.log('With params:', params);\r\n    console.log('Auth token:', localStorage.getItem('token'));\r\n    return this.http.get<AssetSummaryResponse>(`${this.apiUrl}/assets/summary`, { params });\r\n  }\r\n\r\n  getAssetUtilization(config: ReportConfig): Observable<{assets: AssetUtilizationRow[], pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{assets: AssetUtilizationRow[], pagination: any}>(`${this.apiUrl}/assets/utilization`, { params });\r\n  }\r\n\r\n  getAssetDepreciation(config: ReportConfig): Observable<{assets: AssetDepreciationRow[], totals: any, pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{assets: AssetDepreciationRow[], totals: any, pagination: any}>(`${this.apiUrl}/assets/depreciation`, { params });\r\n  }\r\n\r\n  getAssetWarranty(config: ReportConfig): Observable<{assets: AssetWarrantyRow[], summary: any, pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{assets: AssetWarrantyRow[], summary: any, pagination: any}>(`${this.apiUrl}/assets/warranty`, { params });\r\n  }\r\n\r\n  getAssetCompliance(config: ReportConfig): Observable<{assets: AssetComplianceRow[], pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{assets: AssetComplianceRow[], pagination: any}>(`${this.apiUrl}/assets/compliance`, { params });\r\n  }\r\n\r\n  getAvailableAssetReports(): Observable<Record<string, ReportDefinition>> {\r\n    return this.http.get<Record<string, ReportDefinition>>(`${this.apiUrl}/assets/available`);\r\n  }\r\n\r\n  // Maintenance Reports\r\n  getMaintenanceSummary(config: ReportConfig): Observable<MaintenanceSummaryResponse> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<MaintenanceSummaryResponse>(`${this.apiUrl}/maintenance/summary`, { params });\r\n  }\r\n\r\n  getMaintenanceCompliance(config: ReportConfig): Observable<{work_orders: MaintenanceComplianceRow[], pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{work_orders: MaintenanceComplianceRow[], pagination: any}>(`${this.apiUrl}/maintenance/compliance`, { params });\r\n  }\r\n\r\n  getMaintenanceCosts(config: ReportConfig): Observable<{work_orders: MaintenanceCostRow[], cost_trends: any[], pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{work_orders: MaintenanceCostRow[], cost_trends: any[], pagination: any}>(`${this.apiUrl}/maintenance/costs`, { params });\r\n  }\r\n\r\n  getMaintenanceDowntime(config: ReportConfig): Observable<{work_orders: DowntimeRow[], pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{work_orders: DowntimeRow[], pagination: any}>(`${this.apiUrl}/maintenance/downtime`, { params });\r\n  }\r\n\r\n  getMaintenanceFailureAnalysis(config: ReportConfig): Observable<{work_orders: FailureAnalysisRow[], pagination: any}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{work_orders: FailureAnalysisRow[], pagination: any}>(`${this.apiUrl}/maintenance/failure-analysis`, { params });\r\n  }\r\n\r\n  getMaintenanceTechnicianPerformance(config: ReportConfig): Observable<{technicians: TechnicianPerformanceRow[]}> {\r\n    const params = this.buildParams(config);\r\n    return this.http.get<{technicians: TechnicianPerformanceRow[]}>(`${this.apiUrl}/maintenance/technician-performance`, { params });\r\n  }\r\n\r\n  getAvailableMaintenanceReports(): Observable<Record<string, ReportDefinition>> {\r\n    return this.http.get<Record<string, ReportDefinition>>(`${this.apiUrl}/maintenance/available`);\r\n  }\r\n\r\n  // Export Functions\r\n  exportReport(request: ExportRequest): Observable<ExportResponse> {\r\n    return this.http.post<ExportResponse>(`${this.apiUrl}/export`, request);\r\n  }\r\n\r\n  getExportStatus(runId: number): Observable<ExportStatusResponse> {\r\n    return this.http.get<ExportStatusResponse>(`${this.apiUrl}/runs/${runId}`);\r\n  }\r\n\r\n  downloadExport(runId: number): Observable<Blob> {\r\n    return this.http.get(`${this.apiUrl}/runs/${runId}/download`, { responseType: 'blob' });\r\n  }\r\n\r\n  getExportHistory(page: number = 1, pageSize: number = 20, filters?: any): Observable<ExportHistoryResponse> {\r\n    let params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('page_size', pageSize.toString());\r\n\r\n    if (filters) {\r\n      if (filters.status) params = params.set('status', filters.status);\r\n      if (filters.format) params = params.set('format', filters.format);\r\n      if (filters.report_key) params = params.set('report_key', filters.report_key);\r\n    }\r\n\r\n    return this.http.get<ExportHistoryResponse>(`${this.apiUrl}/history`, { params });\r\n  }\r\n\r\n  cancelExport(runId: number): Observable<BaseResponse> {\r\n    return this.http.delete<BaseResponse>(`${this.apiUrl}/runs/${runId}/cancel`);\r\n  }\r\n\r\n  // Filter Options\r\n  getLocations(): Observable<LocationOption[]> {\r\n    return this.http.get<LocationOption[]>(`${environment.apiUrl}/locations`);\r\n  }\r\n\r\n  getAssets(): Observable<AssetOption[]> {\r\n    return this.http.get<AssetOption[]>(`${environment.apiUrl}/assets`);\r\n  }\r\n\r\n  getUsers(): Observable<UserOption[]> {\r\n    return this.http.get<UserOption[]>(`${environment.apiUrl}/users`);\r\n  }\r\n\r\n  getWorkOrderStatuses(): Observable<StatusOption[]> {\r\n    return this.http.get<StatusOption[]>(`${environment.apiUrl}/work-order-statuses`);\r\n  }\r\n\r\n  getWorkOrderPriorities(): Observable<PriorityOption[]> {\r\n    return this.http.get<PriorityOption[]>(`${environment.apiUrl}/work-order-priorities`);\r\n  }\r\n\r\n  getWorkOrderCategories(): Observable<CategoryOption[]> {\r\n    return this.http.get<CategoryOption[]>(`${environment.apiUrl}/work-order-categories`);\r\n  }\r\n\r\n  getAssetCategories(): Observable<CategoryOption[]> {\r\n    return this.http.get<CategoryOption[]>(`${environment.apiUrl}/asset-categories`);\r\n  }\r\n\r\n  getAssetStatuses(): Observable<StatusOption[]> {\r\n    return this.http.get<StatusOption[]>(`${environment.apiUrl}/asset-statuses`);\r\n  }\r\n\r\n  // Helper Methods\r\n  private buildParams(config: ReportConfig): HttpParams {\r\n    let params = new HttpParams()\r\n      .set('page', config.page.toString())\r\n      .set('page_size', config.pageSize.toString());\r\n\r\n    if (config.dateRange.start) {\r\n      params = params.set('date_from', config.dateRange.start);\r\n    }\r\n    if (config.dateRange.end) {\r\n      params = params.set('date_to', config.dateRange.end);\r\n    }\r\n    if (config.locationIds.length > 0) {\r\n      config.locationIds.forEach(id => {\r\n        params = params.append('location_ids[]', id.toString());\r\n      });\r\n    }\r\n    if (config.assetIds.length > 0) {\r\n      config.assetIds.forEach(id => {\r\n        params = params.append('asset_ids[]', id.toString());\r\n      });\r\n    }\r\n    if (config.userIds.length > 0) {\r\n      config.userIds.forEach(id => {\r\n        params = params.append('assigned_to[]', id.toString());\r\n      });\r\n    }\r\n    if (config.statusIds.length > 0) {\r\n      config.statusIds.forEach(id => {\r\n        params = params.append('status_id[]', id.toString());\r\n      });\r\n    }\r\n    if (config.priorityIds.length > 0) {\r\n      config.priorityIds.forEach(id => {\r\n        params = params.append('priority_id[]', id.toString());\r\n      });\r\n    }\r\n    if (config.categoryIds.length > 0) {\r\n      config.categoryIds.forEach(id => {\r\n        params = params.append('category_id[]', id.toString());\r\n      });\r\n    }\r\n    if (config.search) {\r\n      params = params.set('search', config.search);\r\n    }\r\n    if (config.sortBy) {\r\n      params = params.set('sort_by', config.sortBy);\r\n    }\r\n    if (config.sortDirection) {\r\n      params = params.set('sort_dir', config.sortDirection);\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  // Utility Methods\r\n  formatCurrency(value: number, currency: string = 'AED'): string {\r\n    return new Intl.NumberFormat('en-AE', {\r\n      style: 'currency',\r\n      currency: currency\r\n    }).format(value);\r\n  }\r\n\r\n  formatPercentage(value: number, decimals: number = 2): string {\r\n    return `${value.toFixed(decimals)}%`;\r\n  }\r\n\r\n  formatNumber(value: number, decimals: number = 0): string {\r\n    return new Intl.NumberFormat('en-AE').format(value);\r\n  }\r\n\r\n  formatDate(date: string): string {\r\n    return new Date(date).toLocaleDateString('en-AE');\r\n  }\r\n\r\n  formatDateTime(date: string): string {\r\n    return new Date(date).toLocaleString('en-AE');\r\n  }\r\n\r\n  getStatusColor(status: string): string {\r\n    const statusColors: Record<string, string> = {\r\n      'active': 'text-green-600 bg-green-100',\r\n      'inactive': 'text-gray-600 bg-gray-100',\r\n      'maintenance': 'text-yellow-600 bg-yellow-100',\r\n      'completed': 'text-green-600 bg-green-100',\r\n      'in_progress': 'text-blue-600 bg-blue-100',\r\n      'pending': 'text-yellow-600 bg-yellow-100',\r\n      'cancelled': 'text-red-600 bg-red-100',\r\n      'high': 'text-red-600 bg-red-100',\r\n      'medium': 'text-yellow-600 bg-yellow-100',\r\n      'low': 'text-green-600 bg-green-100',\r\n      'success': 'text-green-600 bg-green-100',\r\n      'failed': 'text-red-600 bg-red-100',\r\n      'queued': 'text-yellow-600 bg-yellow-100',\r\n      'running': 'text-blue-600 bg-blue-100'\r\n    };\r\n    return statusColors[status] || 'text-gray-600 bg-gray-100';\r\n  }\r\n\r\n  getPriorityColor(priority: string): string {\r\n    const priorityColors: Record<string, string> = {\r\n      'critical': 'text-red-600 bg-red-100',\r\n      'high': 'text-orange-600 bg-orange-100',\r\n      'medium': 'text-yellow-600 bg-yellow-100',\r\n      'low': 'text-green-600 bg-green-100'\r\n    };\r\n    return priorityColors[priority] || 'text-gray-600 bg-gray-100';\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, timer } from 'rxjs';\r\nimport { switchMap, takeWhile, catchError } from 'rxjs/operators';\r\nimport { ReportsApiService } from './reports-api.service';\r\nimport { ReportRunStatus, ExportFormat } from '../models/reports.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n  private exportStatusSubject = new BehaviorSubject<Map<number, ReportRunStatus>>(new Map());\r\n  public exportStatus$ = this.exportStatusSubject.asObservable();\r\n  \r\n  // Configuration for auto-download\r\n  private autoDownloadEnabled = true;\r\n  \r\n  // Track active polling subscriptions\r\n  private activePollingSubscriptions = new Map<number, any>();\r\n\r\n  constructor(private reportsApi: ReportsApiService) { }\r\n\r\n  /**\r\n   * Export report and return run ID\r\n   */\r\n  exportReport(reportKey: string, format: ExportFormat, params: any = {}): Observable<number> {\r\n    return this.reportsApi.exportReport({\r\n      report_key: reportKey,\r\n      format: format,\r\n      params: params\r\n    }).pipe(\r\n      switchMap(response => {\r\n        if (response.success && response.data.run_id) {\r\n          const runId = response.data.run_id;\r\n          \r\n          // Check if we're already tracking this run ID\r\n          const currentStatus = this.exportStatusSubject.value;\r\n          if (currentStatus.has(runId)) {\r\n            console.log(`Run ID ${runId} already being tracked, skipping duplicate tracking`);\r\n            return [runId];\r\n          }\r\n          \r\n          // Add export to status tracking immediately\r\n          const initialStatus: ReportRunStatus = {\r\n            id: runId,\r\n            report_key: reportKey,\r\n            format: format,\r\n            status: 'queued',\r\n            status_label: 'Queued',\r\n            row_count: 0,\r\n            execution_time_ms: 0,\r\n            execution_time_formatted: '0ms',\r\n            created_at: new Date().toISOString(),\r\n            started_at: null,\r\n            completed_at: null,\r\n            error_message: null,\r\n            download_url: null,\r\n            file_size: null\r\n          };\r\n          \r\n          currentStatus.set(runId, initialStatus);\r\n          this.exportStatusSubject.next(new Map(currentStatus));\r\n          console.log('Export service - Added export to tracking:', runId, initialStatus);\r\n          \r\n          // Start polling for status\r\n          this.startStatusPolling(runId);\r\n          return [runId];\r\n        }\r\n        throw new Error(response.data.message || 'Export request failed');\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Start polling for export status\r\n   */\r\n  private startStatusPolling(runId: number): void {\r\n    // Check if already polling this run ID\r\n    if (this.activePollingSubscriptions.has(runId)) {\r\n      console.log(`Already polling run ID ${runId}, skipping duplicate polling`);\r\n      return;\r\n    }\r\n    \r\n    let pollCount = 0;\r\n    const maxPolls = 15; // Reduced to 15 polls (30 seconds max)\r\n    \r\n    console.log(`Starting polling for run ID ${runId}`);\r\n    \r\n    // Add a timeout to force stop polling after 30 seconds\r\n    const timeoutId = setTimeout(() => {\r\n      console.log(`Force stopping polling for run ID ${runId} after timeout`);\r\n      this.stopPolling(runId);\r\n    }, 30000); // 30 seconds timeout\r\n    \r\n    const subscription = timer(0, 2000) // Poll every 2 seconds\r\n      .pipe(\r\n        switchMap(() => {\r\n          pollCount++;\r\n          return this.reportsApi.getExportStatus(runId);\r\n        }),\r\n        takeWhile(response => {\r\n          // Extract the actual status from the response\r\n          const status = response.success ? response.data : null;\r\n          if (!status) return false;\r\n          \r\n          // Stop polling if export is complete (success or failed) OR if we've reached max polls\r\n          const isComplete = status.status === 'success' || status.status === 'failed';\r\n          const hasReachedMaxPolls = pollCount >= maxPolls;\r\n          \r\n          // Continue polling only if not complete AND not reached max polls\r\n          const shouldContinue = !isComplete && !hasReachedMaxPolls;\r\n          \r\n          if (!shouldContinue) {\r\n            console.log(`Stopping polling for run ID ${runId}: complete=${isComplete}, maxPolls=${hasReachedMaxPolls}, status=${status.status}`);\r\n          }\r\n          \r\n          return shouldContinue;\r\n        }, false), // Don't include the final value that caused the condition to become false\r\n        catchError(error => {\r\n          console.error('Error polling export status:', error);\r\n          return [];\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: response => {\r\n          if (response.success && response.data) {\r\n            const status = response.data;\r\n            const currentStatus = this.exportStatusSubject.value;\r\n            currentStatus.set(runId, status);\r\n            this.exportStatusSubject.next(new Map(currentStatus));\r\n            \r\n            // Check if export completed successfully and trigger auto-download\r\n            if (status.status === 'success' && this.autoDownloadEnabled) {\r\n              console.log('Export completed successfully, triggering auto-download for run ID:', runId);\r\n              this.autoDownloadExport(runId);\r\n            }\r\n            \r\n            // Log completion or max polls reached\r\n            if (status.status === 'success' || status.status === 'failed') {\r\n              console.log(`Export polling stopped for run ID ${runId}: ${status.status}`);\r\n              clearTimeout(timeoutId);\r\n              this.stopPolling(runId);\r\n            } else if (pollCount >= maxPolls) {\r\n              console.log(`Export polling stopped for run ID ${runId}: reached max polls (${maxPolls})`);\r\n              clearTimeout(timeoutId);\r\n              this.stopPolling(runId);\r\n            }\r\n          } else {\r\n            console.error('Export status response failed:', response);\r\n            clearTimeout(timeoutId);\r\n            this.stopPolling(runId);\r\n          }\r\n        },\r\n        complete: () => {\r\n          console.log(`Export polling completed for run ID ${runId}`);\r\n          clearTimeout(timeoutId);\r\n          this.stopPolling(runId);\r\n        },\r\n        error: error => {\r\n          console.error(`Export polling error for run ID ${runId}:`, error);\r\n          clearTimeout(timeoutId);\r\n          this.stopPolling(runId);\r\n        }\r\n      });\r\n    \r\n    // Store the subscription for potential cleanup\r\n    this.activePollingSubscriptions.set(runId, subscription);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get export status for a specific run\r\n   */\r\n  getExportStatus(runId: number): Observable<ReportRunStatus | undefined> {\r\n    return new Observable(observer => {\r\n      const subscription = this.exportStatus$.subscribe(statusMap => {\r\n        const status = statusMap.get(runId);\r\n        observer.next(status);\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Download exported file\r\n   */\r\n  downloadExport(runId: number, filename?: string): Observable<Blob> {\r\n    return this.reportsApi.downloadExport(runId).pipe(\r\n      switchMap(blob => {\r\n        this.downloadBlob(blob, filename);\r\n        return [blob];\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Auto download export when it completes successfully\r\n   */\r\n  private autoDownloadExport(runId: number): void {\r\n    // Get the current status to check if download URL is available\r\n    const currentStatus = this.exportStatusSubject.value;\r\n    const exportStatus = currentStatus.get(runId);\r\n    \r\n    if (exportStatus && exportStatus.status === 'success') {\r\n      console.log('Auto-downloading export for run ID:', runId);\r\n      \r\n      // Generate filename based on report key and format\r\n      const filename = this.generateFilename(exportStatus.report_key, exportStatus.format);\r\n      \r\n      // Open download in new tab\r\n      this.downloadInNewTab(runId, filename);\r\n    } else {\r\n      console.warn('Cannot auto-download: export not ready for run ID:', runId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel export\r\n   */\r\n  cancelExport(runId: number): Observable<boolean> {\r\n    return this.reportsApi.cancelExport(runId).pipe(\r\n      switchMap(response => {\r\n        if (response.success) {\r\n          // Remove from status tracking\r\n          const currentStatus = this.exportStatusSubject.value;\r\n          currentStatus.delete(runId);\r\n          this.exportStatusSubject.next(new Map(currentStatus));\r\n          return [true];\r\n        }\r\n        return [false];\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Download blob as file\r\n   */\r\n  private downloadBlob(blob: Blob, filename?: string): void {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename || `export-${Date.now()}.${this.getFileExtension(blob.type)}`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Generate filename for export\r\n   */\r\n  generateFilename(reportKey: string, format: string): string {\r\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\r\n    const reportName = reportKey.replace(/\\./g, '-').replace(/[^a-zA-Z0-9-]/g, '');\r\n    return `${reportName}-${timestamp}.${format}`;\r\n  }\r\n\r\n  /**\r\n   * Download file in new tab using API endpoint\r\n   */\r\n  downloadInNewTab(runId: number, filename?: string): void {\r\n    // Construct the API download URL\r\n    const baseUrl = 'http://assetgo-backend.test'; // Use the same base URL as the API\r\n    const downloadUrl = `${baseUrl}/api/reports/runs/${runId}/download`;\r\n    \r\n    console.log('Opening download in new tab:', downloadUrl);\r\n    \r\n    // Create a temporary link and click it to trigger download in new tab\r\n    const link = document.createElement('a');\r\n    link.href = downloadUrl;\r\n    link.target = '_blank'; // Open in new tab\r\n    link.download = filename || 'export.pdf';\r\n    link.rel = 'noopener noreferrer'; // Security best practice\r\n    \r\n    // Add to DOM, click, and remove\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    console.log('Download initiated in new tab for:', filename || 'export.pdf');\r\n  }\r\n\r\n  /**\r\n   * Enable or disable auto-download\r\n   */\r\n  setAutoDownload(enabled: boolean): void {\r\n    this.autoDownloadEnabled = enabled;\r\n    console.log('Auto-download', enabled ? 'enabled' : 'disabled');\r\n  }\r\n\r\n  /**\r\n   * Check if auto-download is enabled\r\n   */\r\n  isAutoDownloadEnabled(): boolean {\r\n    return this.autoDownloadEnabled;\r\n  }\r\n\r\n  /**\r\n   * Stop polling for a specific run ID\r\n   */\r\n  private stopPolling(runId: number): void {\r\n    const subscription = this.activePollingSubscriptions.get(runId);\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n      this.activePollingSubscriptions.delete(runId);\r\n      console.log(`Stopped polling for run ID ${runId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop all active polling\r\n   */\r\n  stopAllPolling(): void {\r\n    this.activePollingSubscriptions.forEach((subscription, runId) => {\r\n      subscription.unsubscribe();\r\n      console.log(`Stopped polling for run ID ${runId}`);\r\n    });\r\n    this.activePollingSubscriptions.clear();\r\n    console.log('Stopped all export polling');\r\n  }\r\n\r\n  /**\r\n   * Force stop polling for a specific run ID (emergency stop)\r\n   */\r\n  forceStopPolling(runId: number): void {\r\n    const subscription = this.activePollingSubscriptions.get(runId);\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n      this.activePollingSubscriptions.delete(runId);\r\n      console.log(`Force stopped polling for run ID ${runId}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active polling count\r\n   */\r\n  getActivePollingCount(): number {\r\n    return this.activePollingSubscriptions.size;\r\n  }\r\n\r\n  /**\r\n   * Clear all export tracking data\r\n   */\r\n  clearAllTracking(): void {\r\n    this.stopAllPolling();\r\n    this.exportStatusSubject.next(new Map());\r\n    console.log('Cleared all export tracking data');\r\n  }\r\n\r\n  /**\r\n   * Get tracking status for debugging\r\n   */\r\n  getTrackingStatus(): { activePolling: number, trackedExports: number } {\r\n    const trackedExports = this.exportStatusSubject.value.size;\r\n    const activePolling = this.activePollingSubscriptions.size;\r\n    \r\n    console.log(`Tracking Status: ${trackedExports} exports tracked, ${activePolling} actively polling`);\r\n    return { activePolling, trackedExports };\r\n  }\r\n\r\n  /**\r\n   * Get file extension from MIME type\r\n   */\r\n  private getFileExtension(mimeType: string): string {\r\n    const extensions: Record<string, string> = {\r\n      'application/pdf': 'pdf',\r\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xlsx',\r\n      'text/csv': 'csv',\r\n      'application/json': 'json'\r\n    };\r\n    return extensions[mimeType] || 'file';\r\n  }\r\n\r\n\r\n  /**\r\n   * Get export progress percentage\r\n   */\r\n  getExportProgress(runId: number): Observable<number> {\r\n    return new Observable(observer => {\r\n      const subscription = this.exportStatus$.subscribe(statusMap => {\r\n        const status = statusMap.get(runId);\r\n        if (status) {\r\n          let progress = 0;\r\n          switch (status.status) {\r\n            case 'queued':\r\n              progress = 10;\r\n              break;\r\n            case 'running':\r\n              progress = 50;\r\n              break;\r\n            case 'success':\r\n              progress = 100;\r\n              break;\r\n            case 'failed':\r\n              progress = 0;\r\n              break;\r\n          }\r\n          observer.next(progress);\r\n        }\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if export is completed\r\n   */\r\n  isExportCompleted(runId: number): Observable<boolean> {\r\n    return new Observable(observer => {\r\n      const subscription = this.exportStatus$.subscribe(statusMap => {\r\n        const status = statusMap.get(runId);\r\n        if (status) {\r\n          observer.next(status.status === 'success' || status.status === 'failed');\r\n        }\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get estimated time remaining\r\n   */\r\n  getEstimatedTimeRemaining(runId: number): Observable<string> {\r\n    return new Observable(observer => {\r\n      const subscription = this.exportStatus$.subscribe(statusMap => {\r\n        const status = statusMap.get(runId);\r\n        if (status && status.status === 'running') {\r\n          // Simple estimation based on row count\r\n          const estimatedSeconds = Math.max(10, Math.min(300, status.row_count / 100));\r\n          observer.next(`${Math.ceil(estimatedSeconds)}s`);\r\n        } else {\r\n          observer.next('N/A');\r\n        }\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear completed exports from memory\r\n   */\r\n  clearCompletedExports(): void {\r\n    const currentStatus = this.exportStatusSubject.value;\r\n    const filteredStatus = new Map();\r\n    \r\n    currentStatus.forEach((status, runId) => {\r\n      if (status.status !== 'success' && status.status !== 'failed') {\r\n        filteredStatus.set(runId, status);\r\n      }\r\n    });\r\n    \r\n    this.exportStatusSubject.next(filteredStatus);\r\n  }\r\n\r\n  /**\r\n   * Get all active exports\r\n   */\r\n  getActiveExports(): Observable<ReportRunStatus[]> {\r\n    return new Observable(observer => {\r\n      const subscription = this.exportStatus$.subscribe(statusMap => {\r\n        const activeExports = Array.from(statusMap.values())\r\n          .filter(status => status.status === 'queued' || status.status === 'running');\r\n        observer.next(activeExports);\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all recent exports (including completed ones)\r\n   */\r\n  getAllExports(): Observable<ReportRunStatus[]> {\r\n    return new Observable(observer => {\r\n      const subscription = this.exportStatus$.subscribe(statusMap => {\r\n        const allExports = Array.from(statusMap.values());\r\n        observer.next(allExports);\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get export statistics\r\n   */\r\n  getExportStats(): Observable<{\r\n    total: number;\r\n    completed: number;\r\n    failed: number;\r\n    inProgress: number;\r\n  }> {\r\n    return new Observable(observer => {\r\n      const subscription = this.exportStatus$.subscribe(statusMap => {\r\n        const stats = {\r\n          total: statusMap.size,\r\n          completed: 0,\r\n          failed: 0,\r\n          inProgress: 0\r\n        };\r\n\r\n        statusMap.forEach(status => {\r\n          switch (status.status) {\r\n            case 'success':\r\n              stats.completed++;\r\n              break;\r\n            case 'failed':\r\n              stats.failed++;\r\n              break;\r\n            case 'queued':\r\n            case 'running':\r\n              stats.inProgress++;\r\n              break;\r\n          }\r\n        });\r\n\r\n        observer.next(stats);\r\n      });\r\n      return () => subscription.unsubscribe();\r\n    });\r\n  }\r\n}\r\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ReportsApiService } from '../services/reports-api.service';\r\nimport { ExportService } from '../services/export.service';\r\nimport { ReportCategory, ReportConfig, DateRange, ReportPeriod, AssetSummaryResponse, MaintenanceSummaryResponse } from '../models/reports.models';\r\n\r\n@Component({\r\n  selector: 'app-reports',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './reports.page.html',\r\n  styleUrls: ['./reports.page.scss']\r\n})\r\nexport class ReportsPage implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject<void>();\r\n\r\n  // State\r\n  activeTab: ReportCategory = 'assets';\r\n  isLoading = false;\r\n  hasData = false;\r\n  errorMessage: string | null = null;\r\n  showExportPanel = false;\r\n\r\n  // Data\r\n  reportData: any[] = [];\r\n  pagination: any = null;\r\n  kpiCards: any[] = [];\r\n  selectedReport: string = '';\r\n  selectedReports: string[] = [];\r\n  isGenerating: boolean = false;\r\n  successMessage: string = '';\r\n\r\n  // Configuration\r\n  reportConfig: ReportConfig = {\r\n    dateRange: {\r\n      start: null,\r\n      end: null\r\n    },\r\n    period: 'this_month',\r\n    page: 1,\r\n    pageSize: 50,\r\n    locationIds: [],\r\n    assetIds: [],\r\n    userIds: [],\r\n    statusIds: [],\r\n    priorityIds: [],\r\n    categoryIds: [],\r\n    search: '',\r\n    sortBy: '',\r\n    sortDirection: 'asc'\r\n  };\r\n\r\n  // Export configuration\r\n  exportFormat: string = 'pdf';\r\n\r\n  // Filter configurations for different report types\r\n  maintenanceFilters = {\r\n    period: 'last_month',\r\n    type: 'all'\r\n  };\r\n\r\n  inventoryFilters = {\r\n    category: 'all',\r\n    location: 'all'\r\n  };\r\n\r\n  financialFilters = {\r\n    period: 'monthly',\r\n    currency: 'AED'\r\n  };\r\n\r\n  // Available tabs\r\n  tabs = [\r\n    { id: 'assets', label: 'Asset Reports', icon: 'package' },\r\n    { id: 'maintenance', label: 'Maintenance Reports', icon: 'wrench' },\r\n    { id: 'inventory', label: 'Inventory Reports', icon: 'box' },\r\n    { id: 'financial', label: 'Financial Reports', icon: 'dollar-sign' },\r\n    { id: 'custom', label: 'Custom Reports', icon: 'settings' }\r\n  ];\r\n\r\n  // Report data for each category\r\n  assetReports = [\r\n    {\r\n      id: 'asset-summary',\r\n      title: 'Asset Summary Report',\r\n      description: 'Complete overview of all assets with status, location, and financial details',\r\n      estimatedTime: '~5 min'\r\n    },\r\n    {\r\n      id: 'asset-utilization',\r\n      title: 'Asset Utilization Report',\r\n      description: 'Analysis of asset usage patterns and efficiency metrics',\r\n      estimatedTime: '~3 min'\r\n    },\r\n    {\r\n      id: 'depreciation-analysis',\r\n      title: 'Depreciation Analysis',\r\n      description: 'Asset depreciation calculations and current value assessments',\r\n      estimatedTime: '~4 min'\r\n    },\r\n    {\r\n      id: 'warranty-status',\r\n      title: 'Warranty Status Report',\r\n      description: 'Assets under warranty, expiring warranties, and expired coverage',\r\n      estimatedTime: '~2 min'\r\n    },\r\n    {\r\n      id: 'compliance-report',\r\n      title: 'Compliance Report',\r\n      description: 'Asset compliance status, certifications, and regulatory requirements',\r\n      estimatedTime: '~6 min'\r\n    }\r\n  ];\r\n\r\n  maintenanceReports = [\r\n    {\r\n      id: 'maintenance-summary',\r\n      title: 'Maintenance Summary',\r\n      description: 'Overview of all maintenance activities, costs, and completion rates',\r\n      estimatedTime: '~4 min'\r\n    },\r\n    {\r\n      id: 'preventive-compliance',\r\n      title: 'Preventive Maintenance Compliance',\r\n      description: 'Track adherence to scheduled preventive maintenance plans',\r\n      estimatedTime: '~3 min'\r\n    },\r\n    {\r\n      id: 'maintenance-costs',\r\n      title: 'Maintenance Cost Analysis',\r\n      description: 'Detailed breakdown of maintenance expenses by asset, type, and time',\r\n      estimatedTime: '~5 min'\r\n    },\r\n    {\r\n      id: 'equipment-downtime',\r\n      title: 'Equipment Downtime Report',\r\n      description: 'Analysis of asset downtime duration and impact on operations',\r\n      estimatedTime: '~4 min'\r\n    },\r\n    {\r\n      id: 'failure-analysis',\r\n      title: 'Failure Analysis Report',\r\n      description: 'Root cause analysis and failure patterns across assets',\r\n      estimatedTime: '~6 min'\r\n    },\r\n    {\r\n      id: 'technician-performance',\r\n      title: 'Technician Performance',\r\n      description: 'Productivity metrics and work quality assessment for maintenance teams',\r\n      estimatedTime: '~4 min'\r\n    }\r\n  ];\r\n\r\n  inventoryReports = [\r\n    {\r\n      id: 'current-stock',\r\n      title: 'Current Stock Levels',\r\n      description: 'Real-time inventory levels across all locations and categories',\r\n      estimatedTime: '~2 min'\r\n    },\r\n    {\r\n      id: 'abc-analysis',\r\n      title: 'ABC Analysis Report',\r\n      description: 'Classification of inventory items by value and importance',\r\n      estimatedTime: '~4 min'\r\n    },\r\n    {\r\n      id: 'slow-moving',\r\n      title: 'Slow Moving Inventory',\r\n      description: 'Items with low turnover rates and aging analysis',\r\n      estimatedTime: '~3 min'\r\n    },\r\n    {\r\n      id: 'reorder-analysis',\r\n      title: 'Reorder Point Analysis',\r\n      description: 'Items below reorder points and suggested purchase quantities',\r\n      estimatedTime: '~2 min'\r\n    },\r\n    {\r\n      id: 'consumption-trends',\r\n      title: 'Consumption Trends',\r\n      description: 'Usage patterns and demand forecasting for parts and materials',\r\n      estimatedTime: '~5 min'\r\n    },\r\n    {\r\n      id: 'vendor-performance',\r\n      title: 'Vendor Performance',\r\n      description: 'Supplier reliability, lead times, and cost analysis',\r\n      estimatedTime: '~4 min'\r\n    },\r\n    {\r\n      id: 'inventory-valuation',\r\n      title: 'Inventory Valuation',\r\n      description: 'Total inventory value, cost breakdown, and financial impact',\r\n      estimatedTime: '~3 min'\r\n    }\r\n  ];\r\n\r\n  financialReports = [\r\n    {\r\n      id: 'total-cost-ownership',\r\n      title: 'Total Cost of Ownership',\r\n      description: 'Complete lifecycle cost analysis including acquisition, maintenance, and disposal',\r\n      estimatedTime: '~8 min'\r\n    },\r\n    {\r\n      id: 'budget-vs-actual',\r\n      title: 'Budget vs Actual Analysis',\r\n      description: 'Comparison of planned vs actual spending across departments and projects',\r\n      estimatedTime: '~5 min'\r\n    },\r\n    {\r\n      id: 'depreciation-schedule',\r\n      title: 'Depreciation Schedule',\r\n      description: 'Asset depreciation calculations and remaining book values',\r\n      estimatedTime: '~6 min'\r\n    },\r\n    {\r\n      id: 'maintenance-cost-breakdown',\r\n      title: 'Maintenance Cost Breakdown',\r\n      description: 'Detailed analysis of maintenance expenses by asset, type, and period',\r\n      estimatedTime: '~4 min'\r\n    },\r\n    {\r\n      id: 'return-on-investment',\r\n      title: 'Return on Investment',\r\n      description: 'ROI calculations for assets, upgrades, and maintenance initiatives',\r\n      estimatedTime: '~7 min'\r\n    },\r\n    {\r\n      id: 'cost-center-analysis',\r\n      title: 'Cost Center Analysis',\r\n      description: 'Financial performance breakdown by department and location',\r\n      estimatedTime: '~5 min'\r\n    }\r\n  ];\r\n\r\n  // Custom report data\r\n  customReport = {\r\n    name: '',\r\n    format: 'pdf',\r\n    description: '',\r\n    dataSource: '',\r\n    filters: ''\r\n  };\r\n\r\n  dataSources = [\r\n    { id: 'assets', name: 'Assets', fieldCount: 5 },\r\n    { id: 'inventory', name: 'Inventory', fieldCount: 5 },\r\n    { id: 'work_orders', name: 'Work Orders', fieldCount: 5 },\r\n    { id: 'maintenance', name: 'Maintenance Records', fieldCount: 5 },\r\n    { id: 'locations', name: 'Locations', fieldCount: 4 }\r\n  ];\r\n\r\n  savedReports = [\r\n    {\r\n      id: 'high-value-assets',\r\n      name: 'High Value Assets by Location',\r\n      description: 'Assets worth over $10K grouped by location',\r\n      frequency: 'Weekly',\r\n      lastRun: '2 days ago'\r\n    },\r\n    {\r\n      id: 'maintenance-cost-trends',\r\n      name: 'Maintenance Cost Trends',\r\n      description: 'Monthly maintenance costs with year-over-year comparison',\r\n      frequency: 'Monthly',\r\n      lastRun: '1 week ago'\r\n    },\r\n    {\r\n      id: 'inventory-turnover',\r\n      name: 'Inventory Turnover Analysis',\r\n      description: 'Parts consumption patterns and reorder recommendations',\r\n      frequency: 'Bi-weekly',\r\n      lastRun: '3 days ago'\r\n    }\r\n  ];\r\n\r\n  quickTemplates = [\r\n    { id: 'monthly-asset-summary', name: 'Monthly Asset Summary' },\r\n    { id: 'cost-analysis-department', name: 'Cost Analysis by Department' },\r\n    { id: 'maintenance-performance', name: 'Maintenance Performance' }\r\n  ];\r\n\r\n  constructor(\r\n    private reportsApi: ReportsApiService,\r\n    private exportService: ExportService\r\n  ) {}\r\n\r\n  getCurrentTime(): string {\r\n    return new Date().toISOString();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('ReportsPage ngOnInit called');\r\n    console.log('Component initialized successfully');\r\n    this.initializeDateRange();\r\n    this.loadReportData();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  /**\r\n   * Initialize date range based on selected period\r\n   */\r\n  private initializeDateRange(): void {\r\n    const now = new Date();\r\n    const period = this.reportConfig.period;\r\n\r\n    switch (period) {\r\n      case 'today':\r\n        this.reportConfig.dateRange = {\r\n          start: now.toISOString().split('T')[0],\r\n          end: now.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'yesterday':\r\n        const yesterday = new Date(now);\r\n        yesterday.setDate(yesterday.getDate() - 1);\r\n        this.reportConfig.dateRange = {\r\n          start: yesterday.toISOString().split('T')[0],\r\n          end: yesterday.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'this_week':\r\n        const startOfWeek = new Date(now);\r\n        startOfWeek.setDate(now.getDate() - now.getDay());\r\n        const endOfWeek = new Date(startOfWeek);\r\n        endOfWeek.setDate(startOfWeek.getDate() + 6);\r\n        this.reportConfig.dateRange = {\r\n          start: startOfWeek.toISOString().split('T')[0],\r\n          end: endOfWeek.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'last_week':\r\n        const lastWeekStart = new Date(now);\r\n        lastWeekStart.setDate(now.getDate() - now.getDay() - 7);\r\n        const lastWeekEnd = new Date(lastWeekStart);\r\n        lastWeekEnd.setDate(lastWeekStart.getDate() + 6);\r\n        this.reportConfig.dateRange = {\r\n          start: lastWeekStart.toISOString().split('T')[0],\r\n          end: lastWeekEnd.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'this_month':\r\n        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\r\n        const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n        this.reportConfig.dateRange = {\r\n          start: startOfMonth.toISOString().split('T')[0],\r\n          end: endOfMonth.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'last_month':\r\n        const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n        const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\r\n        this.reportConfig.dateRange = {\r\n          start: lastMonthStart.toISOString().split('T')[0],\r\n          end: lastMonthEnd.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'this_quarter':\r\n        const quarter = Math.floor(now.getMonth() / 3);\r\n        const startOfQuarter = new Date(now.getFullYear(), quarter * 3, 1);\r\n        const endOfQuarter = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n        this.reportConfig.dateRange = {\r\n          start: startOfQuarter.toISOString().split('T')[0],\r\n          end: endOfQuarter.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'last_quarter':\r\n        const lastQuarter = Math.floor(now.getMonth() / 3) - 1;\r\n        const lastQuarterStart = new Date(now.getFullYear(), lastQuarter * 3, 1);\r\n        const lastQuarterEnd = new Date(now.getFullYear(), lastQuarter * 3 + 3, 0);\r\n        this.reportConfig.dateRange = {\r\n          start: lastQuarterStart.toISOString().split('T')[0],\r\n          end: lastQuarterEnd.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'this_year':\r\n        const startOfYear = new Date(now.getFullYear(), 0, 1);\r\n        const endOfYear = new Date(now.getFullYear(), 11, 31);\r\n        this.reportConfig.dateRange = {\r\n          start: startOfYear.toISOString().split('T')[0],\r\n          end: endOfYear.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'last_year':\r\n        const lastYearStart = new Date(now.getFullYear() - 1, 0, 1);\r\n        const lastYearEnd = new Date(now.getFullYear() - 1, 11, 31);\r\n        this.reportConfig.dateRange = {\r\n          start: lastYearStart.toISOString().split('T')[0],\r\n          end: lastYearEnd.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n      case 'ytd':\r\n        const ytdStart = new Date(now.getFullYear(), 0, 1);\r\n        this.reportConfig.dateRange = {\r\n          start: ytdStart.toISOString().split('T')[0],\r\n          end: now.toISOString().split('T')[0]\r\n        };\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load report data based on active tab\r\n   */\r\n  private loadReportData(): void {\r\n    console.log('loadReportData called, activeTab:', this.activeTab);\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n\r\n    let request$: any;\r\n\r\n    switch (this.activeTab) {\r\n      case 'assets':\r\n        console.log('Loading asset summary...');\r\n        request$ = this.reportsApi.getAssetSummary(this.reportConfig);\r\n        break;\r\n      case 'maintenance':\r\n        request$ = this.reportsApi.getMaintenanceSummary(this.reportConfig);\r\n        break;\r\n      case 'inventory':\r\n        // TODO: Implement inventory reports\r\n        this.isLoading = false;\r\n        this.hasData = false;\r\n        return;\r\n      case 'financial':\r\n        // TODO: Implement financial reports\r\n        this.isLoading = false;\r\n        this.hasData = false;\r\n        return;\r\n      case 'custom':\r\n        // TODO: Implement custom reports\r\n        this.isLoading = false;\r\n        this.hasData = false;\r\n        return;\r\n      default:\r\n        this.isLoading = false;\r\n        this.hasData = false;\r\n        return;\r\n    }\r\n\r\n    if (request$) {\r\n      request$.pipe(\r\n        takeUntil(this.destroy$)\r\n      ).subscribe({\r\n        next: (response: AssetSummaryResponse | MaintenanceSummaryResponse) => {\r\n          console.log('Report data received:', response);\r\n          this.processReportData(response);\r\n          this.isLoading = false;\r\n        },\r\n        error: (error: any) => {\r\n          console.error('Error loading report data:', error);\r\n          console.error('Error status:', error.status);\r\n          console.error('Error message:', error.message);\r\n          console.error('Error details:', error);\r\n          this.errorMessage = `Failed to load report data: ${error.status} - ${error.message}`;\r\n          this.isLoading = false;\r\n          this.hasData = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process report data and extract KPIs\r\n   */\r\n  private processReportData(response: AssetSummaryResponse | MaintenanceSummaryResponse): void {\r\n    console.log('Processing report data:', response);\r\n    \r\n    // Handle different response types\r\n    if ('assets' in response) {\r\n      // AssetSummaryResponse\r\n      this.reportData = response.assets || [];\r\n    } else if ('work_orders' in response) {\r\n      // MaintenanceSummaryResponse\r\n      this.reportData = response.work_orders || [];\r\n    } else {\r\n      this.reportData = [];\r\n    }\r\n    \r\n    this.pagination = response.pagination || null;\r\n    this.hasData = this.reportData.length > 0;\r\n    console.log('Processed data - reportData:', this.reportData, 'hasData:', this.hasData);\r\n\r\n    // Extract KPIs based on response type\r\n    if ('totals' in response && response.totals) {\r\n      // AssetSummaryResponse\r\n      this.kpiCards = this.buildKPICardsFromTotals(response.totals);\r\n    } else if ('kpis' in response && response.kpis) {\r\n      // MaintenanceSummaryResponse\r\n      this.kpiCards = this.buildKPICardsFromKPIs(response.kpis);\r\n    } else {\r\n      this.kpiCards = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build KPI cards from totals data\r\n   */\r\n  private buildKPICardsFromTotals(totals: any): any[] {\r\n    return [\r\n      {\r\n        title: 'Total Assets',\r\n        value: totals.total_count || 0,\r\n        icon: 'package',\r\n        trend: null\r\n      },\r\n      {\r\n        title: 'Total Value',\r\n        value: `$${(totals.total_value || 0).toLocaleString()}`,\r\n        icon: 'dollar-sign',\r\n        trend: null\r\n      },\r\n      {\r\n        title: 'Active Assets',\r\n        value: totals.active_count || 0,\r\n        icon: 'check-circle',\r\n        trend: null\r\n      },\r\n      {\r\n        title: 'In Maintenance',\r\n        value: totals.maintenance_count || 0,\r\n        icon: 'wrench',\r\n        trend: null\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Build KPI cards from KPIs data\r\n   */\r\n  private buildKPICardsFromKPIs(kpis: any): any[] {\r\n    return [\r\n      {\r\n        title: 'MTTR',\r\n        value: `${kpis.mttr || 0}h`,\r\n        icon: 'clock',\r\n        trend: null\r\n      },\r\n      {\r\n        title: 'MTBF',\r\n        value: `${kpis.mtbf || 0}h`,\r\n        icon: 'trending-up',\r\n        trend: null\r\n      },\r\n      {\r\n        title: 'Compliance',\r\n        value: `${kpis.compliance || 0}%`,\r\n        icon: 'calendar',\r\n        trend: null\r\n      },\r\n      {\r\n        title: 'Cost/Asset',\r\n        value: `$${kpis.cost_per_asset || 0}K`,\r\n        icon: 'dollar-sign',\r\n        trend: null\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Handle tab change\r\n   */\r\n  onTabChange(tabId: ReportCategory): void {\r\n    this.activeTab = tabId;\r\n    this.selectedReport = '';\r\n    this.selectedReports = [];\r\n    this.loadReportData();\r\n  }\r\n\r\n  /**\r\n   * Handle refresh\r\n   */\r\n  onRefresh(): void {\r\n    this.loadReportData();\r\n  }\r\n\r\n  /**\r\n   * Handle export\r\n   */\r\n  onExport(): void {\r\n    this.showExportPanel = true;\r\n  }\r\n\r\n  /**\r\n   * Handle config change\r\n   */\r\n  onConfigChange(config: ReportConfig): void {\r\n    this.reportConfig = { ...config };\r\n  }\r\n\r\n  /**\r\n   * Handle apply filters\r\n   */\r\n  onApplyFilters(): void {\r\n    this.loadReportData();\r\n  }\r\n\r\n  /**\r\n   * Handle reset filters\r\n   */\r\n  onResetFilters(): void {\r\n    this.reportConfig = {\r\n      dateRange: { start: null, end: null },\r\n      period: 'this_month',\r\n      page: 1,\r\n      pageSize: 50,\r\n      locationIds: [],\r\n      assetIds: [],\r\n      userIds: [],\r\n      statusIds: [],\r\n      priorityIds: [],\r\n      categoryIds: [],\r\n      search: '',\r\n      sortBy: '',\r\n      sortDirection: 'asc'\r\n    };\r\n    this.initializeDateRange();\r\n    this.loadReportData();\r\n  }\r\n\r\n  /**\r\n   * Handle page change\r\n   */\r\n  onPageChange(page: number): void {\r\n    this.reportConfig.page = page;\r\n    this.loadReportData();\r\n  }\r\n\r\n  /**\r\n   * Handle page size change\r\n   */\r\n  onPageSizeChange(pageSize: number): void {\r\n    this.reportConfig.pageSize = pageSize;\r\n    this.reportConfig.page = 1;\r\n    this.loadReportData();\r\n  }\r\n\r\n  /**\r\n   * Handle sort change\r\n   */\r\n  onSortChange(sort: { field: string; direction: 'asc' | 'desc' }): void {\r\n    this.reportConfig.sortBy = sort.field;\r\n    this.reportConfig.sortDirection = sort.direction;\r\n    this.loadReportData();\r\n  }\r\n\r\n  /**\r\n   * Handle close export panel\r\n   */\r\n  onCloseExportPanel(): void {\r\n    this.showExportPanel = false;\r\n  }\r\n\r\n  /**\r\n   * Handle export report\r\n   */\r\n  onExportReport(exportData: any): void {\r\n    const reportKey = this.getReportKey();\r\n    this.exportService.exportReport(reportKey, exportData.format as any, exportData.params)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (runId) => {\r\n          console.log('Export started:', runId);\r\n          this.showExportPanel = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Export failed:', error);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get report key for export\r\n   */\r\n  private getReportKey(): string {\r\n    return `${this.activeTab}.${this.selectedReport || 'summary'}`;\r\n  }\r\n\r\n  /**\r\n   * Generate quick report\r\n   */\r\n  generateQuickReport(type: string): void {\r\n    console.log('Generating quick report:', type);\r\n    // TODO: Implement quick report generation\r\n  }\r\n\r\n  /**\r\n   * Run custom report\r\n   */\r\n  runCustomReport(): void {\r\n    console.log('Running custom report:', this.customReport);\r\n    // TODO: Implement custom report execution\r\n  }\r\n\r\n  /**\r\n   * Save custom report\r\n   */\r\n  saveCustomReport(): void {\r\n    console.log('Saving custom report:', this.customReport);\r\n    // TODO: Implement custom report saving\r\n  }\r\n\r\n  /**\r\n   * Edit saved report\r\n   */\r\n  editReport(report: any): void {\r\n    console.log('Editing report:', report);\r\n    // TODO: Implement report editing\r\n  }\r\n\r\n  /**\r\n   * Run saved report\r\n   */\r\n  runReport(report: any): void {\r\n    console.log('Running saved report:', report);\r\n    // TODO: Implement saved report execution\r\n  }\r\n\r\n  /**\r\n   * Use quick template\r\n   */\r\n  useTemplate(template: any): void {\r\n    console.log('Using template:', template);\r\n    // TODO: Implement template usage\r\n  }\r\n\r\n  /**\r\n   * Handle report selection change\r\n   */\r\n  onReportSelectionChange(reportId: string, event: any): void {\r\n    const isChecked = event.target.checked;\r\n    \r\n    if (isChecked) {\r\n      // Add to selected reports if not already present\r\n      if (!this.selectedReports.includes(reportId)) {\r\n        this.selectedReports.push(reportId);\r\n      }\r\n    } else {\r\n      // Remove from selected reports\r\n      this.selectedReports = this.selectedReports.filter(id => id !== reportId);\r\n    }\r\n    \r\n    // Keep selectedReport for backward compatibility (first selected)\r\n    this.selectedReport = this.selectedReports.length > 0 ? this.selectedReports[0] : '';\r\n    \r\n    console.log('Report selection changed:', reportId, 'checked:', isChecked);\r\n    console.log('Selected reports:', this.selectedReports);\r\n  }\r\n\r\n  /**\r\n   * Check if a report is selected\r\n   */\r\n  isReportSelected(reportId: string): boolean {\r\n    return this.selectedReports.includes(reportId);\r\n  }\r\n\r\n  /**\r\n   * Generate selected reports\r\n   */\r\n  onGenerateSelectedReports(): void {\r\n    if (this.selectedReports.length === 0) {\r\n      console.warn('No reports selected');\r\n      return;\r\n    }\r\n\r\n    console.log('Generating selected reports:', this.selectedReports);\r\n    console.log('Export format:', this.exportFormat);\r\n    console.log('Date range:', this.reportConfig.dateRange);\r\n\r\n    // Set loading state\r\n    this.isGenerating = true;\r\n    this.errorMessage = '';\r\n    this.successMessage = '';\r\n\r\n    // For now, handle only the first selected report\r\n    // TODO: Handle multiple reports if needed\r\n    const reportId = this.selectedReports[0];\r\n    const reportKey = `assets.${reportId}`;\r\n    const exportParams = {\r\n      date_from: this.reportConfig.dateRange.start,\r\n      date_to: this.reportConfig.dateRange.end,\r\n      format: this.exportFormat\r\n    };\r\n\r\n      // Call the API to start the export\r\n      this.reportsApi.exportReport({\r\n        report_key: reportKey,\r\n        format: this.exportFormat as any, // Type assertion for now\r\n        params: exportParams\r\n      }).pipe(\r\n        takeUntil(this.destroy$)\r\n      ).subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            console.log('Export job queued successfully:', response.data);\r\n            \r\n            // Start polling for the export status\r\n            this.pollExportStatus(response.data.run_id, reportKey);\r\n          } else {\r\n            this.errorMessage = 'Export failed: ' + (response.error || 'Unknown error');\r\n            this.isGenerating = false;\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Export failed:', error);\r\n          this.errorMessage = 'Export failed: ' + error.message;\r\n          this.isGenerating = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Poll export status until completion\r\n   */\r\n  private pollExportStatus(runId: number, reportKey: string): void {\r\n    const maxPolls = 15; // 30 seconds max\r\n    let pollCount = 0;\r\n    \r\n    const pollInterval = setInterval(() => {\r\n      pollCount++;\r\n      \r\n      this.reportsApi.getExportStatus(runId).pipe(\r\n        takeUntil(this.destroy$)\r\n      ).subscribe({\r\n        next: (statusResponse) => {\r\n          if (statusResponse.success && statusResponse.data) {\r\n            const status = statusResponse.data;\r\n            console.log(`Poll ${pollCount}: Export status for run ${runId}:`, status.status);\r\n            \r\n            if (status.status === 'success') {\r\n              // Export completed successfully\r\n              clearInterval(pollInterval);\r\n              this.isGenerating = false;\r\n              \r\n              if (status.download_url) {\r\n                this.downloadFile(status.download_url, status.report_key, status.format);\r\n                this.successMessage = `Report generated successfully! (${status.execution_time_formatted})`;\r\n              } else {\r\n                this.errorMessage = 'Export completed but no download URL provided';\r\n              }\r\n            } else if (status.status === 'failed') {\r\n              // Export failed\r\n              clearInterval(pollInterval);\r\n              this.isGenerating = false;\r\n              this.errorMessage = 'Export failed: ' + (status.error_message || 'Unknown error');\r\n            } else if (pollCount >= maxPolls) {\r\n              // Timeout\r\n              clearInterval(pollInterval);\r\n              this.isGenerating = false;\r\n              this.errorMessage = 'Export timed out. Please check the export status manually.';\r\n            }\r\n            // Continue polling for 'queued' or 'running' status\r\n          } else {\r\n            // API error\r\n            clearInterval(pollInterval);\r\n            this.isGenerating = false;\r\n            this.errorMessage = 'Failed to check export status: ' + (statusResponse.error || 'Unknown error');\r\n          }\r\n        },\r\n        error: (error) => {\r\n          clearInterval(pollInterval);\r\n          this.isGenerating = false;\r\n          this.errorMessage = 'Error checking export status: ' + error.message;\r\n        }\r\n      });\r\n    }, 2000); // Poll every 2 seconds\r\n  }\r\n\r\n  /**\r\n   * Download file from URL\r\n   */\r\n  downloadFile(downloadUrl: string, reportKey: string, format: string): void {\r\n    // Construct full URL\r\n    const baseUrl = 'http://assetgo-backend.test';\r\n    const fullUrl = downloadUrl.startsWith('http') ? downloadUrl : `${baseUrl}${downloadUrl}`;\r\n    \r\n    console.log('Downloading file from URL:', fullUrl);\r\n    \r\n    // Generate filename\r\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\r\n    const reportName = reportKey.replace(/\\./g, '-').replace(/[^a-zA-Z0-9-]/g, '');\r\n    const filename = `${reportName}-${timestamp}.${format}`;\r\n    \r\n    // Create a temporary link and click it to trigger download\r\n    const link = document.createElement('a');\r\n    link.href = fullUrl;\r\n    link.target = '_blank';\r\n    link.download = filename;\r\n    link.rel = 'noopener noreferrer';\r\n    \r\n    // Add to DOM, click, and remove\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    console.log('Download initiated for:', filename);\r\n  }\r\n\r\n  /**\r\n   * Handle export request from export panel\r\n   */\r\n  onExportRequest(exportData: { format: string, params: any }): void {\r\n    console.log('Export request from panel:', exportData);\r\n    \r\n    // Use the selected reports or fall back to single report\r\n    const reportsToExport = this.selectedReports.length > 0 ? this.selectedReports : [this.selectedReport];\r\n    \r\n    if (reportsToExport.length === 0) {\r\n      console.warn('No reports selected for export');\r\n      return;\r\n    }\r\n\r\n    const reportKeys = reportsToExport.map(reportId => `assets.${reportId}`);\r\n    const exportParams = {\r\n      date_from: this.reportConfig.dateRange.start,\r\n      date_to: this.reportConfig.dateRange.end,\r\n      format: exportData.format,\r\n      ...exportData.params\r\n    };\r\n\r\n    // Create export requests for each selected report\r\n    const exportRequests = reportKeys.map(reportKey => \r\n      this.exportService.exportReport(\r\n        reportKey,\r\n        exportData.format as any,\r\n        exportParams\r\n      ).pipe(\r\n        takeUntil(this.destroy$)\r\n      )\r\n    );\r\n\r\n    // Process all exports\r\n    exportRequests.forEach((request, index) => {\r\n      request.subscribe({\r\n        next: (runId) => {\r\n          console.log(`Export ${index + 1}/${reportKeys.length} started:`, reportKeys[index], 'Run ID:', runId);\r\n        },\r\n        error: (error) => {\r\n          console.error(`Export ${index + 1}/${reportKeys.length} failed:`, reportKeys[index], error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n", "<div class=\"reports-page\">\r\n  <!-- Debug Info (temporary) -->\r\n  <div style=\"background: #f0f0f0; padding: 10px; margin: 10px; border: 1px solid #ccc;\" *ngIf=\"false\">\r\n    <h3>Debug Info</h3>\r\n    <p>Component loaded: {{ getCurrentTime() }}</p>\r\n    <p>Active Tab: {{ activeTab }}</p>\r\n    <p>Is Loading: {{ isLoading }}</p>\r\n    <p>Has Data: {{ hasData }}</p>\r\n    <p>Error Message: {{ errorMessage }}</p>\r\n  </div>\r\n\r\n  <!-- Header -->\r\n  <div class=\"reports-header\">\r\n    <div class=\"header-content\">\r\n      <div class=\"header-left\">\r\n        <h1 class=\"title\">Reports</h1>\r\n        <p class=\"subtitle\">Generate and export comprehensive reports for your asset management</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <button class=\"action-button refresh-button\" (click)=\"onRefresh()\" [disabled]=\"isLoading\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path>\r\n            <path d=\"M21 3v5h-5\"></path>\r\n            <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path>\r\n            <path d=\"M3 21v-5h5\"></path>\r\n          </svg>\r\n          Refresh\r\n        </button>\r\n        <button class=\"action-button export-button\" (click)=\"onExport()\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\r\n            <path d=\"M7 10l5 5 5-5\"></path>\r\n            <path d=\"M12 15V3\"></path>\r\n          </svg>\r\n          Export\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Report Category Tabs -->\r\n  <div class=\"report-tabs\">\r\n    <button \r\n      *ngFor=\"let tab of tabs\" \r\n      class=\"tab-button\" \r\n      [class.active]=\"activeTab === tab.id\"\r\n      (click)=\"onTabChange(tab.id)\">\r\n      <svg class=\"tab-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n        <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n        <path d=\"M14 2v6h6\"></path>\r\n        <path d=\"M16 13H8\"></path>\r\n        <path d=\"M16 17H8\"></path>\r\n        <path d=\"M10 9H8\"></path>\r\n      </svg>\r\n      {{ tab.label }}\r\n      <span class=\"new-badge\" *ngIf=\"tab.id === 'custom'\">New</span>\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Main Content Area -->\r\n  <div class=\"reports-content\">\r\n    \r\n    <!-- Asset Reports UI -->\r\n    <div *ngIf=\"activeTab === 'assets'\" class=\"report-category\">\r\n      <!-- Filters and Configuration -->\r\n      <div class=\"filters-section\">\r\n        <div class=\"filter-card\">\r\n          <h3>Report Configuration</h3>\r\n          <p>Configure your asset reports with custom date ranges and filters</p>\r\n          <div class=\"filter-row\">\r\n            <div class=\"filter-group\">\r\n              <label>Start Date</label>\r\n              <input type=\"date\" class=\"filter-input\" [(ngModel)]=\"reportConfig.dateRange.start\">\r\n            </div>\r\n            <div class=\"filter-group\">\r\n              <label>End Date</label>\r\n              <input type=\"date\" class=\"filter-input\" [(ngModel)]=\"reportConfig.dateRange.end\">\r\n            </div>\r\n            <div class=\"filter-group\">\r\n              <label>Export Format</label>\r\n              <select class=\"filter-select\" [(ngModel)]=\"exportFormat\">\r\n                <option value=\"pdf\">PDF Document</option>\r\n                <option value=\"xlsx\">Excel Spreadsheet</option>\r\n                <option value=\"csv\">CSV File</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <button class=\"generate-button\" (click)=\"onGenerateSelectedReports()\" [disabled]=\"selectedReports.length === 0 || isGenerating\">\r\n            <span *ngIf=\"!isGenerating\">Generate Selected Reports ({{ selectedReports.length }})</span>\r\n            <span *ngIf=\"isGenerating\" class=\"loading-content\">\r\n              <i class=\"loading-spinner\"></i>\r\n              Generating Report...\r\n            </span>\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"quick-reports-card\">\r\n          <h3>Quick Reports</h3>\r\n          <p>Generate commonly requested reports instantly</p>\r\n          <div class=\"quick-report-item\" (click)=\"generateQuickReport('current-month')\">\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n              <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            </svg>\r\n            <span>Current Month Asset Summary</span>\r\n          </div>\r\n          <div class=\"quick-report-item\" (click)=\"generateQuickReport('performance')\">\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18\"></path>\r\n              <path d=\"M18 17V9M13 17V5M8 17v-3\"></path>\r\n            </svg>\r\n            <span>Asset Performance Dashboard</span>\r\n          </div>\r\n          <div class=\"quick-report-item\" (click)=\"generateQuickReport('warranty')\">\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 12l2 2 4-4\"></path>\r\n              <path d=\"M21 12c-1 0-3-1-3-3s2-3 3-3 3 1 3 3-2 3-3 3\"></path>\r\n              <path d=\"M3 12c1 0 3-1 3-3s-2-3-3-3-3 1-3 3 2 3 3 3\"></path>\r\n            </svg>\r\n            <span>Warranty Expiring This Quarter</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Available Reports -->\r\n      <div class=\"available-reports\">\r\n        <h3>Available Asset Reports</h3>\r\n        <p>Select the reports you want to generate. Multiple reports can be combined into a single export.</p>\r\n        \r\n        <div class=\"report-list\">\r\n          <div class=\"report-item\" *ngFor=\"let report of assetReports\">\r\n            <input type=\"checkbox\" [id]=\"report.id\" name=\"assetReport\" [value]=\"report.id\" (change)=\"onReportSelectionChange(report.id, $event)\" [checked]=\"isReportSelected(report.id)\">\r\n            <label [for]=\"report.id\" class=\"report-card\" [class.selected]=\"isReportSelected(report.id)\">\r\n              <div class=\"checkbox-indicator\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" *ngIf=\"isReportSelected(report.id)\">\r\n                  <polyline points=\"20,6 9,17 4,12\"></polyline>\r\n                </svg>\r\n              </div>\r\n              <div class=\"report-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                  <path d=\"M14 2v6h6\"></path>\r\n                  <path d=\"M16 13H8\"></path>\r\n                  <path d=\"M16 17H8\"></path>\r\n                  <path d=\"M10 9H8\"></path>\r\n                </svg>\r\n              </div>\r\n              <div class=\"report-content\">\r\n                <h4>{{ report.title }}</h4>\r\n                <p>{{ report.description }}</p>\r\n                <span class=\"report-time\">{{ report.estimatedTime }}</span>\r\n              </div>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Maintenance Reports UI -->\r\n    <div *ngIf=\"activeTab === 'maintenance'\" class=\"report-category\">\r\n      <!-- Filters -->\r\n      <div class=\"filters-section\">\r\n        <div class=\"filter-card\">\r\n          <h3>Time Period</h3>\r\n          <select class=\"filter-select\" [(ngModel)]=\"maintenanceFilters.period\">\r\n            <option value=\"last_month\">Last Month</option>\r\n            <option value=\"this_month\">This Month</option>\r\n            <option value=\"last_quarter\">Last Quarter</option>\r\n            <option value=\"this_quarter\">This Quarter</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"filter-card\">\r\n          <h3>Maintenance Type</h3>\r\n          <select class=\"filter-select\" [(ngModel)]=\"maintenanceFilters.type\">\r\n            <option value=\"all\">All Types</option>\r\n            <option value=\"preventive\">Preventive</option>\r\n            <option value=\"corrective\">Corrective</option>\r\n            <option value=\"emergency\">Emergency</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"quick-actions-card\">\r\n          <h3>Quick Actions</h3>\r\n          <button class=\"quick-action-button\" (click)=\"generateQuickReport('monthly-summary')\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n              <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            </svg>\r\n            Monthly Summary\r\n          </button>\r\n          <button class=\"quick-action-button\" (click)=\"generateQuickReport('overdue-tasks')\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n              <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n            </svg>\r\n            Overdue Tasks\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Maintenance Reports List -->\r\n      <div class=\"maintenance-reports\">\r\n        <h3>Maintenance Reports</h3>\r\n        <p>Select the maintenance reports you want to generate and analyze.</p>\r\n        \r\n        <div class=\"report-grid\">\r\n          <div class=\"report-card\" *ngFor=\"let report of maintenanceReports\">\r\n            <input type=\"radio\" [id]=\"report.id\" name=\"maintenanceReport\" [(ngModel)]=\"selectedReport\" [value]=\"report.id\">\r\n            <label [for]=\"report.id\" class=\"report-card-content\">\r\n              <div class=\"report-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"></path>\r\n                </svg>\r\n              </div>\r\n              <div class=\"report-content\">\r\n                <h4>{{ report.title }}</h4>\r\n                <p>{{ report.description }}</p>\r\n                <span class=\"report-time\">{{ report.estimatedTime }}</span>\r\n              </div>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Maintenance KPIs -->\r\n      <div class=\"kpi-section\">\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n              <polyline points=\"12,6 12,12 16,14\"></polyline>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>MTTR</h4>\r\n            <span class=\"kpi-value\">4.2h</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18\"></path>\r\n              <path d=\"M18 17V9M13 17V5M8 17v-3\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>MTBF</h4>\r\n            <span class=\"kpi-value\">168h</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n              <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Compliance</h4>\r\n            <span class=\"kpi-value\">94%</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\r\n              <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Cost/Asset</h4>\r\n            <span class=\"kpi-value\">$2.1K</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Inventory Reports UI -->\r\n    <div *ngIf=\"activeTab === 'inventory'\" class=\"report-category\">\r\n      <!-- Filters -->\r\n      <div class=\"filters-section\">\r\n        <div class=\"filter-card\">\r\n          <h3>Category Filter</h3>\r\n          <select class=\"filter-select\" [(ngModel)]=\"inventoryFilters.category\">\r\n            <option value=\"all\">All Categories</option>\r\n            <option value=\"parts\">Parts</option>\r\n            <option value=\"supplies\">Supplies</option>\r\n            <option value=\"tools\">Tools</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"filter-card\">\r\n          <h3>Location Filter</h3>\r\n          <select class=\"filter-select\" [(ngModel)]=\"inventoryFilters.location\">\r\n            <option value=\"all\">All Locations</option>\r\n            <option value=\"warehouse\">Warehouse</option>\r\n            <option value=\"office\">Office</option>\r\n            <option value=\"field\">Field</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"quick-insights-card\">\r\n          <h3>Quick Insights</h3>\r\n          <div class=\"insight-item\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n              <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n            </svg>\r\n            <span>Low Stock Alerts</span>\r\n          </div>\r\n          <div class=\"insight-item\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18\"></path>\r\n              <path d=\"M18 17V9M13 17V5M8 17v-3\"></path>\r\n            </svg>\r\n            <span>Top Consumed Items</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Inventory KPIs -->\r\n      <div class=\"kpi-section\">\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\r\n              <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Total Value</h4>\r\n            <span class=\"kpi-value\">$124.5K</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18\"></path>\r\n              <path d=\"M18 17V9M13 17V5M8 17v-3\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Turnover Rate</h4>\r\n            <span class=\"kpi-value\">4.2x</span>\r\n            <svg class=\"trend-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <polyline points=\"23 6 13.5 15.5 8.5 10.5 1 18\"></polyline>\r\n              <polyline points=\"17 6 23 6 23 12\"></polyline>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n              <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Low Stock Items</h4>\r\n            <span class=\"kpi-value\">12</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path>\r\n              <polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline>\r\n              <line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Active SKUs</h4>\r\n            <span class=\"kpi-value\">847</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Inventory Reports List -->\r\n      <div class=\"inventory-reports\">\r\n        <h3>Inventory Reports</h3>\r\n        <p>Generate comprehensive inventory analysis and management reports</p>\r\n        \r\n        <div class=\"report-grid\">\r\n          <div class=\"report-card\" *ngFor=\"let report of inventoryReports\">\r\n            <input type=\"radio\" [id]=\"report.id\" name=\"inventoryReport\" [(ngModel)]=\"selectedReport\" [value]=\"report.id\">\r\n            <label [for]=\"report.id\" class=\"report-card-content\">\r\n              <div class=\"report-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path>\r\n                  <polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline>\r\n                  <line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>\r\n                </svg>\r\n              </div>\r\n              <div class=\"report-content\">\r\n                <h4>{{ report.title }}</h4>\r\n                <p>{{ report.description }}</p>\r\n                <span class=\"report-time\">{{ report.estimatedTime }}</span>\r\n              </div>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Financial Reports UI -->\r\n    <div *ngIf=\"activeTab === 'financial'\" class=\"report-category\">\r\n      <!-- Filters -->\r\n      <div class=\"filters-section\">\r\n        <div class=\"filter-card\">\r\n          <h3>Reporting Period</h3>\r\n          <select class=\"filter-select\" [(ngModel)]=\"financialFilters.period\">\r\n            <option value=\"monthly\">Monthly</option>\r\n            <option value=\"quarterly\">Quarterly</option>\r\n            <option value=\"yearly\">Yearly</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"filter-card\">\r\n          <h3>Currency</h3>\r\n          <select class=\"filter-select\" [(ngModel)]=\"financialFilters.currency\">\r\n            <option value=\"AED\">AED (Dirham)</option>\r\n            <option value=\"USD\">USD (Dollar)</option>\r\n            <option value=\"EUR\">EUR (Euro)</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"executive-summary-card\">\r\n          <h3>Executive Summary</h3>\r\n          <div class=\"summary-item\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\r\n              <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\r\n            </svg>\r\n            <span>Monthly P&L</span>\r\n          </div>\r\n          <div class=\"summary-item\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18\"></path>\r\n              <path d=\"M18 17V9M13 17V5M8 17v-3\"></path>\r\n            </svg>\r\n            <span>Cost Trends</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Financial KPIs -->\r\n      <div class=\"kpi-section\">\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\r\n              <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Total Asset Value</h4>\r\n            <span class=\"kpi-value\">AED 2.4M</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n              <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Monthly Costs</h4>\r\n            <span class=\"kpi-value\">AED 68K</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18\"></path>\r\n              <path d=\"M18 17V9M13 17V5M8 17v-3\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>Budget Variance</h4>\r\n            <span class=\"kpi-value\">-8.2%</span>\r\n            <svg class=\"trend-icon positive\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <polyline points=\"23 6 13.5 15.5 8.5 10.5 1 18\"></polyline>\r\n              <polyline points=\"17 6 23 6 23 12\"></polyline>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n          <div class=\"kpi-icon\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n              <polyline points=\"12,6 12,12 16,14\"></polyline>\r\n            </svg>\r\n          </div>\r\n          <div class=\"kpi-content\">\r\n            <h4>ROI</h4>\r\n            <span class=\"kpi-value\">12.4%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Financial Reports List -->\r\n      <div class=\"financial-reports\">\r\n        <h3>Financial Reports</h3>\r\n        <p>Generate comprehensive financial analysis and cost management reports</p>\r\n        \r\n        <div class=\"report-grid\">\r\n          <div class=\"report-card\" *ngFor=\"let report of financialReports\">\r\n            <input type=\"radio\" [id]=\"report.id\" name=\"financialReport\" [(ngModel)]=\"selectedReport\" [value]=\"report.id\">\r\n            <label [for]=\"report.id\" class=\"report-card-content\">\r\n              <div class=\"report-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                  <path d=\"M14 2v6h6\"></path>\r\n                  <path d=\"M16 13H8\"></path>\r\n                  <path d=\"M16 17H8\"></path>\r\n                  <path d=\"M10 9H8\"></path>\r\n                </svg>\r\n              </div>\r\n              <div class=\"report-content\">\r\n                <h4>{{ report.title }}</h4>\r\n                <p>{{ report.description }}</p>\r\n                <span class=\"report-time\">{{ report.estimatedTime }}</span>\r\n              </div>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Cost Distribution Chart -->\r\n      <div class=\"cost-distribution\">\r\n        <h3>Cost Distribution Overview</h3>\r\n        <p>Visual breakdown of expenses across different categories</p>\r\n        <div class=\"chart-container\">\r\n          <div class=\"chart-bar maintenance\" style=\"width: 45%\">\r\n            <span>Maintenance (45%)</span>\r\n          </div>\r\n          <div class=\"chart-bar operations\" style=\"width: 32%\">\r\n            <span>Operations (32%)</span>\r\n          </div>\r\n          <div class=\"chart-bar administration\" style=\"width: 23%\">\r\n            <span>Administration (23%)</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Custom Reports UI -->\r\n    <div *ngIf=\"activeTab === 'custom'\" class=\"report-category\">\r\n      <div class=\"custom-reports-layout\">\r\n        <!-- Left Panel: Create Custom Report -->\r\n        <div class=\"create-report-panel\">\r\n          <h3>+ Create Custom Report</h3>\r\n          <p>Build custom reports by selecting data sources, fields, and applying filters</p>\r\n          \r\n          <div class=\"form-section\">\r\n            <div class=\"form-group\">\r\n              <label>Report Name</label>\r\n              <input type=\"text\" class=\"form-input\" placeholder=\"Enter report name...\" [(ngModel)]=\"customReport.name\">\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label>Output Format</label>\r\n              <select class=\"form-select\" [(ngModel)]=\"customReport.format\">\r\n                <option value=\"pdf\">PDF Document</option>\r\n                <option value=\"xlsx\">Excel Spreadsheet</option>\r\n                <option value=\"csv\">CSV File</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label>Description</label>\r\n              <textarea class=\"form-textarea\" placeholder=\"Describe what this report will analyze...\" [(ngModel)]=\"customReport.description\"></textarea>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"data-sources\">\r\n            <h4>Data Sources</h4>\r\n            <div class=\"data-source-item\" *ngFor=\"let source of dataSources\">\r\n              <input type=\"radio\" [id]=\"source.id\" name=\"dataSource\" [(ngModel)]=\"customReport.dataSource\" [value]=\"source.id\">\r\n              <label [for]=\"source.id\">\r\n                <span class=\"source-name\">{{ source.name }}</span>\r\n                <span class=\"field-count\">{{ source.fieldCount }} fields available</span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"filter-conditions\">\r\n            <h4>Filter Conditions (Optional)</h4>\r\n            <textarea class=\"form-textarea\" placeholder=\"e.g., status = 'active' AND purchase_cost > 1000\" [(ngModel)]=\"customReport.filters\"></textarea>\r\n          </div>\r\n\r\n          <div class=\"form-actions\">\r\n            <button class=\"btn-primary\" (click)=\"runCustomReport()\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <polygon points=\"5,3 19,12 5,21\"></polygon>\r\n              </svg>\r\n              Run Report\r\n            </button>\r\n            <button class=\"btn-secondary\" (click)=\"saveCustomReport()\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\r\n                <polyline points=\"17,21 17,13 7,13 7,21\"></polyline>\r\n                <polyline points=\"7,3 7,8 15,8\"></polyline>\r\n              </svg>\r\n              Save Template\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Right Panel: Saved Reports & Templates -->\r\n        <div class=\"saved-reports-panel\">\r\n          <!-- Saved Reports -->\r\n          <div class=\"saved-reports\">\r\n            <h3>Saved Reports</h3>\r\n            <p>Manage your custom report templates</p>\r\n            \r\n            <div class=\"saved-report-item\" *ngFor=\"let report of savedReports\">\r\n              <div class=\"report-info\">\r\n                <h4>{{ report.name }}</h4>\r\n                <p>{{ report.description }}</p>\r\n                <div class=\"report-meta\">\r\n                  <span>{{ report.frequency }}</span>\r\n                  <span>{{ report.lastRun }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"report-actions\">\r\n                <button class=\"action-btn\" (click)=\"editReport(report)\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n                    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n                  </svg>\r\n                </button>\r\n                <button class=\"action-btn\" (click)=\"runReport(report)\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <polygon points=\"5,3 19,12 5,21\"></polygon>\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Quick Templates -->\r\n          <div class=\"quick-templates\">\r\n            <h3>Quick Templates</h3>\r\n            <p>Start with pre-built report templates</p>\r\n            \r\n            <div class=\"template-item\" *ngFor=\"let template of quickTemplates\" (click)=\"useTemplate(template)\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                <path d=\"M14 2v6h6\"></path>\r\n                <path d=\"M16 13H8\"></path>\r\n                <path d=\"M16 17H8\"></path>\r\n                <path d=\"M10 9H8\"></path>\r\n              </svg>\r\n              <span>{{ template.name }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n", "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReportsPage } from './pages/reports.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ReportsPage,\r\n    data: {\r\n      title: 'Reports',\r\n      breadcrumb: 'Reports'\r\n    }\r\n  },\r\n  {\r\n    path: 'assets',\r\n    component: ReportsPage,\r\n    data: {\r\n      title: 'Asset Reports',\r\n      breadcrumb: 'Asset Reports',\r\n      category: 'assets'\r\n    }\r\n  },\r\n  {\r\n    path: 'maintenance',\r\n    component: ReportsPage,\r\n    data: {\r\n      title: 'Maintenance Reports',\r\n      breadcrumb: 'Maintenance Reports',\r\n      category: 'maintenance'\r\n    }\r\n  },\r\n  {\r\n    path: 'inventory',\r\n    component: ReportsPage,\r\n    data: {\r\n      title: 'Inventory Reports',\r\n      breadcrumb: 'Inventory Reports',\r\n      category: 'inventory'\r\n    }\r\n  },\r\n  {\r\n    path: 'financial',\r\n    component: ReportsPage,\r\n    data: {\r\n      title: 'Financial Reports',\r\n      breadcrumb: 'Financial Reports',\r\n      category: 'financial'\r\n    }\r\n  },\r\n  {\r\n    path: 'custom',\r\n    component: ReportsPage,\r\n    data: {\r\n      title: 'Custom Reports',\r\n      breadcrumb: 'Custom Reports',\r\n      category: 'custom'\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ReportsRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n// Services\r\nimport { ReportsApiService } from './services/reports-api.service';\r\nimport { ExportService } from './services/export.service';\r\n\r\n// Routing\r\nimport { ReportsRoutingModule } from './reports-routing.module';\r\n\r\n// Models\r\nexport * from './models/reports.models';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    ReportsRoutingModule\r\n  ],\r\n  providers: [\r\n    ReportsApiService,\r\n    ExportService\r\n  ]\r\n})\r\nexport class ReportsModule { }\r\n"],
  "mappings": "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",
  "names": []
}
