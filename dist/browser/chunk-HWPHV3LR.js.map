{
  "version": 3,
  "sources": ["src/app/ai-features/ai-image-recognition/ai-image-recognition.component.ts", "src/app/ai-features/ai-image-recognition/ai-image-recognition.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AIImageUploadService } from '../shared/ai-image-upload.service';\r\nimport { RecognitionResult } from '../shared/ai-recognition-result.interface';\r\n\r\n@Component({\r\n  selector: 'app-ai-image-recognition',\r\n  templateUrl: './ai-image-recognition.component.html',\r\n  styleUrls: ['./ai-image-recognition.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule]\r\n})\r\nexport class AIImageRecognitionComponent {\r\n  files: File[] = [];\r\n  previews: string[] = [];\r\n  isAnalyzing = false;\r\n  result: RecognitionResult | null = null;\r\n  errorMsg = '';\r\n\r\n  constructor(private up: AIImageUploadService) {}\r\n\r\n  async onSelect(e: Event) {\r\n    const input = e.target as HTMLInputElement;\r\n    if (!input.files?.length) return;\r\n    for (const f of Array.from(input.files)) {\r\n      const v = this.up.validate(f);\r\n      if (!v.ok) { this.errorMsg = v.reason || 'Invalid file'; continue; }\r\n      this.files.push(f);\r\n      this.previews.push(await this.up.toDataUrl(f));\r\n    }\r\n  }\r\n\r\n  async analyze() {\r\n    if (this.previews.length === 0) return;\r\n    this.isAnalyzing = true; this.errorMsg = ''; this.result = null;\r\n    this.up.analyze(this.previews).subscribe({\r\n      next: (r) => { this.result = r.data; this.isAnalyzing = false; },\r\n      error: (err) => { this.errorMsg = err?.error?.message || 'Analysis failed'; this.isAnalyzing = false; }\r\n    });\r\n  }\r\n\r\n  remove(i: number) { this.files.splice(i,1); this.previews.splice(i,1); }\r\n\r\n  getConfidenceClass(isHighConfidence: boolean): string {\r\n    return isHighConfidence ? 'confidence-high' : 'confidence-low';\r\n  }\r\n}\r\n", "<div class=\"container\">\r\n  <h2>AI Image Recognition</h2>\r\n\r\n  <div class=\"uploader\">\r\n    <input type=\"file\" multiple accept=\"image/png,image/jpeg\" (change)=\"onSelect($event)\" />\r\n    <p class=\"hint\">PNG/JPG up to 10MB. Add 1–5 images. Include nameplate close-ups.</p>\r\n  </div>\r\n\r\n  <div class=\"previews\" *ngIf=\"previews.length\">\r\n    <div class=\"thumb\" *ngFor=\"let p of previews; let i = index\">\r\n      <img [src]=\"p\" [alt]=\"'preview-'+i\" />\r\n      <button (click)=\"remove(i)\">Remove</button>\r\n    </div>\r\n  </div>\r\n\r\n  <button [disabled]=\"isAnalyzing || !previews.length\" (click)=\"analyze()\">\r\n    {{ isAnalyzing ? 'Analyzing…' : 'Analyze Image' }}\r\n  </button>\r\n\r\n  <p class=\"error\" *ngIf=\"errorMsg\">{{ errorMsg }}</p>\r\n\r\n  <section class=\"result\" *ngIf=\"result\">\r\n    <div class=\"header\">\r\n      <div>\r\n        <div class=\"label\">Asset Type</div>\r\n        <div class=\"value\">{{ result.assetType }}</div>\r\n      </div>\r\n      <div class=\"chip\">Confidence {{ result.confidence }}%</div>\r\n    </div>\r\n\r\n    <div class=\"grid\">\r\n      <div class=\"field\">\r\n        <span>Manufacturer</span>\r\n        <div class=\"field-content\">\r\n          <strong>{{ result.manufacturer || '—' }}</strong>\r\n          <span class=\"confidence-chip\" *ngIf=\"result.manufacturer\" \r\n                [class]=\"getConfidenceClass(result.evidence?.fieldsFound?.includes('manufacturer'))\">\r\n            {{ result.evidence?.fieldsFound?.includes('manufacturer') ? 'High' : 'Low' }} confidence\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"field\">\r\n        <span>Model</span>\r\n        <div class=\"field-content\">\r\n          <strong>{{ result.model || '—' }}</strong>\r\n          <span class=\"confidence-chip\" *ngIf=\"result.model\" \r\n                [class]=\"getConfidenceClass(result.evidence?.fieldsFound?.includes('model'))\">\r\n            {{ result.evidence?.fieldsFound?.includes('model') ? 'High' : 'Low' }} confidence\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"field\">\r\n        <span>Serial</span>\r\n        <div class=\"field-content\">\r\n          <strong>{{ result.serialNumber || '—' }}</strong>\r\n          <span class=\"confidence-chip\" *ngIf=\"result.serialNumber\" \r\n                [class]=\"getConfidenceClass(result.evidence?.fieldsFound?.includes('serialNumber'))\">\r\n            {{ result.evidence?.fieldsFound?.includes('serialNumber') ? 'High' : 'Low' }} confidence\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"field\">\r\n        <span>Condition</span>\r\n        <div class=\"field-content\">\r\n          <strong>{{ result.condition }}</strong>\r\n          <span class=\"condition-badge\" [class]=\"'condition-' + result.condition.toLowerCase()\">\r\n            {{ result.condition }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"low-confidence-warning\" *ngIf=\"result.confidence < 70\">\r\n      <div class=\"warning-icon\">⚠️</div>\r\n      <div class=\"warning-text\">\r\n        <strong>Low confidence detected.</strong> For better results, try uploading a close-up of the nameplate or label.\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"recs\">\r\n      <div class=\"label\">Recommendations</div>\r\n      <ul>\r\n        <li *ngFor=\"let r of result.recommendations\">{{ r }}</li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"actions\">\r\n      <button>Generate QR</button>\r\n      <button class=\"primary\">Create Asset Record</button>\r\n    </div>\r\n  </section>\r\n</div>\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSI,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,OAAA,EAAA;AACA,IAAA,yBAAA,GAAA,UAAA,EAAA;AAAQ,IAAA,qBAAA,SAAA,SAAA,2EAAA;AAAA,YAAA,OAAA,wBAAA,GAAA,EAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,OAAA,IAAA,CAAS;IAAA,CAAA;AAAE,IAAA,iBAAA,GAAA,QAAA;AAAM,IAAA,uBAAA,EAAS;;;;;AADtC,IAAA,oBAAA;AAAA,IAAA,qBAAA,OAAA,MAAA,uBAAA,EAAS,OAAA,aAAA,IAAA;;;;;AAFlB,IAAA,yBAAA,GAAA,OAAA,CAAA;AACE,IAAA,qBAAA,GAAA,kDAAA,GAAA,GAAA,OAAA,CAAA;AAIF,IAAA,uBAAA;;;;AAJmC,IAAA,oBAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,QAAA;;;;;AAUnC,IAAA,yBAAA,GAAA,KAAA,EAAA;AAAkC,IAAA,iBAAA,CAAA;AAAc,IAAA,uBAAA;;;;AAAd,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,QAAA;;;;;AAgB1B,IAAA,yBAAA,GAAA,QAAA,EAAA;AAEE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AAFM,IAAA,qBAAA,OAAA,mBAAA,OAAA,OAAA,YAAA,OAAA,OAAA,OAAA,OAAA,SAAA,eAAA,OAAA,OAAA,OAAA,OAAA,SAAA,YAAA,SAAA,cAAA,CAAA,CAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,6BAAA,MAAA,OAAA,OAAA,YAAA,OAAA,OAAA,OAAA,OAAA,SAAA,eAAA,OAAA,OAAA,OAAA,OAAA,SAAA,YAAA,SAAA,cAAA,KAAA,SAAA,OAAA,cAAA;;;;;AAQF,IAAA,yBAAA,GAAA,QAAA,EAAA;AAEE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AAFM,IAAA,qBAAA,OAAA,mBAAA,OAAA,OAAA,YAAA,OAAA,OAAA,OAAA,OAAA,SAAA,eAAA,OAAA,OAAA,OAAA,OAAA,SAAA,YAAA,SAAA,OAAA,CAAA,CAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,6BAAA,MAAA,OAAA,OAAA,YAAA,OAAA,OAAA,OAAA,OAAA,SAAA,eAAA,OAAA,OAAA,OAAA,OAAA,SAAA,YAAA,SAAA,OAAA,KAAA,SAAA,OAAA,cAAA;;;;;AAQF,IAAA,yBAAA,GAAA,QAAA,EAAA;AAEE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AAFM,IAAA,qBAAA,OAAA,mBAAA,OAAA,OAAA,YAAA,OAAA,OAAA,OAAA,OAAA,SAAA,eAAA,OAAA,OAAA,OAAA,OAAA,SAAA,YAAA,SAAA,cAAA,CAAA,CAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,6BAAA,MAAA,OAAA,OAAA,YAAA,OAAA,OAAA,OAAA,OAAA,SAAA,eAAA,OAAA,OAAA,OAAA,OAAA,SAAA,YAAA,SAAA,cAAA,KAAA,SAAA,OAAA,cAAA;;;;;AAeR,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAmE,GAAA,OAAA,EAAA;AACvC,IAAA,iBAAA,GAAA,cAAA;AAAE,IAAA,uBAAA;AAC5B,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA0B,GAAA,QAAA;AAChB,IAAA,iBAAA,GAAA,0BAAA;AAAwB,IAAA,uBAAA;AAAU,IAAA,iBAAA,GAAA,2EAAA;AAC5C,IAAA,uBAAA,EAAM;;;;;AAMJ,IAAA,yBAAA,GAAA,IAAA;AAA6C,IAAA,iBAAA,CAAA;AAAO,IAAA,uBAAA;;;;AAAP,IAAA,oBAAA;AAAA,IAAA,4BAAA,IAAA;;;;;AA7DnD,IAAA,yBAAA,GAAA,WAAA,EAAA,EAAuC,GAAA,OAAA,EAAA,EACjB,GAAA,KAAA,EACb,GAAA,OAAA,EAAA;AACgB,IAAA,iBAAA,GAAA,YAAA;AAAU,IAAA,uBAAA;AAC7B,IAAA,yBAAA,GAAA,OAAA,EAAA;AAAmB,IAAA,iBAAA,CAAA;AAAsB,IAAA,uBAAA,EAAM;AAEjD,IAAA,yBAAA,GAAA,OAAA,EAAA;AAAkB,IAAA,iBAAA,CAAA;AAAmC,IAAA,uBAAA,EAAM;AAG7D,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAkB,IAAA,OAAA,EAAA,EACG,IAAA,MAAA;AACX,IAAA,iBAAA,IAAA,cAAA;AAAY,IAAA,uBAAA;AAClB,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA2B,IAAA,QAAA;AACjB,IAAA,iBAAA,EAAA;AAAgC,IAAA,uBAAA;AACxC,IAAA,qBAAA,IAAA,yDAAA,GAAA,GAAA,QAAA,EAAA;AAIF,IAAA,uBAAA,EAAM;AAER,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAmB,IAAA,MAAA;AACX,IAAA,iBAAA,IAAA,OAAA;AAAK,IAAA,uBAAA;AACX,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA2B,IAAA,QAAA;AACjB,IAAA,iBAAA,EAAA;AAAyB,IAAA,uBAAA;AACjC,IAAA,qBAAA,IAAA,yDAAA,GAAA,GAAA,QAAA,EAAA;AAIF,IAAA,uBAAA,EAAM;AAER,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAmB,IAAA,MAAA;AACX,IAAA,iBAAA,IAAA,QAAA;AAAM,IAAA,uBAAA;AACZ,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA2B,IAAA,QAAA;AACjB,IAAA,iBAAA,EAAA;AAAgC,IAAA,uBAAA;AACxC,IAAA,qBAAA,IAAA,yDAAA,GAAA,GAAA,QAAA,EAAA;AAIF,IAAA,uBAAA,EAAM;AAER,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAmB,IAAA,MAAA;AACX,IAAA,iBAAA,IAAA,WAAA;AAAS,IAAA,uBAAA;AACf,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA2B,IAAA,QAAA;AACjB,IAAA,iBAAA,EAAA;AAAsB,IAAA,uBAAA;AAC9B,IAAA,yBAAA,IAAA,QAAA,EAAA;AACE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAO,EACH,EACF;AAGR,IAAA,qBAAA,IAAA,wDAAA,GAAA,GAAA,OAAA,EAAA;AAOA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAkB,IAAA,OAAA,EAAA;AACG,IAAA,iBAAA,IAAA,iBAAA;AAAe,IAAA,uBAAA;AAClC,IAAA,yBAAA,IAAA,IAAA;AACE,IAAA,qBAAA,IAAA,uDAAA,GAAA,GAAA,MAAA,EAAA;AACF,IAAA,uBAAA,EAAK;AAGP,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAqB,IAAA,QAAA;AACX,IAAA,iBAAA,IAAA,aAAA;AAAW,IAAA,uBAAA;AACnB,IAAA,yBAAA,IAAA,UAAA,EAAA;AAAwB,IAAA,iBAAA,IAAA,qBAAA;AAAmB,IAAA,uBAAA,EAAS,EAChD;;;;AAhEiB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,OAAA,SAAA;AAEH,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,eAAA,OAAA,OAAA,YAAA,GAAA;AAON,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,OAAA,gBAAA,QAAA;AACuB,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,OAAA,YAAA;AASvB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,OAAA,SAAA,QAAA;AACuB,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,OAAA,KAAA;AASvB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,OAAA,gBAAA,QAAA;AACuB,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,OAAA,YAAA;AASvB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,OAAA,SAAA;AACsB,IAAA,oBAAA;AAAA,IAAA,qBAAA,eAAA,OAAA,OAAA,UAAA,YAAA,CAAA;AAC5B,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,OAAA,WAAA,GAAA;AAM6B,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,OAAA,aAAA,EAAA;AAUf,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,OAAA,eAAA;;;ADrEpB,IAAO,8BAAP,MAAO,6BAA2B;EAOlB;EANpB,QAAgB,CAAA;EAChB,WAAqB,CAAA;EACrB,cAAc;EACd,SAAmC;EACnC,WAAW;EAEX,YAAoB,IAAwB;AAAxB,SAAA,KAAA;EAA2B;EAEzC,SAAS,GAAQ;;AACrB,YAAM,QAAQ,EAAE;AAChB,UAAI,CAAC,MAAM,OAAO;AAAQ;AAC1B,iBAAW,KAAK,MAAM,KAAK,MAAM,KAAK,GAAG;AACvC,cAAM,IAAI,KAAK,GAAG,SAAS,CAAC;AAC5B,YAAI,CAAC,EAAE,IAAI;AAAE,eAAK,WAAW,EAAE,UAAU;AAAgB;QAAU;AACnE,aAAK,MAAM,KAAK,CAAC;AACjB,aAAK,SAAS,KAAK,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC;MAC/C;IACF;;EAEM,UAAO;;AACX,UAAI,KAAK,SAAS,WAAW;AAAG;AAChC,WAAK,cAAc;AAAM,WAAK,WAAW;AAAI,WAAK,SAAS;AAC3D,WAAK,GAAG,QAAQ,KAAK,QAAQ,EAAE,UAAU;QACvC,MAAM,CAAC,MAAK;AAAG,eAAK,SAAS,EAAE;AAAM,eAAK,cAAc;QAAO;QAC/D,OAAO,CAAC,QAAO;AAAG,eAAK,WAAW,KAAK,OAAO,WAAW;AAAmB,eAAK,cAAc;QAAO;OACvG;IACH;;EAEA,OAAO,GAAS;AAAI,SAAK,MAAM,OAAO,GAAE,CAAC;AAAG,SAAK,SAAS,OAAO,GAAE,CAAC;EAAG;EAEvE,mBAAmB,kBAAyB;AAC1C,WAAO,mBAAmB,oBAAoB;EAChD;;qCAjCW,8BAA2B,4BAAA,oBAAA,CAAA;EAAA;yEAA3B,8BAA2B,WAAA,CAAA,CAAA,0BAAA,CAAA,GAAA,OAAA,IAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,UAAA,GAAA,CAAA,QAAA,QAAA,YAAA,IAAA,UAAA,wBAAA,GAAA,QAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,SAAA,YAAA,GAAA,MAAA,GAAA,CAAA,GAAA,SAAA,UAAA,GAAA,CAAA,SAAA,SAAA,GAAA,MAAA,GAAA,CAAA,SAAA,UAAA,GAAA,MAAA,GAAA,CAAA,GAAA,UAAA,GAAA,CAAA,SAAA,SAAA,GAAA,SAAA,SAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,OAAA,KAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,QAAA,GAAA,CAAA,GAAA,QAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,SAAA,mBAAA,GAAA,SAAA,GAAA,MAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,SAAA,0BAAA,GAAA,MAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,SAAA,SAAA,GAAA,CAAA,GAAA,SAAA,GAAA,CAAA,GAAA,SAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,wBAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,cAAA,CAAA,GAAA,UAAA,SAAA,qCAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACbxC,MAAA,yBAAA,GAAA,OAAA,CAAA,EAAuB,GAAA,IAAA;AACjB,MAAA,iBAAA,GAAA,sBAAA;AAAoB,MAAA,uBAAA;AAExB,MAAA,yBAAA,GAAA,OAAA,CAAA,EAAsB,GAAA,SAAA,CAAA;AACsC,MAAA,qBAAA,UAAA,SAAA,6DAAA,QAAA;AAAA,eAAU,IAAA,SAAA,MAAA;MAAgB,CAAA;AAApF,MAAA,uBAAA;AACA,MAAA,yBAAA,GAAA,KAAA,CAAA;AAAgB,MAAA,iBAAA,GAAA,uEAAA;AAAgE,MAAA,uBAAA,EAAI;AAGtF,MAAA,qBAAA,GAAA,4CAAA,GAAA,GAAA,OAAA,CAAA;AAOA,MAAA,yBAAA,GAAA,UAAA,CAAA;AAAqD,MAAA,qBAAA,SAAA,SAAA,+DAAA;AAAA,eAAS,IAAA,QAAA;MAAS,CAAA;AACrE,MAAA,iBAAA,CAAA;AACF,MAAA,uBAAA;AAEA,MAAA,qBAAA,IAAA,2CAAA,GAAA,GAAA,KAAA,CAAA,EAAkC,IAAA,iDAAA,IAAA,IAAA,WAAA,CAAA;AAwEpC,MAAA,uBAAA;;;AAnFyB,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,SAAA,MAAA;AAOf,MAAA,oBAAA;AAAA,MAAA,qBAAA,YAAA,IAAA,eAAA,CAAA,IAAA,SAAA,MAAA;AACN,MAAA,oBAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,cAAA,oBAAA,iBAAA,GAAA;AAGgB,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,QAAA;AAEO,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,MAAA;;oBDVf,cAAY,SAAA,MAAE,WAAW,GAAA,QAAA,CAAA,i0GAAA,EAAA,CAAA;;;sEAExB,6BAA2B,CAAA;UAPvC;uBACW,4BAA0B,YAGxB,MAAI,SACP,CAAC,cAAc,WAAW,GAAC,UAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,QAAA,CAAA,ovFAAA,EAAA,CAAA;;;;6EAEzB,6BAA2B,EAAA,WAAA,+BAAA,UAAA,8EAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
