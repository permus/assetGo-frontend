{
  "version": 3,
  "sources": ["src/app/ai-features/shared/ai-image-upload.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RecognitionResult } from './ai-recognition-result.interface';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AIImageUploadService {\r\n  private readonly MAX_SIZE = 10 * 1024 * 1024;\r\n  private readonly ALLOWED = ['image/png','image/jpeg','image/jpg'];\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private getAuthHeaders(): { headers: { [header: string]: string } } {\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n      }\r\n    };\r\n  }\r\n\r\n  validate(file: File): { ok: boolean; reason?: string } {\r\n    if (!this.ALLOWED.includes(file.type)) return { ok: false, reason: 'Only PNG/JPG allowed' };\r\n    if (file.size > this.MAX_SIZE) return { ok: false, reason: 'File exceeds 10MB' };\r\n    return { ok: true };\r\n  }\r\n\r\n  async toDataUrl(file: File): Promise<string> {\r\n    // Compress image before encoding\r\n    const compressedFile = await this.compressImage(file);\r\n    \r\n    // Use FileReader for safe base64 conversion\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = (err) => reject(err);\r\n      reader.readAsDataURL(compressedFile);\r\n    });\r\n  }\r\n\r\n  private async compressImage(file: File, quality: number = 0.8): Promise<File> {\r\n    return new Promise((resolve) => {\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d')!;\r\n      const img = new Image();\r\n\r\n      img.onload = () => {\r\n        // Limit dimensions to max 2048px\r\n        const maxSize = 2048;\r\n        let { width, height } = img;\r\n\r\n        if (width > height) {\r\n          if (width > maxSize) {\r\n            height = (height * maxSize) / width;\r\n            width = maxSize;\r\n          }\r\n        } else {\r\n          if (height > maxSize) {\r\n            width = (width * maxSize) / height;\r\n            height = maxSize;\r\n          }\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            if (blob) {\r\n              resolve(new File([blob], file.name, { type: 'image/jpeg' }));\r\n            } else {\r\n              resolve(file);\r\n            }\r\n          },\r\n          'image/jpeg',\r\n          quality\r\n        );\r\n      };\r\n\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  analyze(dataUrls: string[]) {\r\n    // Strip data URL prefix and send clean base64\r\n    const cleanBase64Images = dataUrls.map(dataUrl => \r\n      dataUrl.replace(/^data:image\\/\\w+;base64,/, '')\r\n    );\r\n    \r\n    return this.http.post<{success:boolean; data: RecognitionResult}>(\r\n      `${environment.apiUrl}/ai/image-recognition/analyze`,\r\n      { images: cleanBase64Images },\r\n      this.getAuthHeaders()\r\n    );\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAMM,IAAO,uBAAP,MAAO,sBAAoB;EAGX;EAFH,WAAW,KAAK,OAAO;EACvB,UAAU,CAAC,aAAY,cAAa,WAAW;EAChE,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;EAE/B,iBAAc;AACpB,UAAM,QAAQ,aAAa,QAAQ,OAAO;AAC1C,WAAO;MACL,SAAS;QACP,gBAAgB;SACZ,QAAQ,EAAE,iBAAiB,UAAU,KAAK,GAAE,IAAK,CAAA;;EAG3D;EAEA,SAAS,MAAU;AACjB,QAAI,CAAC,KAAK,QAAQ,SAAS,KAAK,IAAI;AAAG,aAAO,EAAE,IAAI,OAAO,QAAQ,uBAAsB;AACzF,QAAI,KAAK,OAAO,KAAK;AAAU,aAAO,EAAE,IAAI,OAAO,QAAQ,oBAAmB;AAC9E,WAAO,EAAE,IAAI,KAAI;EACnB;EAEM,UAAU,MAAU;;AAExB,YAAM,iBAAiB,MAAM,KAAK,cAAc,IAAI;AAGpD,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,cAAM,SAAS,IAAI,WAAU;AAC7B,eAAO,SAAS,MAAM,QAAQ,OAAO,MAAgB;AACrD,eAAO,UAAU,CAAC,QAAQ,OAAO,GAAG;AACpC,eAAO,cAAc,cAAc;MACrC,CAAC;IACH;;EAEc,cAAc,MAAY,UAAkB,KAAG;;AAC3D,aAAO,IAAI,QAAQ,CAAC,YAAW;AAC7B,cAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,cAAM,MAAM,OAAO,WAAW,IAAI;AAClC,cAAM,MAAM,IAAI,MAAK;AAErB,YAAI,SAAS,MAAK;AAEhB,gBAAM,UAAU;AAChB,cAAI,EAAE,OAAO,OAAM,IAAK;AAExB,cAAI,QAAQ,QAAQ;AAClB,gBAAI,QAAQ,SAAS;AACnB,uBAAU,SAAS,UAAW;AAC9B,sBAAQ;YACV;UACF,OAAO;AACL,gBAAI,SAAS,SAAS;AACpB,sBAAS,QAAQ,UAAW;AAC5B,uBAAS;YACX;UACF;AAEA,iBAAO,QAAQ;AACf,iBAAO,SAAS;AAEhB,cAAI,UAAU,KAAK,GAAG,GAAG,OAAO,MAAM;AAEtC,iBAAO,OACL,CAAC,SAAQ;AACP,gBAAI,MAAM;AACR,sBAAQ,IAAI,KAAK,CAAC,IAAI,GAAG,KAAK,MAAM,EAAE,MAAM,aAAY,CAAE,CAAC;YAC7D,OAAO;AACL,sBAAQ,IAAI;YACd;UACF,GACA,cACA,OAAO;QAEX;AAEA,YAAI,MAAM,IAAI,gBAAgB,IAAI;MACpC,CAAC;IACH;;EAEA,QAAQ,UAAkB;AAExB,UAAM,oBAAoB,SAAS,IAAI,aACrC,QAAQ,QAAQ,4BAA4B,EAAE,CAAC;AAGjD,WAAO,KAAK,KAAK,KACf,GAAG,YAAY,MAAM,iCACrB,EAAE,QAAQ,kBAAiB,GAC3B,KAAK,eAAc,CAAE;EAEzB;;qCA1FW,uBAAoB,mBAAA,UAAA,CAAA;EAAA;4EAApB,uBAAoB,SAApB,sBAAoB,WAAA,YADP,OAAM,CAAA;;;sEACnB,sBAAoB,CAAA;UADhC;WAAW,EAAE,YAAY,OAAM,CAAE;;;",
  "names": []
}
