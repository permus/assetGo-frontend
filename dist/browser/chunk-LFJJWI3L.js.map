{
  "version": 3,
  "sources": ["src/app/shared/services/import-progress.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, interval, Subject, takeUntil } from 'rxjs';\r\nimport { AssetService } from '../../assets/services/asset.service';\r\n\r\nexport interface ImportProgressState {\r\n  showProgressBox: boolean;\r\n  currentJobId: string | null;\r\n  progressPercentage: number;\r\n  progressMessage: string;\r\n  isCompleted: boolean;\r\n  isImportComplete: boolean;\r\n  importResults: any;\r\n  failedImportsCsvData: string | null;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImportProgressService {\r\n  private destroy$ = new Subject<void>();\r\n  private polling$ = new Subject<void>();\r\n\r\n  // State management\r\n  private _state = new BehaviorSubject<ImportProgressState>({\r\n    showProgressBox: false,\r\n    currentJobId: null,\r\n    progressPercentage: 0,\r\n    progressMessage: 'Starting import...',\r\n    isCompleted: false,\r\n    isImportComplete: false,\r\n    importResults: null,\r\n    failedImportsCsvData: null\r\n  });\r\n\r\n  // Public observable for components to subscribe to\r\n  public state$ = this._state.asObservable();\r\n\r\n  constructor(private assetService: AssetService) {}\r\n\r\n  /**\r\n   * Get current state\r\n   */\r\n  get currentState(): ImportProgressState {\r\n    return this._state.value;\r\n  }\r\n\r\n  /**\r\n   * Start import progress tracking\r\n   */\r\n  startImport(jobId: string, importResults: any): void {\r\n    this.updateState({\r\n      showProgressBox: true,\r\n      currentJobId: jobId,\r\n      progressPercentage: 0,\r\n      progressMessage: `Processing ${importResults.total_assets} assets...`,\r\n      isCompleted: false,\r\n      isImportComplete: false,\r\n      importResults: importResults,\r\n      failedImportsCsvData: null\r\n    });\r\n\r\n    this.startProgressPolling();\r\n  }\r\n\r\n  /**\r\n   * Close the progress box\r\n   */\r\n  closeProgressBox(): void {\r\n    this.updateState({\r\n      showProgressBox: false,\r\n      currentJobId: null,\r\n      progressPercentage: 0,\r\n      progressMessage: 'Starting import...',\r\n      isCompleted: false,\r\n      isImportComplete: false,\r\n      importResults: null,\r\n      failedImportsCsvData: null\r\n    });\r\n\r\n    // Stop polling\r\n    this.polling$.next();\r\n    this.polling$ = new Subject<void>();\r\n  }\r\n\r\n  /**\r\n   * Start polling for import progress\r\n   */\r\n  private startProgressPolling(): void {\r\n    if (!this.currentState.currentJobId) return;\r\n\r\n    interval(2000)\r\n      .pipe(\r\n        takeUntil(this.destroy$),\r\n        takeUntil(this.polling$)\r\n      )\r\n      .subscribe(() => {\r\n        this.checkImportProgress();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Check import progress\r\n   */\r\n  private checkImportProgress(): void {\r\n    if (!this.currentState.currentJobId) return;\r\n\r\n    this.assetService.getImportProgress(this.currentState.currentJobId).subscribe({\r\n      next: (response: any) => {\r\n        // Handle nested response structure with data property\r\n        const data = response.data || response;\r\n\r\n        // Update progress from the actual API response structure\r\n        const rawPercentage = data.progress_percentage;\r\n        const progressPercentage = Math.round(rawPercentage || 0);\r\n\r\n        // Create detailed progress message\r\n        let progressMessage: string;\r\n        if (data.is_processing) {\r\n          const processed = data.processed_assets || 0;\r\n          const total = data.total_assets || 0;\r\n          const successful = data.successful_imports || 0;\r\n          const failed = data.failed_imports || 0;\r\n\r\n          progressMessage = `Processing: ${processed}/${total} assets (${successful} success, ${failed} failed)`;\r\n        } else if (data.is_completed) {\r\n          progressMessage = 'Import completed - generating report...';\r\n        } else {\r\n          progressMessage = data.status || 'Processing...';\r\n        }\r\n\r\n        const isCompleted = data.is_completed || false;\r\n\r\n        this.updateState({\r\n          progressPercentage,\r\n          progressMessage,\r\n          isCompleted,\r\n          importResults: data\r\n        });\r\n\r\n        if (isCompleted) {\r\n          // Stop the polling\r\n          this.polling$.next();\r\n          this.polling$.complete();\r\n          this.handleImportComplete(data);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error checking progress:', error);\r\n        this.updateState({\r\n          progressMessage: 'Error checking progress'\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle import completion\r\n   */\r\n  private handleImportComplete(response: any): void {\r\n    // Create completion summary\r\n    const successful = response.successful_imports || 0;\r\n    const failed = response.failed_imports || 0;\r\n    const total = response.total_assets || 0;\r\n\r\n    const progressMessage = `Import complete! ${successful} successful, ${failed} failed out of ${total} assets`;\r\n\r\n    this.updateState({\r\n      isImportComplete: true,\r\n      progressMessage,\r\n      importResults: response\r\n    });\r\n\r\n    // Generate CSV for failed imports if there are any\r\n    if (failed > 0 && response.errors && response.errors.length > 0) {\r\n      this.generateFailedImportsCSV(response.errors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate CSV for failed imports\r\n   */\r\n  private generateFailedImportsCSV(errors: any[]): void {\r\n    const headers = ['Asset Name', 'Error', 'Details'];\r\n    const csvContent = [\r\n      headers.join(','),\r\n      ...errors.map(error => [\r\n        `\"${(error.name || '').replace(/\"/g, '\"\"')}\"`,\r\n        `\"${(error.error || '').replace(/\"/g, '\"\"')}\"`,\r\n        `\"${(error.details || '').replace(/\"/g, '\"\"')}\"`\r\n      ].join(','))\r\n    ].join('\\n');\r\n\r\n    this.updateState({\r\n      failedImportsCsvData: csvContent\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Download the failed imports CSV\r\n   */\r\n  downloadFailedImportsCSV(): void {\r\n    const csvData = this.currentState.failedImportsCsvData;\r\n    if (csvData) {\r\n      const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      const url = URL.createObjectURL(blob);\r\n      link.href = url;\r\n      link.download = 'failed-imports.csv';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update state\r\n   */\r\n  private updateState(updates: Partial<ImportProgressState>): void {\r\n    this._state.next({\r\n      ...this.currentState,\r\n      ...updates\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleanup on service destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n    this.polling$.next();\r\n    this.polling$.complete();\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
