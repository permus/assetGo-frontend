{
  "version": 3,
  "sources": ["src/app/settings/settings.service.ts", "src/app/core/services/currency.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport type ApiResponse<T> = { success: boolean; message?: string; data?: T };\r\n\r\nexport interface Company {\r\n  id: number;\r\n  name: string;\r\n  owner_id: number | string;\r\n  email?: string | null;\r\n  phone?: string | null;\r\n  address?: string | null;\r\n  industry?: string | null;\r\n  business_type?: string | null;\r\n  currency?: string | null;\r\n  settings?: Record<string, unknown> | null;\r\n  logo_url?: string | null;\r\n}\r\n\r\nexport interface ModuleItem {\r\n  id: number;\r\n  key: string;\r\n  display_name: string;\r\n  description?: string | null;\r\n  icon_name?: string | null;\r\n  route_path?: string | null;\r\n  sort_order: number;\r\n  is_system_module: boolean;\r\n  is_enabled: boolean;\r\n}\r\n\r\nexport interface Preferences {\r\n  language?: string;\r\n  rtl?: boolean;\r\n  date_format?: string;\r\n  time_format?: string;\r\n  number_format?: string;\r\n  timezone?: string;\r\n  // Notification preferences\r\n  email_notifications?: boolean;\r\n  push_notifications?: boolean;\r\n  maintenance_alerts?: boolean;\r\n  work_order_updates?: boolean;\r\n  // Display\r\n  dashboard_layout?: 'grid' | 'list';\r\n  items_per_page?: number;\r\n  auto_refresh?: boolean;\r\n  compact_view?: boolean;\r\n  show_avatars?: boolean;\r\n  // Accessibility\r\n  dark_mode?: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SettingsService {\r\n  private http = inject(HttpClient);\r\n  private base = environment.apiUrl;\r\n  // Stream broadcasting module enablement state\r\n  private modulesEnabled$ = new BehaviorSubject<Record<string, boolean>>({});\r\n\r\n  // Company\r\n  getCompany() {\r\n    return this.http.get<ApiResponse<{ company: Company }>>(`${this.base}/company`);\r\n  }\r\n  updateCompany(payload: Partial<Company>) {\r\n    return this.http.put<ApiResponse<{ company: Company }>>(`${this.base}/company`, payload);\r\n  }\r\n  updateCurrency(currency: string) {\r\n    return this.http.put<ApiResponse<{ company: Company }>>(`${this.base}/settings/currency`, { currency });\r\n  }\r\n  uploadCompanyLogo(file: File) {\r\n    const fd = new FormData();\r\n    fd.append('logo', file);\r\n    return this.http.post<ApiResponse<{ logo_url: string; company: Company }>>(\r\n      `${this.base}/settings/company/logo`, fd\r\n    );\r\n  }\r\n\r\n  // Modules\r\n  listModules() {\r\n    return this.http\r\n      .get<ApiResponse<{ modules: ModuleItem[] }>>(`${this.base}/settings/modules`)\r\n      .pipe(tap(res => this.pushModulesEnabled(res?.data?.modules || [])));\r\n  }\r\n  enableModule(moduleId: number) {\r\n    return this.http\r\n      .post<ApiResponse<{ module_id: number }>>(`${this.base}/settings/modules/${moduleId}/enable`, {})\r\n      .pipe(tap(() => this.refreshModulesEnabled().subscribe()));\r\n  }\r\n  disableModule(moduleId: number) {\r\n    return this.http\r\n      .post<ApiResponse<{ module_id: number }>>(`${this.base}/settings/modules/${moduleId}/disable`, {})\r\n      .pipe(tap(() => this.refreshModulesEnabled().subscribe()));\r\n  }\r\n\r\n  // Preferences\r\n  getPreferences() {\r\n    return this.http.get<ApiResponse<Preferences>>(`${this.base}/settings/preferences`);\r\n  }\r\n  updatePreferences(prefs: Preferences) {\r\n    return this.http.put<ApiResponse<Preferences>>(`${this.base}/settings/preferences`, prefs);\r\n  }\r\n\r\n  // ----- Modules enabled stream helpers -----\r\n  getModulesEnabled$(): Observable<Record<string, boolean>> {\r\n    return this.modulesEnabled$.asObservable();\r\n  }\r\n\r\n  refreshModulesEnabled() {\r\n    return this.listModules();\r\n  }\r\n\r\n  private pushModulesEnabled(list: ModuleItem[]): void {\r\n    const map: Record<string, boolean> = {};\r\n    for (const m of list) map[m.key] = !!m.is_enabled;\r\n    this.modulesEnabled$.next(map);\r\n  }\r\n}\r\n\r\n\r\n", "import { Injectable, inject } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { SettingsService } from '../../settings/settings.service';\r\n\r\nexport type CurrencyCode = 'USD' | 'AED' | string;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CurrencyService {\r\n  private readonly settings = inject(SettingsService);\r\n  private readonly currency$ = new BehaviorSubject<CurrencyCode>('USD');\r\n\r\n  // Load from server and broadcast\r\n  refreshFromServer(): Observable<CurrencyCode> {\r\n    return this.settings.getCompany().pipe(\r\n      map(res => ((res?.data?.company?.currency || 'USD') as CurrencyCode)),\r\n      tap(code => this.currency$.next(code))\r\n    );\r\n  }\r\n\r\n  get$(): Observable<CurrencyCode> {\r\n    return this.currency$.asObservable();\r\n  }\r\n\r\n  getCurrent(): CurrencyCode {\r\n    return this.currency$.getValue();\r\n  }\r\n\r\n  // Helper to format amounts consistently\r\n  format(amount: number | string | null | undefined): string {\r\n    const num = Number(amount ?? 0);\r\n    if (!isFinite(num)) return `${this.getCurrent()} 0.00`;\r\n    return `${this.getCurrent()} ${num.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\r\n  }\r\n}\r\n\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAyDM,IAAO,kBAAP,MAAO,iBAAe;EAClB,OAAO,OAAO,UAAU;EACxB,OAAO,YAAY;;EAEnB,kBAAkB,IAAI,gBAAyC,CAAA,CAAE;;EAGzE,aAAU;AACR,WAAO,KAAK,KAAK,IAAuC,GAAG,KAAK,IAAI,UAAU;EAChF;EACA,cAAc,SAAyB;AACrC,WAAO,KAAK,KAAK,IAAuC,GAAG,KAAK,IAAI,YAAY,OAAO;EACzF;EACA,eAAe,UAAgB;AAC7B,WAAO,KAAK,KAAK,IAAuC,GAAG,KAAK,IAAI,sBAAsB,EAAE,SAAQ,CAAE;EACxG;EACA,kBAAkB,MAAU;AAC1B,UAAM,KAAK,IAAI,SAAQ;AACvB,OAAG,OAAO,QAAQ,IAAI;AACtB,WAAO,KAAK,KAAK,KACf,GAAG,KAAK,IAAI,0BAA0B,EAAE;EAE5C;;EAGA,cAAW;AACT,WAAO,KAAK,KACT,IAA4C,GAAG,KAAK,IAAI,mBAAmB,EAC3E,KAAK,IAAI,SAAO,KAAK,mBAAmB,KAAK,MAAM,WAAW,CAAA,CAAE,CAAC,CAAC;EACvE;EACA,aAAa,UAAgB;AAC3B,WAAO,KAAK,KACT,KAAyC,GAAG,KAAK,IAAI,qBAAqB,QAAQ,WAAW,CAAA,CAAE,EAC/F,KAAK,IAAI,MAAM,KAAK,sBAAqB,EAAG,UAAS,CAAE,CAAC;EAC7D;EACA,cAAc,UAAgB;AAC5B,WAAO,KAAK,KACT,KAAyC,GAAG,KAAK,IAAI,qBAAqB,QAAQ,YAAY,CAAA,CAAE,EAChG,KAAK,IAAI,MAAM,KAAK,sBAAqB,EAAG,UAAS,CAAE,CAAC;EAC7D;;EAGA,iBAAc;AACZ,WAAO,KAAK,KAAK,IAA8B,GAAG,KAAK,IAAI,uBAAuB;EACpF;EACA,kBAAkB,OAAkB;AAClC,WAAO,KAAK,KAAK,IAA8B,GAAG,KAAK,IAAI,yBAAyB,KAAK;EAC3F;;EAGA,qBAAkB;AAChB,WAAO,KAAK,gBAAgB,aAAY;EAC1C;EAEA,wBAAqB;AACnB,WAAO,KAAK,YAAW;EACzB;EAEQ,mBAAmB,MAAkB;AAC3C,UAAMA,OAA+B,CAAA;AACrC,eAAW,KAAK;AAAM,MAAAA,KAAI,EAAE,GAAG,IAAI,CAAC,CAAC,EAAE;AACvC,SAAK,gBAAgB,KAAKA,IAAG;EAC/B;;qCA9DW,kBAAe;EAAA;4EAAf,kBAAe,SAAf,iBAAe,WAAA,YADF,OAAM,CAAA;;;sEACnB,iBAAe,CAAA;UAD3B;WAAW,EAAE,YAAY,OAAM,CAAE;;;;;AChD5B,IAAO,kBAAP,MAAO,iBAAe;EACT,WAAW,OAAO,eAAe;EACjC,YAAY,IAAI,gBAA8B,KAAK;;EAGpE,oBAAiB;AACf,WAAO,KAAK,SAAS,WAAU,EAAG,KAChC,IAAI,SAAS,KAAK,MAAM,SAAS,YAAY,KAAuB,GACpE,IAAI,UAAQ,KAAK,UAAU,KAAK,IAAI,CAAC,CAAC;EAE1C;EAEA,OAAI;AACF,WAAO,KAAK,UAAU,aAAY;EACpC;EAEA,aAAU;AACR,WAAO,KAAK,UAAU,SAAQ;EAChC;;EAGA,OAAO,QAA0C;AAC/C,UAAM,MAAM,OAAO,UAAU,CAAC;AAC9B,QAAI,CAAC,SAAS,GAAG;AAAG,aAAO,GAAG,KAAK,WAAU,CAAE;AAC/C,WAAO,GAAG,KAAK,WAAU,CAAE,IAAI,IAAI,eAAe,QAAW,EAAE,uBAAuB,GAAG,uBAAuB,EAAC,CAAE,CAAC;EACtH;;qCAzBW,kBAAe;EAAA;4EAAf,kBAAe,SAAf,iBAAe,WAAA,YADF,OAAM,CAAA;;;sEACnB,iBAAe,CAAA;UAD3B;WAAW,EAAE,YAAY,OAAM,CAAE;;;",
  "names": ["map"]
}
