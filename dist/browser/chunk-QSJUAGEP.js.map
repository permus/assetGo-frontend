{
  "version": 3,
  "sources": ["src/app/maintenance/components/plan-dialog/plan-dialog.component.ts", "src/app/maintenance/components/plan-dialog/plan-dialog.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, Output, signal, computed, HostListener, OnInit, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MaintenanceService } from '../../maintenance.service';\r\nimport { MaintenancePlan, MaintenancePlanChecklist, FrequencyType, FrequencyUnit, PlanType } from '../../models';\r\nimport { MetaWorkOrdersService } from '../../../core/services/meta-work-orders.service';\r\nimport { MetaItem } from '../../../core/types/work-order.types';\r\nimport { AssetService } from '../../../assets/services/asset.service';\r\n\r\n@Component({\r\n  selector: 'app-plan-dialog',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  styleUrl: 'plan-dialog.scss',\r\n  templateUrl: 'plan-dialog.html',\r\n})\r\nexport class PlanDialogComponent implements OnInit, AfterViewInit, OnChanges {\r\n  @Input() isOpen = false;\r\n  @Input() editMode = false;\r\n  @Input() planToEdit: MaintenancePlan | null = null;\r\n  @Output() closed = new EventEmitter<void>();\r\n  @Output() created = new EventEmitter<any>();\r\n  @Output() updated = new EventEmitter<any>();\r\n\r\n  steps = ['Basic Info', 'Assets', 'Checklist', 'Schedule'];\r\n  step = signal(0);\r\n  loading = false;\r\n  error: string | null = null;\r\n  fieldErrors: { [key: string]: string[] } = {};\r\n  private assetsSearchTimeout: ReturnType<typeof setTimeout> | null = null;\r\n  model: MaintenancePlan & { checklist_items: MaintenancePlanChecklist[] } = {\r\n    name: '',\r\n    priority_id: undefined,\r\n    sort: 0,\r\n    descriptions: '',\r\n    category_id: undefined,\r\n    plan_type: 'preventive' as PlanType,\r\n    estimeted_duration: undefined,\r\n    instractions: '',\r\n    safety_notes: '',\r\n    asset_ids: [],\r\n    frequency_type: 'time' as FrequencyType,\r\n    frequency_value: 30,\r\n    frequency_unit: 'days' as FrequencyUnit,\r\n    is_active: true,\r\n    checklist_items: [],\r\n  };\r\n\r\n  items = signal<MaintenancePlanChecklist[]>([]);\r\n  assetIdsCsv = signal('');\r\n\r\n  // UI state for dropdowns per FRONTEND_RULES\r\n  showPlanTypeDropdown = false;\r\n  showFrequencyTypeDropdown = false;\r\n  showFrequencyUnitDropdown = false;\r\n  openItemTypeDropdownIndex: number | null = null;\r\n\r\n  // Options\r\n  planTypeOptions: Array<{ value: PlanType; name: string }> = [\r\n    { value: 'preventive', name: 'preventive' },\r\n    { value: 'predictive', name: 'predictive' },\r\n    { value: 'condition_based', name: 'Condition Based' },\r\n  ];\r\n  itemTypeOptions: Array<MaintenancePlanChecklist['type']> = [\r\n    'checkbox', 'measurements', 'text_input', 'photo_capture', 'pass_fail'\r\n  ];\r\n  frequencyTypeOptions: Array<{ value: FrequencyType; name: string }> = [\r\n    { value: 'time', name: 'Time Based' },\r\n    { value: 'usage', name: 'Usage Based' },\r\n    { value: 'condition', name: 'Condition Based' },\r\n  ];\r\n  frequencyUnitOptions: Array<FrequencyUnit> = ['days', 'weeks', 'months', 'years'];\r\n\r\n  submitted = false;\r\n\r\n  // Assets tab state\r\n  assets = signal<any[]>([]);\r\n  assetsLoading = false;\r\n  assetsError: string | null = null;\r\n  assetsPage = signal(1);\r\n  readonly assetsPerPage = 12;\r\n  assetsTotal = signal(0);\r\n  searchAssets = signal('');\r\n  assetCategoryOptions: Array<{ id: number; name: string }> = [];\r\n  assetStatusOptions: Array<{ id: number; name: string }> = [];\r\n  selectedAssetCategoryId: number | null = null;\r\n  selectedAssetStatusId: number | null = null;\r\n  selectedAssetIds = signal<Set<number>>(new Set());\r\n  showAssetCategoryDropdown = false;\r\n  showAssetStatusDropdown = false;\r\n  selectedAssetCategory: { id: number; name: string } | null = null;\r\n  selectedAssetStatus: { id: number; name: string } | null = null;\r\n  // Checklist - add new item form state\r\n  newChecklistItem: MaintenancePlanChecklist = {\r\n    title: '',\r\n    type: 'checkbox',\r\n    description: '',\r\n    is_required: false,\r\n    is_safety_critical: false,\r\n    is_photo_required: false,\r\n  };\r\n  showNewItemTypeDropdown = false;\r\n\r\n  constructor(private api: MaintenanceService, private meta: MetaWorkOrdersService, private assetsApi: AssetService) {}\r\n\r\n  go(i: number) {\r\n    this.step.set(i);\r\n    if (i === 1) this.ensureAssetsLoaded();\r\n  }\r\n  onTabClick(i: number) {\r\n    // Allow backward navigation always\r\n    if (i <= this.step()) { this.go(i); return; }\r\n    // Only allow forward one step if current step is valid\r\n    if (i === this.step() + 1 && this.canGoNext()) {\r\n      this.go(i);\r\n    }\r\n  }\r\n  next() {\r\n    if (this.step() < 3) {\r\n      this.step.set(this.step()+1);\r\n      if (this.step() === 1) this.ensureAssetsLoaded();\r\n    }\r\n  }\r\n  prev() { if (this.step()>0) this.step.set(this.step()-1); }\r\n\r\n  onBackdrop(e: MouseEvent) { this.close(); }\r\n  close() { this.closed.emit(); this.reset(); }\r\n\r\n  addItem() {\r\n    const order = this.items().length;\r\n    this.items.set([...this.items(), { title: '', type: 'checkbox', order, is_required: false, is_safety_critical: false, is_photo_required: false }]);\r\n  }\r\n  removeItem(i: number) {\r\n    const list = [...this.items()];\r\n    list.splice(i,1);\r\n    this.items.set(list.map((it, idx) => ({ ...it, order: idx })));\r\n  }\r\n\r\n  setAssetIdsCsv(v: string) {\r\n    this.assetIdsCsv.set(v);\r\n    const ids = v.split(',').map(s => parseInt(s.trim(), 10)).filter(n => !isNaN(n));\r\n    this.model.asset_ids = ids;\r\n  }\r\n\r\n  // Priority dropdown state/data pulled from Work Orders meta service\r\n  priorityOptions: MetaItem[] = [];\r\n  selectedPriorityMeta: MetaItem | null = null;\r\n  showPriorityDropdown = false;\r\n\r\n  ngOnInitHookLoaded = false;\r\n  ngOnInitOnce() {\r\n    if (this.ngOnInitHookLoaded) return;\r\n    this.ngOnInitHookLoaded = true;\r\n    this.meta.clearPrioritiesCache();\r\n    this.meta.getPriorities().subscribe({\r\n      next: (priorities) => {\r\n        this.priorityOptions = priorities;\r\n        const def = priorities.find(p => p.slug === 'medium') || priorities[0] || null;\r\n        if (def) {\r\n          this.selectPriority(def);\r\n        }\r\n      },\r\n      error: () => {\r\n        this.priorityOptions = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  // Ensure meta loaded when dialog opens (component constructed earlier)\r\n  ngAfterViewInit() { this.ngOnInitOnce(); }\r\n\r\n  loadPlanForEditing() {\r\n    if (!this.planToEdit?.id) return;\r\n\r\n    // Call the API to get complete plan data\r\n    this.loading = true;\r\n    this.api.getPlan(this.planToEdit.id).subscribe({\r\n      next: (response) => {\r\n        const planData = response?.data?.plan || response;\r\n\r\n        // Load the complete plan data into the model\r\n        this.model = {\r\n          ...planData,\r\n          checklist_items: []\r\n        };\r\n\r\n        // Load checklist items\r\n        if (planData.checklists && planData.checklists.length > 0) {\r\n          this.items.set([...planData.checklists]);\r\n        }\r\n\r\n        // Load asset IDs\r\n        if (planData.asset_ids && planData.asset_ids.length > 0) {\r\n          this.selectedAssetIds.set(new Set(planData.asset_ids));\r\n          this.assetIdsCsv.set(planData.asset_ids.join(', '));\r\n        }\r\n\r\n        // Load priority if available\r\n        if (planData?.priority_id) {\r\n          // Find the priority in the options and set it\r\n          const priority = this.priorityOptions.find(p => p.id === planData.priority_id);\r\n          if (priority) {\r\n            this.selectedPriorityMeta = priority;\r\n          }\r\n        }\r\n\r\n        this.loading = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to load plan data:', error);\r\n        this.loading = false;\r\n\r\n        // Fallback to basic data if API fails\r\n        this.loadBasicPlanData();\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadBasicPlanData() {\r\n    if (!this.planToEdit) return;\r\n\r\n    // Load the basic plan data into the model\r\n    this.model = {\r\n      ...this.planToEdit,\r\n      checklist_items: []\r\n    };\r\n\r\n    // Load checklist items\r\n    if (this.planToEdit.checklists && this.planToEdit.checklists.length > 0) {\r\n      this.items.set([...this.planToEdit.checklists]);\r\n    }\r\n\r\n    // Load asset IDs\r\n    if (this.planToEdit.asset_ids && this.planToEdit.asset_ids.length > 0) {\r\n      this.selectedAssetIds.set(new Set(this.planToEdit.asset_ids));\r\n      this.assetIdsCsv.set(this.planToEdit.asset_ids.join(', '));\r\n    }\r\n\r\n    // Load priority if available\r\n    if (this.planToEdit?.priority_id) {\r\n      // Find the priority in the options and set it\r\n      const priority = this.priorityOptions.find(p => p.id === this.planToEdit!.priority_id);\r\n      if (priority) {\r\n        this.selectedPriorityMeta = priority;\r\n      }\r\n    }\r\n  }\r\n  ngOnInit() {\r\n    this.ngOnInitOnce();\r\n\r\n    // If editing, load the plan data\r\n    if (this.editMode && this.planToEdit?.id) {\r\n      // Small delay to ensure component is fully initialized\r\n      setTimeout(() => {\r\n        this.loadPlanForEditing();\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Handle changes to editMode or planToEdit inputs\r\n    if (changes['editMode'] || changes['planToEdit']) {\r\n      if (this.editMode && this.planToEdit?.id && this.isOpen) {\r\n        // Small delay to ensure component is fully initialized\r\n        setTimeout(() => {\r\n          this.loadPlanForEditing();\r\n        }, 100);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Validation helpers (Rule 2)\r\n  hasFieldError(controlName: string): boolean {\r\n    if (!this.submitted) return false;\r\n\r\n    // Check for backend validation errors first\r\n    if (this.fieldErrors[controlName] && this.fieldErrors[controlName].length > 0) {\r\n      return true;\r\n    }\r\n\r\n    // Check for frontend validation errors\r\n    switch (controlName) {\r\n      case 'name':\r\n        return !this.model.name || this.model.name.trim().length === 0;\r\n      case 'frequency_value':\r\n        if (this.model.frequency_type !== 'time') return false;\r\n        return !this.model.frequency_value || this.model.frequency_value < 1 as any;\r\n      case 'frequency_unit':\r\n        if (this.model.frequency_type !== 'time') return false;\r\n        return !this.model.frequency_unit;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  getFieldError(controlName: string): string {\r\n    // Return backend validation error if available\r\n    if (this.fieldErrors[controlName] && this.fieldErrors[controlName].length > 0) {\r\n      return this.fieldErrors[controlName][0];\r\n    }\r\n\r\n    // Return frontend validation error\r\n    switch (controlName) {\r\n      case 'name':\r\n        return 'This field is required.';\r\n      case 'frequency_value':\r\n        return 'Minimum value is 1.';\r\n      case 'frequency_unit':\r\n        return 'This field is required.';\r\n      default:\r\n        return 'Invalid value.';\r\n    }\r\n  }\r\n\r\n  // Clear field errors when user starts typing\r\n  clearFieldError(fieldName: string) {\r\n    if (this.fieldErrors[fieldName]) {\r\n      delete this.fieldErrors[fieldName];\r\n    }\r\n  }\r\n\r\n  // Dropdown helpers (Rule 1)\r\n  togglePlanTypeDropdown() { this.showPlanTypeDropdown = !this.showPlanTypeDropdown; }\r\n  selectPlanType(value: PlanType) {\r\n    this.model.plan_type = value;\r\n    this.showPlanTypeDropdown = false;\r\n  }\r\n  getPlanTypeName(val: PlanType | null | undefined): string {\r\n    if (!val) return '';\r\n    return val\r\n      .toLowerCase()\r\n      .replace(/_/g, ' ')\r\n      .replace(/\\b\\w/g, c => c.toUpperCase());\r\n\r\n  }\r\n\r\n  toggleNewItemTypeDropdown() { this.showNewItemTypeDropdown = !this.showNewItemTypeDropdown; }\r\n  selectNewItemType(t: MaintenancePlanChecklist['type']) { this.newChecklistItem.type = t; this.showNewItemTypeDropdown = false; }\r\n\r\n  toggleFrequencyTypeDropdown() { this.showFrequencyTypeDropdown = !this.showFrequencyTypeDropdown; }\r\n  selectFrequencyType(value: FrequencyType) {\r\n    this.model.frequency_type = value;\r\n    this.showFrequencyTypeDropdown = false;\r\n    if (value !== 'time') {\r\n      this.model.frequency_unit = null as any;\r\n      this.model.frequency_value = undefined as any;\r\n    }\r\n  }\r\n  getFrequencyTypeLabel(val: FrequencyType | null | undefined): string {\r\n    const found = this.frequencyTypeOptions.find(o => o.value === val);\r\n    return found?.name || '';\r\n  }\r\n\r\n  toggleFrequencyUnitDropdown() { this.showFrequencyUnitDropdown = !this.showFrequencyUnitDropdown; }\r\n  selectFrequencyUnit(u: FrequencyUnit) {\r\n    this.model.frequency_unit = u;\r\n    this.showFrequencyUnitDropdown = false;\r\n  }\r\n\r\n  togglePriorityDropdown() { this.showPriorityDropdown = !this.showPriorityDropdown; }\r\n  selectPriority(priority: MetaItem) {\r\n    this.selectedPriorityMeta = priority;\r\n    this.model.priority_id = priority.id as any;\r\n    this.showPriorityDropdown = false;\r\n  }\r\n\r\n  // Priority helpers (descriptions/colors consistent with Work Orders)\r\n  getPriorityDescription(priority: MetaItem): string {\r\n    if (!priority) return '';\r\n    switch (priority.slug) {\r\n      case 'low': return 'Low priority - can be addressed when convenient';\r\n      case 'medium': return 'Medium priority - should be addressed soon';\r\n      case 'high': return 'High priority - needs immediate attention';\r\n      case 'critical': return 'Critical priority - urgent, requires immediate action';\r\n      case 'ppm': return 'Preventive maintenance - scheduled maintenance task';\r\n      default: return priority.name || priority.slug;\r\n    }\r\n  }\r\n\r\n  // ===== Assets Tab Logic =====\r\n  private ensureAssetsLoaded() {\r\n    if (this.assetCategoryOptions.length === 0) {\r\n      this.assetsApi.getAssetCategories().subscribe({\r\n        next: (res) => {\r\n          const data = (res?.data as any[]) || res || [];\r\n          this.assetCategoryOptions = Array.isArray(data) ? data : [];\r\n        },\r\n        error: () => { this.assetCategoryOptions = []; }\r\n      });\r\n    }\r\n    if (this.assetStatusOptions.length === 0) {\r\n      this.assetsApi.getAssetStatuses().subscribe({\r\n        next: (res) => {\r\n          const data = (res?.data as any[]) || res || [];\r\n          this.assetStatusOptions = Array.isArray(data) ? data : [];\r\n        },\r\n        error: () => { this.assetStatusOptions = []; }\r\n      });\r\n    }\r\n    this.loadAssets();\r\n  }\r\n\r\n  loadAssets() {\r\n    this.assetsLoading = true;\r\n    this.assetsError = null;\r\n    const params: any = {\r\n      page: this.assetsPage(),\r\n      per_page: this.assetsPerPage,\r\n      search: this.searchAssets(),\r\n      category_id: this.selectedAssetCategoryId || undefined,\r\n      status_id: this.selectedAssetStatusId || undefined,\r\n    };\r\n    this.assetsApi.getAssets(params).subscribe({\r\n      next: (res) => {\r\n        const list = res?.data?.assets || res?.data?.data || res?.data || res?.items || [];\r\n        const total = res?.data?.total ?? res?.total ?? (Array.isArray(list) ? list.length : 0);\r\n        this.assets.set(Array.isArray(list) ? list : []);\r\n        this.assetsTotal.set(Number(total) || 0);\r\n        if (this.model.asset_ids?.length) {\r\n          this.selectedAssetIds.set(new Set(this.model.asset_ids as any));\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.assetsError = err?.error?.message || 'Failed to load assets';\r\n        this.assets.set([]);\r\n        this.assetsTotal.set(0);\r\n      },\r\n      complete: () => { this.assetsLoading = false; }\r\n    });\r\n  }\r\n\r\n  totalAssetPages(): number {\r\n    const t = this.assetsTotal();\r\n    return t > 0 ? Math.ceil(t / this.assetsPerPage) : 1;\r\n  }\r\n\r\n  nextAssetsPage() { if (this.assetsPage() < this.totalAssetPages()) { this.assetsPage.set(this.assetsPage()+1); this.loadAssets(); } }\r\n  prevAssetsPage() { if (this.assetsPage() > 1) { this.assetsPage.set(this.assetsPage()-1); this.loadAssets(); } }\r\n\r\n  onAssetsSearchChange(v: string): void {\r\n    if (this.assetsSearchTimeout) {\r\n      clearTimeout(this.assetsSearchTimeout);\r\n    }\r\n\r\n    this.assetsSearchTimeout = setTimeout(() => {\r\n      this.searchAssets.set(v);\r\n      this.assetsPage.set(1);\r\n      this.loadAssets();\r\n    }, 500);\r\n  }\r\n  onAssetsCategoryChange(id: string) { this.selectedAssetCategoryId = id ? Number(id) : null; this.assetsPage.set(1); this.loadAssets(); }\r\n  onAssetsStatusChange(id: string) { this.selectedAssetStatusId = id ? Number(id) : null; this.assetsPage.set(1); this.loadAssets(); }\r\n\r\n  toggleAssetCategoryDropdown() {\r\n    this.showAssetCategoryDropdown = !this.showAssetCategoryDropdown;\r\n    this.showAssetStatusDropdown = false;\r\n  }\r\n  toggleAssetStatusDropdown() {\r\n    this.showAssetStatusDropdown = !this.showAssetStatusDropdown;\r\n    this.showAssetCategoryDropdown = false;\r\n  }\r\n  selectAssetCategoryFilter(cat: { id: number; name: string } | null) {\r\n    this.selectedAssetCategory = cat;\r\n    this.selectedAssetCategoryId = cat?.id ?? null;\r\n    this.showAssetCategoryDropdown = false;\r\n    this.assetsPage.set(1);\r\n    this.loadAssets();\r\n  }\r\n  selectAssetStatusFilter(st: { id: number; name: string } | null) {\r\n    this.selectedAssetStatus = st;\r\n    this.selectedAssetStatusId = st?.id ?? null;\r\n    this.showAssetStatusDropdown = false;\r\n    this.assetsPage.set(1);\r\n    this.loadAssets();\r\n  }\r\n\r\n  isAssetSelected(id: number): boolean { return this.selectedAssetIds().has(id); }\r\n  toggleAssetSelection(id: number) {\r\n    const set = new Set(this.selectedAssetIds());\r\n    if (set.has(id)) set.delete(id); else set.add(id);\r\n    this.selectedAssetIds.set(set);\r\n    this.model.asset_ids = Array.from(set) as any;\r\n  }\r\n  selectAllOnPage() {\r\n    const set = new Set(this.selectedAssetIds());\r\n    for (const a of this.assets()) { if (a?.id != null) set.add(Number(a.id)); }\r\n    this.selectedAssetIds.set(set);\r\n    this.model.asset_ids = Array.from(set) as any;\r\n  }\r\n  clearAllSelection() {\r\n    this.selectedAssetIds.set(new Set());\r\n    this.model.asset_ids = [] as any;\r\n  }\r\n  // Add checklist item from the form\r\n  addItemFromForm() {\r\n    const nextOrder = this.items().length;\r\n    const toAdd: MaintenancePlanChecklist = {\r\n      title: (this.newChecklistItem.title || '').trim(),\r\n      type: this.newChecklistItem.type,\r\n      description: (this.newChecklistItem.description || '').trim(),\r\n      is_required: !!this.newChecklistItem.is_required,\r\n      is_safety_critical: !!this.newChecklistItem.is_safety_critical,\r\n      is_photo_required: !!this.newChecklistItem.is_photo_required,\r\n      order: nextOrder,\r\n    };\r\n    if (!toAdd.title) return;\r\n    this.items.set([...this.items(), toAdd]);\r\n    this.newChecklistItem = { title: '', type: 'checkbox', description: '', is_required: false, is_safety_critical: false, is_photo_required: false };\r\n  }\r\n\r\n  @HostListener('document:click')\r\n  closeAllDropdowns() {\r\n    this.showPlanTypeDropdown = false;\r\n    this.showFrequencyTypeDropdown = false;\r\n    this.showFrequencyUnitDropdown = false;\r\n    this.openItemTypeDropdownIndex = null;\r\n    this.showPriorityDropdown = false;\r\n  }\r\n\r\n  canSubmit() {\r\n    const hasChecklist = this.items().length > 0;\r\n    const hasName = !!this.model.name && this.model.name.trim().length > 0;\r\n    if (this.model.frequency_type === 'time') {\r\n      return hasChecklist && hasName && !!this.model.frequency_value && !!this.model.frequency_unit;\r\n    }\r\n    return hasChecklist && hasName;\r\n  }\r\n\r\n  // Step-level validation for enabling Next\r\n  canGoNext(): boolean {\r\n    switch (this.step()) {\r\n      case 0: {\r\n        const hasName = !!this.model.name && this.model.name.trim().length > 0;\r\n        const hasPlanType = !!this.model.plan_type;\r\n        // priority is optional for next, but if options loaded and selected, keep\r\n        return hasName && hasPlanType;\r\n      }\r\n      case 1: {\r\n        // Assets step: no hard requirements\r\n        return true;\r\n      }\r\n      case 2: {\r\n        // Checklist step: at least one item\r\n        return this.items().length > 0;\r\n      }\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this.submitted = true;\r\n    if (!this.canSubmit()) return;\r\n    this.loading = true;\r\n    this.error = null;\r\n    this.fieldErrors = {}; // Clear previous field errors\r\n\r\n    const payload = { ...this.model, checklist_items: this.items().map((it, idx) => ({ ...it, order: it.order ?? idx })) };\r\n\r\n    if (this.editMode && this.planToEdit?.id) {\r\n      // Update existing plan\r\n      this.api.updatePlan(this.planToEdit.id, payload).subscribe({\r\n        next: (res) => {\r\n          this.loading = false;\r\n          this.updated.emit(res);\r\n          this.close();\r\n        },\r\n        error: (err) => {\r\n          this.loading = false;\r\n\r\n          // Handle backend validation errors\r\n          if (err?.error?.errors && typeof err.error.errors === 'object') {\r\n            this.fieldErrors = err.error.errors;\r\n            // Set general error message if available\r\n            this.error = err?.error?.message || 'Please fix the validation errors below.';\r\n          } else {\r\n            // Handle other types of errors\r\n            const msg = err?.error?.message || 'Failed to update plan';\r\n            this.error = msg;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // Create new plan\r\n      this.api.createPlan(payload).subscribe({\r\n        next: (res) => {\r\n          this.loading = false;\r\n          this.created.emit(res);\r\n          this.close();\r\n        },\r\n        error: (err) => {\r\n          this.loading = false;\r\n\r\n          // Handle backend validation errors\r\n          if (err?.error?.errors && typeof err.error.errors === 'object') {\r\n            this.fieldErrors = err.error.errors;\r\n            // Set general error message if available\r\n            this.error = err?.error?.message || 'Please fix the validation errors below.';\r\n          } else {\r\n            // Handle other types of errors\r\n            const msg = err?.error?.message || 'Failed to create plan';\r\n            this.error = msg;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private reset() {\r\n    this.step.set(0);\r\n\r\n    if (this.editMode && this.planToEdit?.id) {\r\n      // Reset to edit mode with plan data from API\r\n      this.loadPlanForEditing();\r\n    } else {\r\n      // Reset to create mode with default values\r\n      this.model = {\r\n        name: '', priority_id: undefined, sort: 0, descriptions: '', category_id: undefined,\r\n        plan_type: 'preventive', estimeted_duration: undefined, instractions: '', safety_notes: '',\r\n        asset_ids: [], frequency_type: 'time', frequency_value: 30, frequency_unit: 'days', is_active: true, checklist_items: []\r\n      } as any;\r\n      this.items.set([]);\r\n      this.assetIdsCsv.set('');\r\n      this.selectedAssetIds.set(new Set());\r\n    }\r\n\r\n    this.error = null;\r\n    this.fieldErrors = {};\r\n    this.loading = false;\r\n    this.submitted = false;\r\n    this.closeAllDropdowns();\r\n  }\r\n}\r\n\r\n\r\n", "<div *ngIf=\"isOpen\" class=\"fixed inset-0 z-50 modal-overlay\" (click)=\"onBackdrop($event)\">\r\n  <div class=\"absolute inset-0 bg-black/30\"></div>\r\n  <div class=\"absolute inset-0 flex items-start justify-center overflow-auto py-8 px-4\">\r\n    <div class=\"modal bg-white rounded-2xl shadow-xl w-full max-w-5xl\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h2 class=\"text-xl  font-semibold\">{{ editMode ? 'Edit Maintenance Plan' : 'Create Maintenance Plan' }}</h2>\r\n        <p\r\n          class=\"text-sm text-gray-500\">{{ editMode ? 'Update your existing maintenance plan' : 'Create a new preventive maintenance plan with tasks and scheduling' }}</p>\r\n\r\n        <div class=\"mt-3 grid grid-cols-4 w-full gap-2 bg-white p-3 rounded-lg\">\r\n          <button *ngFor=\"let s of steps; index as i\" class=\"tab-btn p-2 rounded-lg\" [class.bg-blue-600]=\"i === step()\"\r\n                  [class.text-white]=\"i===step()\" [class.disabled]=\"i>step()\" (click)=\"onTabClick(i)\">{{ s }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"p-6 space-y-4 modal-body\">\r\n        <!-- Loading State for Edit Mode -->\r\n        <div *ngIf=\"editMode && loading\" class=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\r\n          <div class=\"flex items-center\">\r\n            <svg class=\"animate-spin w-5 h-5 text-blue-400 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n              <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n              <path class=\"opacity-75\" fill=\"currentColor\"\r\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n            </svg>\r\n            <span class=\"text-blue-800 font-medium\">Loading plan data...</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- General Error Display -->\r\n        <div *ngIf=\"error\" class=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\r\n          <div class=\"flex items-center\">\r\n            <svg class=\"w-5 h-5 text-red-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n            </svg>\r\n            <span class=\"text-red-800 font-medium\">{{ error }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container [ngSwitch]=\"step()\">\r\n          <ng-container *ngSwitchCase=\"0\">\r\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('name')\">\r\n                  <label>Name <span class=\"required\">*</span></label>\r\n                  <input\r\n                    type=\"text\"\r\n                    [(ngModel)]=\"model.name\"\r\n                    placeholder=\"Plan name\"\r\n                    [class.error-input]=\"hasFieldError('name')\"\r\n                    [disabled]=\"editMode && loading\"\r\n                    (input)=\"clearFieldError('name')\"/>\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('name')\">\r\n                    {{ getFieldError('name') }}\r\n                  </div>\r\n                  <div class=\"field-hint text-xs text-gray-500 mt-1\">\r\n                    Plan names must be unique within your company.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\">\r\n                  <label>Priority</label>\r\n                  <div class=\"relative priority-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                    <button type=\"button\" (click)=\"togglePriorityDropdown()\" class=\"dropdown-button\"\r\n                            [class.active]=\"showPriorityDropdown\" [disabled]=\"editMode && loading\">\r\n                      <div class=\"dropdown-content\">\r\n                        <span *ngIf=\"!selectedPriorityMeta\" class=\"placeholder\">Select priority</span>\r\n                        <div *ngIf=\"selectedPriorityMeta\" class=\"selected-item\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <span\r\n                            class=\"selected-text\">{{ selectedPriorityMeta?.name || selectedPriorityMeta?.slug }}</span>\r\n                        </div>\r\n                        <svg class=\"dropdown-arrow\" [class.rotated]=\"showPriorityDropdown\" fill=\"none\"\r\n                             stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                d=\"M19 9l-7 7-7-7\"></path>\r\n                        </svg>\r\n                      </div>\r\n                    </button>\r\n                    <div *ngIf=\"showPriorityDropdown\" class=\"dropdown-menu\">\r\n                      <div class=\"dropdown-header\">Select priority</div>\r\n                      <button *ngFor=\"let priority of priorityOptions\" type=\"button\" (click)=\"selectPriority(priority)\"\r\n                              class=\"dropdown-item\" [class.selected]=\"selectedPriorityMeta?.id === priority.id\">\r\n                        <div class=\"item-content\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <div class=\"item-details\">\r\n                            <div class=\"item-name\">{{ priority.name || priority.slug }}</div>\r\n                            <div class=\"item-description !text-xs\">{{ getPriorityDescription(priority) }}</div>\r\n                          </div>\r\n                        </div>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\">\r\n                  <label>Plan Type</label>\r\n                  <div class=\"relative plan-type-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                    <button type=\"button\" (click)=\"togglePlanTypeDropdown()\" class=\"dropdown-button\"\r\n                            [class.active]=\"showPlanTypeDropdown\" [disabled]=\"editMode && loading\">\r\n                      <div class=\"dropdown-content\">\r\n                        <span *ngIf=\"!model.plan_type\" class=\"placeholder\">Select plan type</span>\r\n                        <div *ngIf=\"model.plan_type\" class=\"selected-item\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <span class=\"selected-text\">{{ getPlanTypeName(model.plan_type) }}</span>\r\n                        </div>\r\n                        <svg class=\"dropdown-arrow\" [class.rotated]=\"showPlanTypeDropdown\" fill=\"none\"\r\n                             stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                d=\"M19 9l-7 7-7-7\"></path>\r\n                        </svg>\r\n                      </div>\r\n                    </button>\r\n                    <div *ngIf=\"showPlanTypeDropdown\" class=\"dropdown-menu\">\r\n                      <div class=\"dropdown-header\">Select plan type</div>\r\n                      <button *ngFor=\"let opt of planTypeOptions\" type=\"button\" (click)=\"selectPlanType(opt.value)\"\r\n                              class=\"dropdown-item\" [class.selected]=\"model.plan_type === opt.value\">\r\n                        <div class=\"item-content\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <div class=\"item-details\">\r\n                            <div class=\"item-name\">{{ opt.name }}</div>\r\n                          </div>\r\n                        </div>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\">\r\n                  <label>Estimated Duration (hours)</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    [(ngModel)]=\"model.estimeted_duration\"\r\n                    placeholder=\"0\"\r\n                    min=\"0\"\r\n                    [disabled]=\"editMode && loading\"/>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row full-width md:col-span-2\">\r\n                <div class=\"form-group\">\r\n                  <label>Descriptions</label>\r\n                  <textarea\r\n                    [(ngModel)]=\"model.descriptions\"\r\n                    placeholder=\"Enter work order description\"\r\n                    [disabled]=\"editMode && loading\"></textarea>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row full-width md:col-span-2\">\r\n                <div class=\"form-group\">\r\n                  <label>Instructions</label>\r\n                  <textarea\r\n                    [(ngModel)]=\"model.instractions\"\r\n                    placeholder=\"Enter instructions\"\r\n                    [disabled]=\"editMode && loading\"></textarea>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row full-width md:col-span-2\">\r\n                <div class=\"form-group\">\r\n                  <label>Safety Notes</label>\r\n                  <textarea\r\n                    [(ngModel)]=\"model.safety_notes\"\r\n                    placeholder=\"Enter safety notes\"\r\n                    [disabled]=\"editMode && loading\"></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <ng-container *ngSwitchCase=\"1\">\r\n            <div class=\"assets-section light\">\r\n              <h3 class=\"section-title\">Assign Assets</h3>\r\n              <p class=\"section-subtitle\">Select which assets this maintenance plan should apply to. You can always\r\n                modify this later.</p>\r\n\r\n              <div class=\"filters-row\">\r\n                <div class=\"search-box\">\r\n                  <input type=\"text\" [ngModel]=\"searchAssets()\" (ngModelChange)=\"onAssetsSearchChange($event)\"\r\n                         placeholder=\"Search assets...\"/>\r\n                </div>\r\n\r\n                <div class=\"relative category-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                  <button type=\"button\" (click)=\"toggleAssetCategoryDropdown()\" class=\"dropdown-button\"\r\n                          [class.active]=\"showAssetCategoryDropdown\">\r\n                    <div class=\"dropdown-content\">\r\n                      <span *ngIf=\"!selectedAssetCategory\" class=\"placeholder\">All Categories</span>\r\n                      <div *ngIf=\"selectedAssetCategory\" class=\"selected-item\">\r\n                        <div class=\"item-icon\">\r\n                          <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                  d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"></path>\r\n                          </svg>\r\n                        </div>\r\n                        <span class=\"selected-text\">{{ selectedAssetCategory?.name }}</span>\r\n                      </div>\r\n                      <svg class=\"dropdown-arrow\" [class.rotated]=\"showAssetCategoryDropdown\" fill=\"none\"\r\n                           stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n                      </svg>\r\n                    </div>\r\n                  </button>\r\n                  <div *ngIf=\"showAssetCategoryDropdown\" class=\"dropdown-menu\">\r\n                    <div class=\"dropdown-header\">All Categories</div>\r\n                    <button type=\"button\" class=\"dropdown-item\" (click)=\"selectAssetCategoryFilter(null)\">\r\n                      <div class=\"item-content\">\r\n                        <div class=\"item-details\">\r\n                          <div class=\"item-name\">All</div>\r\n                        </div>\r\n                      </div>\r\n                    </button>\r\n                    <button *ngFor=\"let c of assetCategoryOptions\" type=\"button\" (click)=\"selectAssetCategoryFilter(c)\"\r\n                            class=\"dropdown-item\" [class.selected]=\"selectedAssetCategory?.id===c.id\">\r\n                      <div class=\"item-content\">\r\n                        <div class=\"item-details\">\r\n                          <div class=\"item-name\">{{ c.name }}</div>\r\n                        </div>\r\n                      </div>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"relative status-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                  <button type=\"button\" (click)=\"toggleAssetStatusDropdown()\" class=\"dropdown-button\"\r\n                          [class.active]=\"showAssetStatusDropdown\">\r\n                    <div class=\"dropdown-content\">\r\n                      <span *ngIf=\"!selectedAssetStatus\" class=\"placeholder\">All Status</span>\r\n                      <div *ngIf=\"selectedAssetStatus\" class=\"selected-item\">\r\n                        <div class=\"item-icon\">\r\n                          <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                  d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                          </svg>\r\n                        </div>\r\n                        <span class=\"selected-text\">{{ selectedAssetStatus?.name }}</span>\r\n                      </div>\r\n                      <svg class=\"dropdown-arrow\" [class.rotated]=\"showAssetStatusDropdown\" fill=\"none\"\r\n                           stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n                      </svg>\r\n                    </div>\r\n                  </button>\r\n                  <div *ngIf=\"showAssetStatusDropdown\" class=\"dropdown-menu\">\r\n                    <div class=\"dropdown-header\">All Status</div>\r\n                    <button type=\"button\" class=\"dropdown-item\" (click)=\"selectAssetStatusFilter(null)\">\r\n                      <div class=\"item-content\">\r\n                        <div class=\"item-details\">\r\n                          <div class=\"item-name\">All</div>\r\n                        </div>\r\n                      </div>\r\n                    </button>\r\n                    <button *ngFor=\"let s of assetStatusOptions\" type=\"button\" (click)=\"selectAssetStatusFilter(s)\"\r\n                            class=\"dropdown-item\" [class.selected]=\"selectedAssetStatus?.id===s.id\">\r\n                      <div class=\"item-content\">\r\n                        <div class=\"item-details\">\r\n                          <div class=\"item-name\">{{ s.name }}</div>\r\n                        </div>\r\n                      </div>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"bulk-actions\">\r\n                <button class=\"btn btn-secondary\" (click)=\"selectAllOnPage()\" [disabled]=\"assetsLoading\">Select All\r\n                </button>\r\n                <button class=\"btn btn-secondary\" (click)=\"clearAllSelection()\" [disabled]=\"assetsLoading\">Clear All\r\n                </button>\r\n                <div class=\"count\">{{ selectedAssetIds().size }} selected</div>\r\n              </div>\r\n\r\n              <div class=\"assets-grid\" [class.loading]=\"assetsLoading\">\r\n                <div class=\"asset-card flex-col\" *ngFor=\"let a of assets()\"\r\n                     [class.!border-blue-200]=\"isAssetSelected(a.id)\">\r\n                  <div class=\"flex justify-between w-full\">\r\n                    <label class=\"asset-select\">\r\n                      <input type=\"checkbox\" class=\"rounded-full\" [checked]=\"isAssetSelected(a.id)\"\r\n                             (change)=\"toggleAssetSelection(a.id)\"/>\r\n                      <span class=\"checkmark\"></span>\r\n                    </label>\r\n\r\n                    <div class=\"border border-gray-200  px-2 py-1 rounded-full bg-gray-100 text-xs font-medium\">\r\n                      No Schedule\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"asset-body\">\r\n                    <div class=\"asset-name\">{{ a.name || a.asset_name }}</div>\r\n                    <div class=\"asset-meta\">\r\n                      <div class=\"meta-line flex gap-2 items-center w-full\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\"\r\n                             stroke=\"currentColor\" class=\"size-3\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                                d=\"M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z\"/>\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 6h.008v.008H6V6Z\"/>\r\n                        </svg>\r\n\r\n                        {{ a.asset_id || a.serial_number || a.id }}\r\n                      </div>\r\n\r\n                      <div class=\"meta-line flex gap-2 items-center\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\"\r\n                             stroke=\"currentColor\" class=\"size-4\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                                d=\"M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\"/>\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                                d=\"M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z\"/>\r\n                        </svg>\r\n\r\n                        {{ a.location?.name || a.department?.name || a.brand || 'N/A' }}\r\n                      </div>\r\n\r\n                      <div class=\"meta-line flex gap-2 items-center\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\"\r\n                             stroke=\"currentColor\" class=\"size-4\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                                d=\"M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9\"/>\r\n                        </svg>\r\n\r\n\r\n                        {{ a.manufacturer?.name || a.department?.manufacturer || 'N/A' }}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"pagination-row\">\r\n                <button class=\"btn btn-secondary\" (click)=\"prevAssetsPage()\"\r\n                        [disabled]=\"assetsPage()===1 || assetsLoading\">Prev\r\n                </button>\r\n                <span class=\"page-indicator\">Page {{ assetsPage() }} / {{ totalAssetPages() }}</span>\r\n                <button class=\"btn btn-secondary\" (click)=\"nextAssetsPage()\"\r\n                        [disabled]=\"assetsPage()===totalAssetPages() || assetsLoading\">Next\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <ng-container *ngSwitchCase=\"2\">\r\n            <div class=\"checklist-section\">\r\n              <h3 class=\"section-title\">Checklist Items ({{ items().length }})</h3>\r\n\r\n              <div class=\"add-item-card\">\r\n                <div class=\"header-row\">\r\n                  <div class=\"title\">Add New Item</div>\r\n                  <div class=\"count\">{{ items().length }}</div>\r\n                </div>\r\n\r\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n                  <div class=\"form-group\"><label>Title</label>\r\n                    <input type=\"text\" [(ngModel)]=\"newChecklistItem.title\" placeholder=\"Item title\"/>\r\n                  </div>\r\n                  <div class=\"form-group\"><label>Type</label>\r\n                    <div class=\"relative item-type-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                      <button type=\"button\" (click)=\"toggleNewItemTypeDropdown()\" class=\"dropdown-button\"\r\n                              [class.active]=\"showNewItemTypeDropdown\">\r\n                        <div class=\"dropdown-content\">\r\n                          <span *ngIf=\"!newChecklistItem.type\" class=\"placeholder\">Select type</span>\r\n                          <div *ngIf=\"newChecklistItem.type\" class=\"selected-item\">\r\n                            <div class=\"item-icon\">\r\n                              <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                      d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                              </svg>\r\n                            </div>\r\n                            <span class=\"selected-text\">{{ newChecklistItem.type }}</span>\r\n                          </div>\r\n                          <svg class=\"dropdown-arrow\" [class.rotated]=\"showNewItemTypeDropdown\" fill=\"none\"\r\n                               stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                  d=\"M19 9l-7 7-7-7\"></path>\r\n                          </svg>\r\n                        </div>\r\n                      </button>\r\n                      <div *ngIf=\"showNewItemTypeDropdown\" class=\"dropdown-menu\">\r\n                        <div class=\"dropdown-header\">Select type</div>\r\n                        <button *ngFor=\"let t of itemTypeOptions\" type=\"button\" (click)=\"selectNewItemType(t)\"\r\n                                class=\"dropdown-item\" [class.selected]=\"newChecklistItem.type===t\">\r\n                          <div class=\"item-content\">\r\n                            <div class=\"item-details\">\r\n                              <div class=\"item-name\">{{ t }}</div>\r\n                            </div>\r\n                          </div>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"form-group\"><label>Description</label>\r\n                  <textarea [(ngModel)]=\"newChecklistItem.description\"\r\n                            placeholder=\"Detailed instructions for this item\"></textarea>\r\n                </div>\r\n\r\n                <div class=\"toggles-row\">\r\n                  <label class=\"toggle\"><input type=\"checkbox\" [(ngModel)]=\"newChecklistItem.is_required\"/>\r\n                    <span class=\"checkmark\"></span>\r\n                    Required</label>\r\n                  <label class=\"toggle\"><input type=\"checkbox\" [(ngModel)]=\"newChecklistItem.is_safety_critical\"/>\r\n                    <span class=\"checkmark\"></span>\r\n                    Safety Critical</label>\r\n                  <label class=\"toggle\"><input type=\"checkbox\" [(ngModel)]=\"newChecklistItem.is_photo_required\"/>\r\n                    <span class=\"checkmark\"></span>\r\n                    Photo Required</label>\r\n                </div>\r\n\r\n                <div class=\"actions-row\">\r\n                  <button class=\"btn btn-primary\" (click)=\"addItemFromForm()\">+ Add Item</button>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"list\" *ngIf=\"items().length > 0\">\r\n                <div *ngFor=\"let it of items(); index as i\" class=\"list-item\">\r\n                  <div class=\"item-title\">{{ it.title }}</div>\r\n                  <div class=\"item-meta\">{{ it.type }} • {{ it.is_required ? 'Required' : 'Optional' }}</div>\r\n                  <button class=\"remove\" (click)=\"removeItem(i)\">Remove</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <ng-container *ngSwitchCase=\"3\">\r\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\">\r\n                  <label>Frequency Type</label>\r\n                  <div class=\"relative freq-type-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                    <button type=\"button\" (click)=\"toggleFrequencyTypeDropdown()\" class=\"dropdown-button\"\r\n                            [class.active]=\"showFrequencyTypeDropdown\">\r\n                      <div class=\"dropdown-content\">\r\n                        <span *ngIf=\"!model.frequency_type\" class=\"placeholder\">Select frequency type</span>\r\n                        <div *ngIf=\"model.frequency_type\" class=\"selected-item\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <span class=\"selected-text\">{{ getFrequencyTypeLabel(model.frequency_type) }}</span>\r\n                        </div>\r\n                        <svg class=\"dropdown-arrow\" [class.rotated]=\"showFrequencyTypeDropdown\" fill=\"none\"\r\n                             stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                d=\"M19 9l-7 7-7-7\"></path>\r\n                        </svg>\r\n                      </div>\r\n                    </button>\r\n                    <div *ngIf=\"showFrequencyTypeDropdown\" class=\"dropdown-menu\">\r\n                      <div class=\"dropdown-header\">Select frequency type</div>\r\n                      <button *ngFor=\"let opt of frequencyTypeOptions\" type=\"button\"\r\n                              (click)=\"selectFrequencyType(opt.value)\" class=\"dropdown-item\"\r\n                              [class.selected]=\"model.frequency_type === opt.value\">\r\n                        <div class=\"item-content\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <div class=\"item-details\">\r\n                            <div class=\"item-name\">{{ opt.name }}</div>\r\n                          </div>\r\n                        </div>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('frequency_value')\">\r\n                  <label>Frequency Value</label>\r\n                  <input type=\"number\" [(ngModel)]=\"model.frequency_value\" [disabled]=\"model.frequency_type!=='time'\"\r\n                         min=\"1\" placeholder=\"Value\" [class.error-input]=\"hasFieldError('frequency_value')\"/>\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('frequency_value')\">\r\n                    {{ getFieldError('frequency_value') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('frequency_unit')\">\r\n                  <label>Frequency Unit</label>\r\n                  <div class=\"relative freq-unit-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                    <button type=\"button\" (click)=\"toggleFrequencyUnitDropdown()\" class=\"dropdown-button\"\r\n                            [class.active]=\"showFrequencyUnitDropdown\" [disabled]=\"model.frequency_type!=='time'\">\r\n                      <div class=\"dropdown-content\">\r\n                        <span *ngIf=\"!model.frequency_unit\" class=\"placeholder\">Select unit</span>\r\n                        <div *ngIf=\"model.frequency_unit\" class=\"selected-item\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <span class=\"selected-text\">{{ model.frequency_unit }}</span>\r\n                        </div>\r\n                        <svg class=\"dropdown-arrow\" [class.rotated]=\"showFrequencyUnitDropdown\" fill=\"none\"\r\n                             stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                d=\"M19 9l-7 7-7-7\"></path>\r\n                        </svg>\r\n                      </div>\r\n                    </button>\r\n                    <div *ngIf=\"showFrequencyUnitDropdown && model.frequency_type==='time'\" class=\"dropdown-menu\">\r\n                      <div class=\"dropdown-header\">Select unit</div>\r\n                      <button *ngFor=\"let u of frequencyUnitOptions\" type=\"button\" (click)=\"selectFrequencyUnit(u)\"\r\n                              class=\"dropdown-item\" [class.selected]=\"model.frequency_unit===u\">\r\n                        <div class=\"item-content\">\r\n                          <div class=\"item-icon\">\r\n                            <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                          <div class=\"item-details\">\r\n                            <div class=\"item-name\">{{ u }}</div>\r\n                          </div>\r\n                        </div>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('frequency_unit')\">\r\n                    {{ getFieldError('frequency_unit') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"modal-footer p-6 border-t flex justify-between items-center\">\r\n        <div class=\"text-sm text-red-600\" *ngIf=\"error\">{{ error }}</div>\r\n        <div class=\"flex gap-2\">\r\n          <button *ngIf=\"step() > 0\" type=\"button\" class=\"btn btn-secondary w-[150px]\" (click)=\"prev()\"\r\n                  [disabled]=\"loading\">Back\r\n          </button>\r\n          <button class=\"btn btn-secondary w-[150px]\" (click)=\"close()\" [disabled]=\"loading\">Cancel</button>\r\n        </div>\r\n        <div class=\"flex gap-2\">\r\n          <button *ngIf=\"step() < 3\" class=\"btn btn-primary w-[150px]\" (click)=\"next()\"\r\n                  [disabled]=\"!canGoNext() || loading\">Next\r\n          </button>\r\n          <button *ngIf=\"step() === 3\" class=\"btn btn-primary w-[150px]\" (click)=\"submit()\"\r\n                  [disabled]=\"!canSubmit() || loading\">{{ editMode ? 'Update Plan' : 'Create Plan' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": []
}
