{
  "version": 3,
  "sources": ["src/app/work-orders/services/work-order.service.ts", "src/app/work-orders/components/work-order-card/work-order-card.component.ts", "src/app/work-orders/components/work-order-card/work-order-card.component.html", "src/app/core/services/meta-work-orders.service.ts", "src/app/work-orders/components/work-order-filters/work-order-filters.component.ts", "src/app/work-orders/components/work-order-filters/work-order-filters.component.html", "src/app/work-orders/components/edit-work-order-modal/edit-work-order-modal.component.ts", "src/app/work-orders/components/edit-work-order-modal/edit-work-order-modal.component.html", "src/app/work-orders/components/work-order-list/work-order-list.component.ts", "src/app/work-orders/components/work-order-list/work-order-list.component.html", "src/app/work-orders/components/work-order-stats/work-order-stats.component.ts", "src/app/work-orders/components/work-order-stats/work-order-stats.component.html", "src/app/work-orders/components/work-order-analytics/work-order-analytics.component.ts", "src/app/work-orders/components/work-order-analytics/work-order-analytics.component.html", "src/app/work-orders/work-orders.component.ts", "src/app/work-orders/work-orders.component.html", "src/app/work-orders/components/add-work-order-parts-modal/add-work-order-parts-modal.component.ts", "src/app/work-orders/components/add-work-order-parts-modal/add-work-order-parts-modal.component.html", "src/app/work-orders/components/view-costs-modal/view-costs-modal.component.ts", "src/app/work-orders/components/view-costs-modal/view-costs-modal.component.html", "src/app/work-orders/components/work-order-preview/work-order-preview.component.ts", "src/app/work-orders/components/work-order-preview/work-order-preview.component.html", "src/app/work-orders/work-orders-routing.module.ts", "src/app/work-orders/work-orders.module.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { AuthService } from '../../core/services/auth.service';\r\n\r\nexport interface WorkOrderUser {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  user_type: string;\r\n  email: string;\r\n  email_verified_at: string;\r\n  company_id: number;\r\n  created_by: number;\r\n  permissions: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkOrderCompany {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  owner_id: string;\r\n  subscription_status: string;\r\n  subscription_expires_at: string | null;\r\n  business_type: string | null;\r\n  industry: string | null;\r\n  phone: string | null;\r\n  email: string | null;\r\n  address: string | null;\r\n  logo: string | null;\r\n  deleted_at: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkOrder {\r\n  id: number;\r\n  title: string;\r\n  description: string | null;\r\n  priority_id: number | null;\r\n  status_id: number | null;\r\n  category_id: number | null;\r\n  due_date: string | null;\r\n  completed_at: string | null;\r\n  asset_id: number | null;\r\n  location_id: number | null;\r\n  assigned_to: number | null;\r\n  assigned_by: number | null;\r\n  created_by: WorkOrderUser;\r\n  company_id: number;\r\n  estimated_hours: number | null;\r\n  actual_hours: number | null;\r\n  notes: string | null;\r\n  tags: string | null;\r\n  team: any | null;\r\n  meta: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n  deleted_at: string | null;\r\n  is_overdue: boolean;\r\n  days_until_due: number | null;\r\n  days_since_created: number;\r\n  resolution_time_days: number | null;\r\n  asset: any | null;\r\n  location: any | null;\r\n  company: WorkOrderCompany;\r\n  \r\n  // Relationships (populated by backend)\r\n  priority?: { id: number; name: string; slug: string };\r\n  status?: { id: number; name: string; slug: string };\r\n  category?: { id: number; name: string; slug: string };\r\n}\r\n\r\nexport interface WorkOrderListResponse {\r\n  current_page: number;\r\n  data: WorkOrder[];\r\n  first_page_url: string;\r\n  from: number;\r\n  last_page: number;\r\n  last_page_url: string;\r\n  links: Array<{\r\n    url: string | null;\r\n    label: string;\r\n    active: boolean;\r\n  }>;\r\n  next_page_url: string | null;\r\n  path: string;\r\n  per_page: number;\r\n  prev_page_url: string | null;\r\n  to: number;\r\n  total: number;\r\n}\r\n\r\n// Generic API response wrapper from backend\r\ninterface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n}\r\n\r\nexport interface CreateWorkOrderRequest {\r\n  title: string;\r\n  description?: string;\r\n  priority_id: number;\r\n  status_id: number;\r\n  category_id?: number;\r\n  due_date?: string;\r\n  asset_id?: number;\r\n  location_id?: number;\r\n  assigned_to?: number;\r\n  team_id?: number;\r\n  tags?: string;\r\n  estimated_hours?: number;\r\n  notes?: string;\r\n}\r\n\r\nexport interface WorkOrderStats {\r\n  total: number;\r\n  open: number;\r\n  inProgress: number;\r\n  completed: number;\r\n  critical: number;\r\n}\r\n\r\nexport interface WorkOrderPreview extends WorkOrder {\r\n  lastUpdated?: string;\r\n  timeSpent?: string;\r\n  totalCost?: number;\r\n  hourlyRate?: number;\r\n  comments?: WorkOrderComment[];\r\n  timeLogs?: TimeLog[];\r\n}\r\n\r\nexport interface WorkOrderComment {\r\n  id: number;\r\n  work_order_id?: number;\r\n  user?: { id: number; first_name: string; last_name: string; email: string };\r\n  comment: string;\r\n  meta?: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface TimeLog {\r\n  id: number;\r\n  description?: string | null;\r\n  start_time: string;\r\n  end_time?: string | null;\r\n  duration_minutes?: number | null;\r\n  user?: { id: number; first_name: string; last_name: string; email: string };\r\n  hourly_rate?: number | null;\r\n  total_cost?: number | null;\r\n}\r\n\r\nexport interface WorkOrderAssignment {\r\n  id: number;\r\n  work_order_id: number;\r\n  user: { id: number; first_name: string; last_name: string; email: string };\r\n  user_id: number;\r\n  assigned_by?: number | null;\r\n  status?: string; // optional: 'assigned' | 'accepted' | 'declined' | 'completed'\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkOrderPartItem {\r\n  id: number;\r\n  work_order_id: number;\r\n  part_id: number;\r\n  part?: { id: number; name: string; uom?: string };\r\n  location_id?: number | null;\r\n  qty: number;\r\n  unit_cost?: number | null;\r\n  status: 'reserved' | 'consumed';\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n// New interfaces for enhanced analytics and filtering\r\nexport interface WorkOrderAnalytics {\r\n  // KPIs\r\n  total_work_orders: number;\r\n  open_work_orders: number;\r\n  in_progress_work_orders: number;\r\n  completed_work_orders: number;\r\n  overdue_work_orders: number;\r\n  average_resolution_time_days: number;\r\n  completion_rate_percentage: number;\r\n  active_technicians: number;\r\n\r\n  // Distributions\r\n  status_distribution: { [key: string]: number };\r\n  priority_distribution: { [key: string]: number };\r\n\r\n  // Trends\r\n  monthly_performance_trend: Array<{\r\n    year: number;\r\n    month: number;\r\n    created_count: number;\r\n    completed_count: number;\r\n  }>;\r\n  top_technician_performance: Array<{\r\n    assigned_to: number;\r\n    completed_count: number;\r\n    avg_resolution_days: number;\r\n    assignedTo?: {\r\n      id: number;\r\n      first_name: string;\r\n      last_name: string;\r\n    };\r\n  }>;\r\n}\r\n\r\nexport interface WorkOrderHistoryEvent {\r\n  type: 'created' | 'updated' | 'comment' | string;\r\n  title: string;\r\n  timestamp: string;\r\n  user?: { id: number; first_name: string; last_name: string; email: string } | null;\r\n  details?: any;\r\n}\r\n\r\nexport interface WorkOrderStatistics {\r\n  status_counts: { [key: string]: number };\r\n  priority_counts: { [key: string]: number };\r\n  overdue_count: number;\r\n  recent_created: number;\r\n  recent_completed: number;\r\n}\r\n\r\nexport interface WorkOrderFilters {\r\n  assets: Array<{ id: number; name: string; asset_id: string }>;\r\n  locations: Array<{ id: number; name: string }>;\r\n  users: Array<{ id: number; first_name: string; last_name: string }>;\r\n  status_options: { [key: string]: string };\r\n  priority_options: { [key: string]: string };\r\n}\r\n\r\nexport interface WorkOrderSearchParams {\r\n  status_id?: number | null;\r\n  priority_id?: number | null;\r\n  category_id?: number | null;\r\n  asset_id?: number;\r\n  location_id?: number;\r\n  assigned_to?: number;\r\n  overdue?: boolean;\r\n  start_date?: string;\r\n  end_date?: string;\r\n  search?: string;\r\n  sort_by?: string;\r\n  sort_dir?: 'asc' | 'desc';\r\n  page?: number;\r\n  per_page?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WorkOrderService {\r\n  private apiUrl = `${environment.apiUrl}/work-orders`;\r\n  \r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  private getAuthHeaders(): { headers: { [header: string]: string } } {\r\n    const token = this.authService.getToken();\r\n    return {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n      }\r\n    };\r\n  }\r\n\r\n  // Comments API\r\n  getComments(workOrderId: number): Observable<WorkOrderComment[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderComment[]>>(`${this.apiUrl}/${workOrderId}/comments`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Assignments API\r\n  getAssignments(workOrderId: number): Observable<WorkOrderAssignment[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderAssignment[]>>(`${this.apiUrl}/${workOrderId}/assignments`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  setAssignments(workOrderId: number, userIds: number[]): Observable<WorkOrderAssignment[]> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrderAssignment[]>>(\r\n        `${this.apiUrl}/${workOrderId}/assignments`,\r\n        { user_ids: userIds },\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  deleteAssignment(workOrderId: number, assignmentId: number): Observable<{ success: boolean; message?: string }> {\r\n    return this.http\r\n      .delete<{ success: boolean; message?: string }>(`${this.apiUrl}/${workOrderId}/assignments/${assignmentId}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Update a single assignment's status\r\n  updateAssignmentStatus(workOrderId: number, assignmentId: number, status: string): Observable<WorkOrderAssignment> {\r\n    return this.http\r\n      .put<ApiResponse<WorkOrderAssignment>>(\r\n        `${this.apiUrl}/${workOrderId}/assignments/${assignmentId}`,\r\n        { status },\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Parts API\r\n  getParts(workOrderId: number): Observable<WorkOrderPartItem[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderPartItem[]>>(`${this.apiUrl}/${workOrderId}/parts`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  addParts(workOrderId: number, items: Array<{ part_id: number; qty: number; unit_cost?: number; location_id?: number }>): Observable<WorkOrderPartItem[]> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrderPartItem[]>>(`${this.apiUrl}/${workOrderId}/parts`, { items }, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  updatePart(workOrderId: number, partItemId: number, payload: Partial<{ qty: number; unit_cost: number; status: 'reserved' | 'consumed' }>): Observable<WorkOrderPartItem> {\r\n    return this.http\r\n      .put<ApiResponse<WorkOrderPartItem>>(`${this.apiUrl}/${workOrderId}/parts/${partItemId}`, payload, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  deletePart(workOrderId: number, partItemId: number): Observable<{ success: boolean }> {\r\n    return this.http\r\n      .delete<{ success: boolean }>(`${this.apiUrl}/${workOrderId}/parts/${partItemId}`, this.getAuthHeaders());\r\n  }\r\n\r\n  addComment(workOrderId: number, comment: string, meta?: any): Observable<WorkOrderComment> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrderComment>>(\r\n        `${this.apiUrl}/${workOrderId}/comments`,\r\n        { comment, meta },\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  deleteComment(workOrderId: number, commentId: number): Observable<{ success: boolean; message?: string }> {\r\n    return this.http\r\n      .delete<{ success: boolean; message?: string }>(`${this.apiUrl}/${workOrderId}/comments/${commentId}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Enhanced: Get all work orders with advanced filtering and search\r\n  getWorkOrders(params?: WorkOrderSearchParams): Observable<WorkOrderListResponse> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params) {\r\n      Object.keys(params).forEach(key => {\r\n        const value = params[key as keyof WorkOrderSearchParams];\r\n        if (value !== undefined && value !== null && value !== '') {\r\n          httpParams = httpParams.set(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.http.get<WorkOrderListResponse>(\r\n      this.apiUrl, \r\n      { ...this.getAuthHeaders(), params: httpParams }\r\n    );\r\n  }\r\n\r\n  // Get a single work order by ID\r\n  getWorkOrderById(id: string): Observable<WorkOrderPreview> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderPreview>>(`${this.apiUrl}/${id}`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Update status by status_id\r\n  updateWorkOrderStatus(id: number, status_id: number): Observable<WorkOrder> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrder>>(`${this.apiUrl}/${id}/status`, { status_id }, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Create a new work order\r\n  createWorkOrder(workOrder: CreateWorkOrderRequest): Observable<WorkOrder> {\r\n    return this.http.post<WorkOrder>(this.apiUrl, workOrder, this.getAuthHeaders());\r\n  }\r\n\r\n  // Update an existing work order\r\n  updateWorkOrder(id: number, workOrder: Partial<CreateWorkOrderRequest>): Observable<WorkOrder> {\r\n    return this.http.put<WorkOrder>(`${this.apiUrl}/${id}`, workOrder, this.getAuthHeaders());\r\n  }\r\n\r\n  // Delete a work order\r\n  deleteWorkOrder(id: number): Observable<{ success: boolean }> {\r\n    return this.http.delete<{ success: boolean }>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get comprehensive work order analytics\r\n  getWorkOrderAnalytics(): Observable<WorkOrderAnalytics> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderAnalytics>>(`${this.apiUrl}/analytics`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Get basic work order statistics\r\n  getWorkOrderStatistics(): Observable<WorkOrderStatistics> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderStatistics>>(`${this.apiUrl}/statistics`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Get work order count with filters\r\n  getWorkOrderCount(params?: WorkOrderSearchParams): Observable<{ count: number }> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params) {\r\n      Object.keys(params).forEach(key => {\r\n        const value = params[key as keyof WorkOrderSearchParams];\r\n        if (value !== undefined && value !== null && value !== '') {\r\n          httpParams = httpParams.set(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.http\r\n      .get<ApiResponse<{ count: number }>>(\r\n        `${this.apiUrl}/count`, \r\n        { ...this.getAuthHeaders(), params: httpParams }\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Get available filter options\r\n  getWorkOrderFilters(): Observable<WorkOrderFilters> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderFilters>>(`${this.apiUrl}/filters`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // History API\r\n  getWorkOrderHistory(id: number): Observable<WorkOrderHistoryEvent[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderHistoryEvent[]>>(`${this.apiUrl}/${id}/history`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Time tracking API\r\n  getTimeLogs(workOrderId: number): Observable<{ logs: TimeLog[]; totals: { total_minutes: number; total_cost: number } }> {\r\n    return this.http\r\n      .get<ApiResponse<{ logs: TimeLog[]; totals: { total_minutes: number; total_cost: number } }>>(\r\n        `${this.apiUrl}/${workOrderId}/time-logs`,\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  startTimer(workOrderId: number, payload: { description?: string; hourly_rate?: number }): Observable<TimeLog> {\r\n    return this.http\r\n      .post<ApiResponse<TimeLog>>(\r\n        `${this.apiUrl}/${workOrderId}/time-logs/start`,\r\n        payload,\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  stopTimer(workOrderId: number): Observable<TimeLog> {\r\n    return this.http\r\n      .post<ApiResponse<TimeLog>>(\r\n        `${this.apiUrl}/${workOrderId}/time-logs/stop`,\r\n        {},\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Legacy: Get work order statistics (kept for backward compatibility)\r\n  // Note: This method is deprecated, use getWorkOrderStatistics() instead\r\n  getWorkOrderStats(): Observable<WorkOrderStats> {\r\n    // For backward compatibility, we'll call the statistics endpoint and transform the data\r\n    return this.http.get<WorkOrderStatistics>(`${this.apiUrl}/statistics`, this.getAuthHeaders())\r\n      .pipe(\r\n        map(stats => ({\r\n          total: Object.values(stats.status_counts || {}).reduce((sum, count) => sum + count, 0),\r\n          open: stats.status_counts?.['open'] || 0,\r\n          inProgress: stats.status_counts?.['in-progress'] || 0,\r\n          completed: stats.status_counts?.['completed'] || 0,\r\n          critical: stats.priority_counts?.['critical'] || 0\r\n        }))\r\n      );\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { WorkOrder } from '../../services/work-order.service';\r\n\r\n// Interfaces for nested objects\r\ninterface User {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  user_type: string;\r\n  email: string;\r\n}\r\n\r\ninterface Asset {\r\n  id: number;\r\n  name: string;\r\n  asset_id: string;\r\n}\r\n\r\ninterface Location {\r\n  id: number;\r\n  name: string;\r\n  full_path: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-work-order-card',\r\n  standalone: false,\r\n  templateUrl: './work-order-card.component.html',\r\n  styleUrls: ['./work-order-card.component.scss']\r\n})\r\nexport class WorkOrderCardComponent {\r\n  @Input() workOrder!: WorkOrder;\r\n  @Input() isListView = false;\r\n  @Input() showBulkSelection = false;\r\n  @Input() isSelected = false;\r\n  @Output() editRequested = new EventEmitter<WorkOrder>();\r\n  @Output() deleteRequested = new EventEmitter<WorkOrder>();\r\n  @Output() selectionChanged = new EventEmitter<{ workOrderId: number; selected: boolean }>();\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  showMenu = false;\r\n\r\n  @HostListener('document:click')\r\n  onDocumentClick(): void {\r\n    this.showMenu = false;\r\n  }\r\n\r\n  private getStatusSlug(status: any): string {\r\n    if (!status) return 'open';\r\n    if (typeof status === 'string') return status;\r\n    if (typeof status === 'object' && status !== null && 'slug' in status) {\r\n      return (status as { slug: string }).slug;\r\n    }\r\n    return String(status);\r\n  }\r\n\r\n  private getPrioritySlug(priority: any): string {\r\n    if (!priority) return 'medium';\r\n    if (typeof priority === 'string') return priority;\r\n    if (typeof priority === 'object' && priority !== null && 'slug' in priority) {\r\n      return (priority as { slug: string }).slug;\r\n    }\r\n    return String(priority);\r\n  }\r\n\r\n  onSelectionChange(event: any): void {\r\n    const selected = event.target.checked;\r\n    this.isSelected = selected;\r\n    this.selectionChanged.emit({\r\n      workOrderId: this.workOrder.id,\r\n      selected: selected\r\n    });\r\n  }\r\n\r\n  getStatusLabel(status: string | { id: number; name: string; slug: string } | undefined): string {\r\n    const slug = this.getStatusSlug(status as any);\r\n    const statusMap: { [key: string]: string } = {\r\n      'open': 'Open',\r\n      'in-progress': 'In Progress',\r\n      'in_progress': 'In Progress',\r\n      'completed': 'Completed',\r\n      'cancelled': 'Cancelled',\r\n      'pending': 'Pending'\r\n    };\r\n    return statusMap[slug] || slug;\r\n  }\r\n\r\n  getPriorityLabel(priority: string | { id: number; name: string; slug: string } | undefined): string {\r\n    const slug = this.getPrioritySlug(priority as any);\r\n    const priorityMap: { [key: string]: string } = {\r\n      'low': 'Low',\r\n      'medium': 'Medium',\r\n      'high': 'High',\r\n      'critical': 'Critical',\r\n      'urgent': 'Urgent'\r\n    };\r\n    return priorityMap[slug] || slug;\r\n  }\r\n\r\n  getAssigneeName(): string {\r\n    if (this.workOrder.assigned_to) {\r\n      if (typeof this.workOrder.assigned_to === 'object' && this.workOrder.assigned_to !== null) {\r\n        const assignedTo = this.workOrder.assigned_to as User;\r\n        const firstName = assignedTo.first_name || '';\r\n        const lastName = assignedTo.last_name || '';\r\n        return `${firstName} ${lastName}`.trim() || 'Unassigned';\r\n      }\r\n      return String(this.workOrder.assigned_to);\r\n    }\r\n    return 'Unassigned';\r\n  }\r\n\r\n  getAssetName(): string {\r\n    if (this.workOrder.asset) {\r\n      if (typeof this.workOrder.asset === 'object' && this.workOrder.asset !== null) {\r\n        const asset = this.workOrder.asset as Asset;\r\n        return asset.name || asset.asset_id || 'No Asset';\r\n      }\r\n      return String(this.workOrder.asset);\r\n    }\r\n    return 'No Asset';\r\n  }\r\n\r\n  getLocationName(): string {\r\n    if (this.workOrder.location) {\r\n      if (typeof this.workOrder.location === 'object' && this.workOrder.location !== null) {\r\n        const location = this.workOrder.location as Location;\r\n        return location.name || location.full_path || 'No Location';\r\n      }\r\n      return String(this.workOrder.location);\r\n    }\r\n    return 'No Location';\r\n  }\r\n\r\n  getCreatedBy(): string {\r\n    if (this.workOrder.created_by) {\r\n      if (typeof this.workOrder.created_by === 'object' && this.workOrder.created_by !== null) {\r\n        const createdBy = this.workOrder.created_by as User;\r\n        const firstName = createdBy.first_name || '';\r\n        const lastName = createdBy.last_name || '';\r\n        return `${firstName} ${lastName}`.trim() || 'Unknown';\r\n      }\r\n      return String(this.workOrder.created_by);\r\n    }\r\n    return 'Unknown';\r\n  }\r\n\r\n  getCategoryName(): string {\r\n    const category: any = (this.workOrder as any)?.category;\r\n    if (!category) return '';\r\n    if (typeof category === 'object' && category !== null && 'name' in category) {\r\n      return (category as { name?: string }).name || '';\r\n    }\r\n    if (typeof category === 'string') return category;\r\n    return '';\r\n  }\r\n\r\n  viewDetails(): void {\r\n    // Navigate to work order details\r\n    this.router.navigate(['/work-orders', this.workOrder.id]);\r\n    this.showMenu = false;\r\n  }\r\n\r\n  editWorkOrder(): void {\r\n    // Emit edit event to parent component\r\n    this.editRequested.emit(this.workOrder);\r\n    this.showMenu = false;\r\n  }\r\n\r\n  toggleMenu(): void {\r\n    this.showMenu = !this.showMenu;\r\n  }\r\n\r\n  requestDelete(): void {\r\n    this.deleteRequested.emit(this.workOrder);\r\n    this.showMenu = false;\r\n  }\r\n}\r\n", "<div class=\"work-order-card\" [class.list-view]=\"isListView\">\r\n  <!-- Bulk Selection Checkbox -->\r\n  <div class=\"bulk-selection-checkbox\" *ngIf=\"showBulkSelection\">\r\n    <input \r\n      type=\"checkbox\" \r\n      [checked]=\"isSelected\"\r\n      (change)=\"onSelectionChange($event)\"\r\n      class=\"bulk-checkbox\">\r\n  </div>\r\n\r\n  <div class=\"card-header\">\r\n    <div class=\"title-section\">\r\n      <div class=\"icon\">\r\n        <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.232 5.232l3.536 3.536m-2.036-1.5a2.5 2.5 0 11-3.536 3.536l-7.5 7.5a2 2 0 102.828 2.828l7.5-7.5a2.5 2.5 0 013.536-3.536z\" />\r\n        </svg>\r\n      </div>\r\n      <h3 class=\"title\">{{ workOrder.title }}</h3>\r\n    </div>\r\n    <div class=\"header-actions\">\r\n      <div class=\"badges\">\r\n        <span class=\"badge status-badge\" [ngClass]=\"'status-' + ($any(workOrder.status)?.slug || workOrder.status || 'open')\">\r\n          {{ getStatusLabel($any(workOrder.status)) }}\r\n        </span>\r\n        <span class=\"badge priority-badge\" [ngClass]=\"'priority-' + ($any(workOrder.priority)?.slug || workOrder.priority || 'medium')\">\r\n          {{ getPriorityLabel($any(workOrder.priority)) }}\r\n        </span>\r\n        <span *ngIf=\"getCategoryName()\" class=\"badge category-badge\">{{ getCategoryName() }}</span>\r\n      </div>\r\n      <div class=\"relative\" (click)=\"$event.stopPropagation()\">\r\n        <button\r\n          (click)=\"toggleMenu()\"\r\n          class=\"w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100 transition-colors cursor-pointer\">\r\n          <svg class=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <circle cx=\"12\" cy=\"6\" r=\"1.5\" />\r\n            <circle cx=\"12\" cy=\"12\" r=\"1.5\" />\r\n            <circle cx=\"12\" cy=\"18\" r=\"1.5\" />\r\n          </svg>\r\n        </button>\r\n\r\n        <!-- Dropdown Menu (matches assets UI) -->\r\n        <div *ngIf=\"showMenu\" class=\"absolute right-0 top-full mt-1 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50\">\r\n          <button\r\n            (click)=\"viewDetails()\"\r\n            class=\"w-full flex items-center space-x-3 px-3 py-2 text-left hover:bg-gray-50 transition-colors\">\r\n            <svg class=\"w-4 h-4 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"></path>\r\n            </svg>\r\n            <span class=\"text-sm text-gray-700\">View Details</span>\r\n          </button>\r\n\r\n          <button\r\n            (click)=\"editWorkOrder()\"\r\n            class=\"w-full flex items-center space-x-3 px-3 py-2 text-left hover:bg-gray-50 transition-colors\">\r\n            <svg class=\"w-4 h-4 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"></path>\r\n            </svg>\r\n            <span class=\"text-sm text-gray-700\">Edit</span>\r\n          </button>\r\n\r\n          <div class=\"border-t border-gray-100 my-1\"></div>\r\n\r\n          <button\r\n            (click)=\"requestDelete()\"\r\n            class=\"w-full flex items-center space-x-3 px-3 py-2 text-left hover:bg-red-50 transition-colors\">\r\n            <svg class=\"w-4 h-4 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"></path>\r\n            </svg>\r\n            <span class=\"text-sm text-red-600\">Delete</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"card-content\">\r\n    <p class=\"description\" *ngIf=\"workOrder.description\">\r\n      {{ workOrder.description }}\r\n    </p>\r\n\r\n    <div class=\"meta-row\">\r\n      <div class=\"meta-item\">\r\n        <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"/></svg>\r\n        <span>{{ getAssigneeName() || 'Unknown' }}</span>\r\n      </div>\r\n      <div class=\"meta-item\">\r\n        <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"/></svg>\r\n        <span>{{ workOrder.due_date ? (workOrder.due_date | date:'MMM d, y') : 'N/A' }}</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"footer-row\">\r\n      <span>Created {{ workOrder.created_at | date:'MMM d, y' }} by {{ getCreatedBy() || 'Unknown' }}</span>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- footer removed; actions are in header -->\r\n</div>\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Observable, shareReplay, map } from 'rxjs';\r\nimport { MetaItem } from '../types/work-order.types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MetaWorkOrdersService {\r\n  private http = inject(HttpClient);\r\n  private base = `${environment.apiUrl}/meta/work-orders`;\r\n\r\n  private status$?: Observable<MetaItem[]>;\r\n  private priorities$?: Observable<MetaItem[]>;\r\n  private categories$?: Observable<MetaItem[]>;\r\n\r\n  getStatus(): Observable<MetaItem[]> {\r\n    if (!this.status$) {\r\n      this.status$ = this.http\r\n        .get<any>(`${this.base}/status`)\r\n        .pipe(\r\n          map((res) => (Array.isArray(res) ? res : (res?.data as MetaItem[]) ?? [])),\r\n          shareReplay({ bufferSize: 1, refCount: true })\r\n        );\r\n    }\r\n    return this.status$;\r\n  }\r\n\r\n  // Helper to find a status id by slug\r\n  getStatusIdBySlug(slug: string): Observable<number | null> {\r\n    return this.getStatus().pipe(\r\n      map((items) => {\r\n        const found = items.find((s) => s.slug === slug);\r\n        return found ? found.id : null;\r\n      })\r\n    );\r\n  }\r\n\r\n  getPriorities(): Observable<MetaItem[]> {\r\n    if (!this.priorities$) {\r\n      this.priorities$ = this.http\r\n        .get<any>(`${this.base}/priorities`)\r\n        .pipe(\r\n          map((res) => (Array.isArray(res) ? res : (res?.data as MetaItem[]) ?? [])),\r\n          shareReplay({ bufferSize: 1, refCount: true })\r\n        );\r\n    }\r\n    return this.priorities$;\r\n  }\r\n\r\n  getCategories(): Observable<MetaItem[]> {\r\n    if (!this.categories$) {\r\n      this.categories$ = this.http\r\n        .get<any>(`${this.base}/categories`)\r\n        .pipe(\r\n          map((res) => (Array.isArray(res) ? res : (res?.data as MetaItem[]) ?? [])),\r\n          shareReplay({ bufferSize: 1, refCount: true })\r\n        );\r\n    }\r\n    return this.categories$;\r\n  }\r\n\r\n  // Clear cache methods for when data needs to be refreshed\r\n  clearStatusCache(): void {\r\n    this.status$ = undefined;\r\n  }\r\n\r\n  clearPrioritiesCache(): void {\r\n    this.priorities$ = undefined;\r\n  }\r\n\r\n  clearCategoriesCache(): void {\r\n    this.categories$ = undefined;\r\n  }\r\n\r\n  clearAllCache(): void {\r\n    this.clearStatusCache();\r\n    this.clearPrioritiesCache();\r\n    this.clearCategoriesCache();\r\n  }\r\n}\r\n", "import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { WorkOrderService, WorkOrderFilters } from '../../services/work-order.service';\r\nimport { AssetService } from '../../../assets/services/asset.service';\r\nimport { LocationService } from '../../../locations/services/location.service';\r\nimport { MetaWorkOrdersService } from '../../../core/services/meta-work-orders.service';\r\nimport { MetaItem } from '../../../core/types/work-order.types';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-work-order-filters',\r\n  standalone: false,\r\n  templateUrl: './work-order-filters.component.html',\r\n  styleUrls: ['./work-order-filters.component.scss']\r\n})\r\nexport class WorkOrderFiltersComponent implements OnInit, OnDestroy {\r\n  @Output() filtersChanged = new EventEmitter<any>();\r\n  \r\n  filterForm: FormGroup;\r\n  isLoading = false;\r\n  private subscription = new Subscription();\r\n\r\n  // Filter states\r\n  showStatusDropdown = false;\r\n  showPriorityDropdown = false;\r\n  showCategoryDropdown = false;\r\n  showAdvanced = false;\r\n  showDateRangePicker = false;\r\n  showAssetDropdown = false;\r\n  showLocationDropdown = false;\r\n\r\n  // Sort options\r\n  sortBy = 'created_at';\r\n  sortOrder = 'desc';\r\n\r\n  // Filter data\r\n  statusOptions: MetaItem[] = [];\r\n  priorityOptions: MetaItem[] = [];\r\n  categoryOptions: MetaItem[] = [];\r\n\r\n  sortOptions = [\r\n    { value: 'created_at', label: 'Created Date' },\r\n    { value: 'due_date', label: 'Due Date' },\r\n    { value: 'priority', label: 'Priority' },\r\n    { value: 'status', label: 'Status' },\r\n    { value: 'title', label: 'Title' }\r\n  ];\r\n\r\n  // Asset and location options\r\n  assets: Array<{ id: number; name: string; asset_id: string }> = [];\r\n  locations: Array<{ id: number; name: string }> = [];\r\n  users: Array<{ id: number; first_name: string; last_name: string }> = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder, \r\n    private workOrderService: WorkOrderService,\r\n    private assetService: AssetService,\r\n    private locationService: LocationService,\r\n    private metaService: MetaWorkOrdersService\r\n  ) {\r\n    this.filterForm = this.fb.group({\r\n      search: [''],\r\n      status_id: [null],\r\n      priority_id: [null],\r\n      category_id: [null],\r\n      asset_id: [''],\r\n      location_id: [''],\r\n      assigned_to: [''],\r\n      is_overdue: [false],\r\n      start_date: [''],\r\n      end_date: [''],\r\n      due_start_date: [''],\r\n      due_end_date: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Avoid stale cached metadata if user session or API changed\r\n    this.metaService.clearAllCache();\r\n    this.loadFilterOptions();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  private loadFilterOptions(): void {\r\n    // Load metadata\r\n    this.subscription.add(\r\n      this.metaService.getStatus().subscribe({\r\n        next: (statuses) => {\r\n          this.statusOptions = statuses;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading statuses:', error);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      this.metaService.getPriorities().subscribe({\r\n        next: (priorities) => {\r\n          this.priorityOptions = priorities;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading priorities:', error);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      this.metaService.getCategories().subscribe({\r\n        next: (categories) => {\r\n          this.categoryOptions = categories;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading categories:', error);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Load assets\r\n    this.subscription.add(\r\n      this.assetService.getAssets({ per_page: 1000 }).subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.assets = response.data.assets || response.data || [];\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading assets:', error);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Load locations\r\n    this.subscription.add(\r\n      this.locationService.getLocations({ per_page: 1000 }).subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.locations = response.data.locations || response.data || [];\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading locations:', error);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Load work order filters (users, etc.)\r\n    this.subscription.add(\r\n      this.workOrderService.getWorkOrderFilters().subscribe({\r\n        next: (response) => {\r\n          this.users = response.users || [];\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading filter options:', error);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Status dropdown methods\r\n  toggleStatusDropdown(): void {\r\n    this.showStatusDropdown = !this.showStatusDropdown;\r\n    this.showPriorityDropdown = false;\r\n    this.showCategoryDropdown = false;\r\n    this.showAssetDropdown = false;\r\n    this.showLocationDropdown = false;\r\n  }\r\n\r\n  selectStatus(statusId: number | null): void {\r\n    this.filterForm.patchValue({ status_id: statusId });\r\n    this.showStatusDropdown = false;\r\n  }\r\n\r\n  getStatusLabel(): string {\r\n    const statusId = this.filterForm.value.status_id;\r\n    if (!statusId) return 'All Status';\r\n    const selected = this.statusOptions.find(opt => opt.id === statusId);\r\n    return selected ? selected.name : 'All Status';\r\n  }\r\n\r\n  // Priority dropdown methods\r\n  togglePriorityDropdown(): void {\r\n    this.showPriorityDropdown = !this.showPriorityDropdown;\r\n    this.showStatusDropdown = false;\r\n    this.showCategoryDropdown = false;\r\n    this.showAssetDropdown = false;\r\n    this.showLocationDropdown = false;\r\n  }\r\n\r\n  selectPriority(priorityId: number | null): void {\r\n    this.filterForm.patchValue({ priority_id: priorityId });\r\n    this.showPriorityDropdown = false;\r\n  }\r\n\r\n  getPriorityLabel(): string {\r\n    const priorityId = this.filterForm.value.priority_id;\r\n    if (!priorityId) return 'All Priority';\r\n    const selected = this.priorityOptions.find(opt => opt.id === priorityId);\r\n    return selected ? selected.name : 'All Priority';\r\n  }\r\n\r\n  // Asset dropdown methods\r\n  toggleAssetDropdown(): void {\r\n    this.showAssetDropdown = !this.showAssetDropdown;\r\n    this.showStatusDropdown = false;\r\n    this.showPriorityDropdown = false;\r\n    this.showCategoryDropdown = false;\r\n    this.showLocationDropdown = false;\r\n  }\r\n\r\n  selectAsset(assetId: number): void {\r\n    this.filterForm.patchValue({ asset_id: assetId === 0 ? null : assetId });\r\n    this.showAssetDropdown = false;\r\n  }\r\n\r\n  getAssetLabel(): string {\r\n    const assetId = this.filterForm.value.asset_id;\r\n    if (!assetId) return 'All Assets';\r\n    const asset = this.assets.find(a => a.id === assetId);\r\n    return asset ? asset.name : 'All Assets';\r\n  }\r\n\r\n  // Category dropdown methods\r\n  toggleCategoryDropdown(): void {\r\n    this.showCategoryDropdown = !this.showCategoryDropdown;\r\n    this.showStatusDropdown = false;\r\n    this.showPriorityDropdown = false;\r\n    this.showAssetDropdown = false;\r\n    this.showLocationDropdown = false;\r\n  }\r\n\r\n  selectCategory(categoryId: number | null): void {\r\n    this.filterForm.patchValue({ category_id: categoryId });\r\n    this.showCategoryDropdown = false;\r\n  }\r\n\r\n  getCategoryLabel(): string {\r\n    const categoryId = this.filterForm.value.category_id;\r\n    if (!categoryId) return 'All Categories';\r\n    const selected = this.categoryOptions.find(opt => opt.id === categoryId);\r\n    return selected ? selected.name : 'All Categories';\r\n  }\r\n\r\n  getCategoryValue(): number | null {\r\n    return this.filterForm.value.category_id;\r\n  }\r\n\r\n  // Location dropdown methods\r\n  toggleLocationDropdown(): void {\r\n    this.showLocationDropdown = !this.showLocationDropdown;\r\n    this.showStatusDropdown = false;\r\n    this.showPriorityDropdown = false;\r\n    this.showCategoryDropdown = false;\r\n    this.showAssetDropdown = false;\r\n  }\r\n\r\n  selectLocation(locationId: number): void {\r\n    this.filterForm.patchValue({ location_id: locationId === 0 ? null : locationId });\r\n    this.showLocationDropdown = false;\r\n  }\r\n\r\n  getLocationLabel(): string {\r\n    const locationId = this.filterForm.value.location_id;\r\n    if (!locationId) return 'All Locations';\r\n    const location = this.locations.find(l => l.id === locationId);\r\n    return location ? location.name : 'All Locations';\r\n  }\r\n\r\n  // Date range methods\r\n  toggleDateRangePicker(): void {\r\n    this.showDateRangePicker = !this.showDateRangePicker;\r\n  }\r\n\r\n  // Advanced methods\r\n  toggleAdvanced(): void {\r\n    this.showAdvanced = !this.showAdvanced;\r\n  }\r\n\r\n  setSortBy(value: string): void {\r\n    this.sortBy = value;\r\n  }\r\n\r\n  toggleSortOrder(): void {\r\n    this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\r\n  }\r\n\r\n  onSearch(): void {\r\n    this.onFilterChange();\r\n  }\r\n\r\n  onFilterChange(): void {\r\n    const formValue = this.filterForm.value;\r\n    const filters = {\r\n      ...formValue,\r\n      sortBy: this.sortBy,\r\n      sortOrder: this.sortOrder\r\n    };\r\n    \r\n    // Clean up empty values\r\n    Object.keys(filters).forEach(key => {\r\n      if (filters[key] === '' || filters[key] === null || filters[key] === undefined) {\r\n        delete filters[key];\r\n      }\r\n    });\r\n    \r\n    // Emit the filters to parent component\r\n    this.filtersChanged.emit(filters);\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.filterForm.patchValue({\r\n      search: '',\r\n      status_id: null,\r\n      priority_id: null,\r\n      category_id: null,\r\n      asset_id: '',\r\n      location_id: '',\r\n      assigned_to: '',\r\n      is_overdue: false,\r\n      start_date: '',\r\n      end_date: '',\r\n      due_start_date: '',\r\n      due_end_date: ''\r\n    });\r\n    this.sortBy = 'created_at';\r\n    this.sortOrder = 'desc';\r\n    this.showAdvanced = false;\r\n    this.showDateRangePicker = false;\r\n    this.onFilterChange();\r\n  }\r\n\r\n  // Close dropdowns when clicking outside\r\n  onDocumentClick(event: any): void {\r\n    if (!event.target.closest('.filter-dropdown')) {\r\n      this.showStatusDropdown = false;\r\n      this.showPriorityDropdown = false;\r\n      this.showCategoryDropdown = false;\r\n      this.showAssetDropdown = false;\r\n      this.showLocationDropdown = false;\r\n    }\r\n  }\r\n\r\n  // Helper methods for template\r\n  getAssetName(assetId: number): string {\r\n    const asset = this.assets.find(a => a.id === assetId);\r\n    return asset ? asset.name : '';\r\n  }\r\n\r\n  getLocationName(locationId: number): string {\r\n    const location = this.locations.find(l => l.id === locationId);\r\n    return location ? location.name : '';\r\n  }\r\n\r\n  // New helper methods for enhanced select boxes\r\n  getStatusValue(): number | null {\r\n    return this.filterForm.value.status_id;\r\n  }\r\n\r\n  getPriorityValue(): number | null {\r\n    return this.filterForm.value.priority_id;\r\n  }\r\n\r\n  getAssetValue(): number | null {\r\n    return this.filterForm.value.asset_id;\r\n  }\r\n\r\n  getLocationValue(): number | null {\r\n    return this.filterForm.value.location_id;\r\n  }\r\n\r\n  getStatusColor(statusId: number | null): string {\r\n    if (!statusId) return '#6B7280';\r\n    const status = this.statusOptions.find(s => s.id === statusId);\r\n    if (!status) return '#6B7280';\r\n    \r\n    const colorMap: { [key: string]: string } = {\r\n      'open': '#10B981',      // Green\r\n      'in-progress': '#F59E0B', // Amber\r\n      'completed': '#3B82F6',   // Blue\r\n      'cancelled': '#EF4444',   // Red\r\n      'pending': '#8B5CF6'      // Purple\r\n    };\r\n    return colorMap[status.slug] || '#6B7280'; // Default gray\r\n  }\r\n\r\n  getPriorityColor(priorityId: number | null): string {\r\n    if (!priorityId) return '#6B7280';\r\n    const priority = this.priorityOptions.find(p => p.id === priorityId);\r\n    if (!priority) return '#6B7280';\r\n    \r\n    const colorMap: { [key: string]: string } = {\r\n      'low': '#10B981',       // Green\r\n      'medium': '#F59E0B',    // Amber\r\n      'high': '#F97316',      // Orange\r\n      'critical': '#EF4444'   // Red\r\n    };\r\n    return colorMap[priority.slug] || '#6B7280'; // Default gray\r\n  }\r\n\r\n  getStatusDescription(statusId: number | null): string {\r\n    if (!statusId) return 'Work order status';\r\n    const status = this.statusOptions.find(s => s.id === statusId);\r\n    if (!status) return 'Work order status';\r\n    \r\n    const descriptionMap: { [key: string]: string } = {\r\n      'open': 'Work order is open and ready for assignment',\r\n      'in-progress': 'Work order is currently being worked on',\r\n      'completed': 'Work order has been completed successfully',\r\n      'cancelled': 'Work order has been cancelled',\r\n      'pending': 'Work order is pending approval or resources'\r\n    };\r\n    return descriptionMap[status.slug] || 'Work order status';\r\n  }\r\n\r\n  getPriorityDescription(priorityId: number | null): string {\r\n    if (!priorityId) return 'Work order priority level';\r\n    const priority = this.priorityOptions.find(p => p.id === priorityId);\r\n    if (!priority) return 'Work order priority level';\r\n    \r\n    const descriptionMap: { [key: string]: string } = {\r\n      'low': 'Low priority - can be addressed when convenient',\r\n      'medium': 'Medium priority - should be addressed soon',\r\n      'high': 'High priority - needs immediate attention',\r\n      'critical': 'Critical priority - requires immediate action'\r\n    };\r\n    return descriptionMap[priority.slug] || 'Work order priority level';\r\n  }\r\n}\r\n", "<div class=\"filters-section\">\r\n  <div class=\"filters-container\" [formGroup]=\"filterForm\">\r\n    <!-- Search Input - Full Width -->\r\n    <div class=\"search-input-wrapper\">\r\n      <div class=\"search-input\">\r\n        <svg class=\"search-icon w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\r\n        </svg>\r\n        <input\r\n          class=\"search-field\"\r\n          type=\"text\"\r\n          formControlName=\"search\"\r\n          placeholder=\"Search work orders by title, description, or asset...\"\r\n          (keydown.enter)=\"onSearch()\">\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Filter Grid - 4 Columns -->\r\n    <div class=\"filter-grid\">\r\n      <!-- Status Dropdown -->\r\n      <div class=\"filter-dropdown\">\r\n        <label class=\"filter-label\">\r\n          <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n          </svg>\r\n          Status\r\n        </label>\r\n        <div class=\"relative\" (click)=\"$event.stopPropagation()\">\r\n          <button\r\n            type=\"button\"\r\n            (click)=\"toggleStatusDropdown()\"\r\n            class=\"filter-button\"\r\n            [class.active]=\"showStatusDropdown\">\r\n            <div class=\"button-content\">\r\n              <span *ngIf=\"!getStatusLabel() || getStatusLabel() === 'All Status'\" class=\"placeholder-text\">All Status</span>\r\n              <div *ngIf=\"getStatusLabel() && getStatusLabel() !== 'All Status'\" class=\"selected-option\">\r\n                <div class=\"status-indicator\" [style.background-color]=\"getStatusColor(getStatusValue()) + '20'\">\r\n                  <svg class=\"w-4 h-4\" [style.color]=\"getStatusColor(getStatusValue())\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                  </svg>\r\n                </div>\r\n                <span class=\"selected-text\">{{ getStatusLabel() }}</span>\r\n              </div>\r\n              <svg class=\"chevron-icon\" [class.rotate-180]=\"showStatusDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n              </svg>\r\n            </div>\r\n          </button>\r\n\r\n          <!-- Dropdown Menu -->\r\n          <div *ngIf=\"showStatusDropdown\" class=\"dropdown-menu\">\r\n            <div class=\"dropdown-header\">\r\n              <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n              </svg>\r\n              Select Status\r\n            </div>\r\n            <button\r\n              class=\"dropdown-option\"\r\n              (click)=\"selectStatus(null)\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-gray-100\">\r\n                  <svg class=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">All Status</div>\r\n                  <div class=\"option-description\">Show all statuses</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n            <button\r\n              *ngFor=\"let option of statusOptions\"\r\n              type=\"button\"\r\n              (click)=\"selectStatus(option.id)\"\r\n              class=\"dropdown-option\"\r\n              [class.selected]=\"getStatusValue() === option.id\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon\" [style.background-color]=\"getStatusColor(option.id) + '20'\">\r\n                  <svg class=\"w-5 h-5\" [style.color]=\"getStatusColor(option.id)\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">{{ option.name }}</div>\r\n                  <div class=\"option-description\">{{ getStatusDescription(option.id) }}</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Priority Dropdown -->\r\n      <div class=\"filter-dropdown\">\r\n        <label class=\"filter-label\">\r\n          <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n          </svg>\r\n          Priority\r\n        </label>\r\n        <div class=\"relative\" (click)=\"$event.stopPropagation()\">\r\n          <button\r\n            type=\"button\"\r\n            (click)=\"togglePriorityDropdown()\"\r\n            class=\"filter-button\"\r\n            [class.active]=\"showPriorityDropdown\">\r\n            <div class=\"button-content\">\r\n              <span *ngIf=\"!getPriorityLabel() || getPriorityLabel() === 'All Priority'\" class=\"placeholder-text\">All Priority</span>\r\n              <div *ngIf=\"getPriorityLabel() && getPriorityLabel() !== 'All Priority'\" class=\"selected-option\">\r\n                <div class=\"priority-indicator\" [style.background-color]=\"getPriorityColor(getPriorityValue()) + '20'\">\r\n                  <svg class=\"w-4 h-4\" [style.color]=\"getPriorityColor(getPriorityValue())\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n                  </svg>\r\n                </div>\r\n                <span class=\"selected-text\">{{ getPriorityLabel() }}</span>\r\n              </div>\r\n              <svg class=\"chevron-icon\" [class.rotate-180]=\"showPriorityDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n              </svg>\r\n            </div>\r\n          </button>\r\n\r\n          <!-- Dropdown Menu -->\r\n          <div *ngIf=\"showPriorityDropdown\" class=\"dropdown-menu\">\r\n            <div class=\"dropdown-header\">\r\n              <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n              </svg>\r\n              Select Priority\r\n            </div>\r\n            <button\r\n              class=\"dropdown-option\"\r\n              (click)=\"selectPriority(null)\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-gray-100\">\r\n                  <svg class=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">All Priority</div>\r\n                  <div class=\"option-description\">Show all priorities</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n            <button\r\n              *ngFor=\"let option of priorityOptions\"\r\n              type=\"button\"\r\n              (click)=\"selectPriority(option.id)\"\r\n              class=\"dropdown-option\"\r\n              [class.selected]=\"getPriorityValue() === option.id\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon\" [style.background-color]=\"getPriorityColor(option.id) + '20'\">\r\n                  <svg class=\"w-5 h-5\" [style.color]=\"getPriorityColor(option.id)\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">{{ option.name }}</div>\r\n                  <div class=\"option-description\">{{ getPriorityDescription(option.id) }}</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Category Dropdown -->\r\n      <div class=\"filter-dropdown\">\r\n        <label class=\"filter-label\">\r\n          <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"></path>\r\n          </svg>\r\n          Category\r\n        </label>\r\n        <div class=\"relative\" (click)=\"$event.stopPropagation()\">\r\n          <button\r\n            type=\"button\"\r\n            (click)=\"toggleCategoryDropdown()\"\r\n            class=\"filter-button\"\r\n            [class.active]=\"showCategoryDropdown\">\r\n            <div class=\"button-content\">\r\n              <span *ngIf=\"!getCategoryLabel() || getCategoryLabel() === 'All Categories'\" class=\"placeholder-text\">All Categories</span>\r\n              <div *ngIf=\"getCategoryLabel() && getCategoryLabel() !== 'All Categories'\" class=\"selected-option\">\r\n                <div class=\"category-indicator\">\r\n                  <svg class=\"w-4 h-4 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"></path>\r\n                  </svg>\r\n                </div>\r\n                <span class=\"selected-text\">{{ getCategoryLabel() }}</span>\r\n              </div>\r\n              <svg class=\"chevron-icon\" [class.rotate-180]=\"showCategoryDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n              </svg>\r\n            </div>\r\n          </button>\r\n\r\n          <!-- Dropdown Menu -->\r\n          <div *ngIf=\"showCategoryDropdown\" class=\"dropdown-menu\">\r\n            <div class=\"dropdown-header\">\r\n              <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"></path>\r\n              </svg>\r\n              Select Category\r\n            </div>\r\n            <button\r\n              class=\"dropdown-option\"\r\n              (click)=\"selectCategory(null)\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-gray-100\">\r\n                  <svg class=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">All Categories</div>\r\n                  <div class=\"option-description\">Show all categories</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n            <button\r\n              *ngFor=\"let option of categoryOptions\"\r\n              type=\"button\"\r\n              (click)=\"selectCategory(option.id)\"\r\n              class=\"dropdown-option\"\r\n              [class.selected]=\"getCategoryValue() === option.id\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-purple-100\">\r\n                  <svg class=\"w-5 h-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">{{ option.name }}</div>\r\n                  <div class=\"option-description\">Category</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Asset Dropdown -->\r\n      <div class=\"filter-dropdown\">\r\n        <label class=\"filter-label\">\r\n          <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"></path>\r\n          </svg>\r\n          Asset\r\n        </label>\r\n        <div class=\"relative\" (click)=\"$event.stopPropagation()\">\r\n          <button\r\n            type=\"button\"\r\n            (click)=\"toggleAssetDropdown()\"\r\n            class=\"filter-button\"\r\n            [class.active]=\"showAssetDropdown\">\r\n            <div class=\"button-content\">\r\n              <span *ngIf=\"!getAssetLabel() || getAssetLabel() === 'All Assets'\" class=\"placeholder-text\">All Assets</span>\r\n              <div *ngIf=\"getAssetLabel() && getAssetLabel() !== 'All Assets'\" class=\"selected-option\">\r\n                <div class=\"asset-indicator\">\r\n                  <svg class=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"></path>\r\n                  </svg>\r\n                </div>\r\n                <span class=\"selected-text\">{{ getAssetLabel() }}</span>\r\n              </div>\r\n              <svg class=\"chevron-icon\" [class.rotate-180]=\"showAssetDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n              </svg>\r\n            </div>\r\n          </button>\r\n\r\n          <!-- Dropdown Menu -->\r\n          <div *ngIf=\"showAssetDropdown\" class=\"dropdown-menu\">\r\n            <div class=\"dropdown-header\">\r\n              <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"></path>\r\n              </svg>\r\n              Select Asset\r\n            </div>\r\n            <button\r\n              class=\"dropdown-option\"\r\n              (click)=\"selectAsset(0)\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-gray-100\">\r\n                  <svg class=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">All Assets</div>\r\n                  <div class=\"option-description\">Show all assets</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n            <button\r\n              *ngFor=\"let asset of assets\"\r\n              type=\"button\"\r\n              (click)=\"selectAsset(asset.id)\"\r\n              class=\"dropdown-option\"\r\n              [class.selected]=\"getAssetValue() === asset.id\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-blue-100\">\r\n                  <svg class=\"w-5 h-5 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">{{ asset.name }}</div>\r\n                  <div class=\"option-description\">{{ asset.asset_id }}</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Location Dropdown -->\r\n      <div class=\"filter-dropdown\">\r\n        <label class=\"filter-label\">\r\n          <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n          </svg>\r\n          Location\r\n        </label>\r\n        <div class=\"relative\" (click)=\"$event.stopPropagation()\">\r\n          <button\r\n            type=\"button\"\r\n            (click)=\"toggleLocationDropdown()\"\r\n            class=\"filter-button\"\r\n            [class.active]=\"showLocationDropdown\">\r\n            <div class=\"button-content\">\r\n              <span *ngIf=\"!getLocationLabel() || getLocationLabel() === 'All Locations'\" class=\"placeholder-text\">All Locations</span>\r\n              <div *ngIf=\"getLocationLabel() && getLocationLabel() !== 'All Locations'\" class=\"selected-option\">\r\n                <div class=\"location-indicator\">\r\n                  <svg class=\"w-4 h-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n                  </svg>\r\n                </div>\r\n                <span class=\"selected-text\">{{ getLocationLabel() }}</span>\r\n              </div>\r\n              <svg class=\"chevron-icon\" [class.rotate-180]=\"showLocationDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n              </svg>\r\n            </div>\r\n          </button>\r\n\r\n          <!-- Dropdown Menu -->\r\n          <div *ngIf=\"showLocationDropdown\" class=\"dropdown-menu\">\r\n            <div class=\"dropdown-header\">\r\n              <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n              </svg>\r\n              Select Location\r\n            </div>\r\n            <button\r\n              class=\"dropdown-option\"\r\n              (click)=\"selectLocation(0)\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-gray-100\">\r\n                  <svg class=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">All Locations</div>\r\n                  <div class=\"option-description\">Show all locations</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n            <button\r\n              *ngFor=\"let location of locations\"\r\n              type=\"button\"\r\n              (click)=\"selectLocation(location.id)\"\r\n              class=\"dropdown-option\"\r\n              [class.selected]=\"getLocationValue() === location.id\">\r\n              <div class=\"option-content\">\r\n                <div class=\"option-icon bg-green-100\">\r\n                  <svg class=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"option-text\">\r\n                  <div class=\"option-label\">{{ location.name }}</div>\r\n                  <div class=\"option-description\">Location</div>\r\n                </div>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Action Buttons Row -->\r\n    <div class=\"action-buttons\">\r\n      <button \r\n        type=\"button\"\r\n        class=\"action-btn secondary\"\r\n        (click)=\"clearFilters()\">\r\n        <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n        </svg>\r\n        Clear Filters\r\n      </button>\r\n      \r\n      <button \r\n        type=\"button\"\r\n        class=\"action-btn primary\"\r\n        (click)=\"onSearch()\">\r\n        <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\r\n        </svg>\r\n        Apply Filters\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { WorkOrderService, WorkOrder } from '../../services/work-order.service';\r\nimport { AssetService } from '../../../assets/services/asset.service';\r\nimport { LocationService } from '../../../locations/services/location.service';\r\nimport { TeamService } from '../../../teams/services/team.service';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\n// Interfaces for dropdown data\r\ninterface User {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  user_type: string;\r\n  email: string;\r\n}\r\n\r\ninterface Asset {\r\n  id: number;\r\n  name: string;\r\n  asset_id: string;\r\n}\r\n\r\ninterface Location {\r\n  id: number;\r\n  name: string;\r\n  slug?: string;\r\n  address?: string;\r\n  description?: string;\r\n  location_type_id: number;\r\n  parent_id?: number;\r\n  company_id: number;\r\n  user_id: number;\r\n  hierarchy_level: number;\r\n  latitude?: number;\r\n  longitude?: number;\r\n  qr_code_path?: string;\r\n  qr_code_url?: string;\r\n  quick_chart_qr_url?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  type: any;\r\n  parent?: Location;\r\n  children?: Location[];\r\n  creator?: any;\r\n  asset_summary?: {\r\n    asset_count: number;\r\n    total_value: number;\r\n  };\r\n}\r\n\r\ninterface Team {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role_id?: number;\r\n  role?: {\r\n    id: number;\r\n    name: string;\r\n    description?: string;\r\n  };\r\n  hourly_rate?: number;\r\n  user_type: 'team';\r\n  company_id: number;\r\n  created_by: number;\r\n  email_verified_at?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-edit-work-order-modal',\r\n  standalone: false,\r\n  templateUrl: './edit-work-order-modal.component.html',\r\n  styleUrls: ['./edit-work-order-modal.component.scss']\r\n})\r\nexport class EditWorkOrderModalComponent implements OnInit {\r\n  @Input() workOrder: WorkOrder | null = null;\r\n  @Input() isOpen = false;\r\n  @Output() modalClosed = new EventEmitter<void>();\r\n  @Output() workOrderUpdated = new EventEmitter<WorkOrder>();\r\n\r\n  editForm!: FormGroup;\r\n  isSubmitting = false;\r\n\r\n  // Getter to safely access the form\r\n  get form(): FormGroup | null {\r\n    return this.editForm || null;\r\n  }\r\n\r\n  // Check if the form is ready to use\r\n  get isFormReady(): boolean {\r\n    return !!(this.editForm && typeof this.editForm.patchValue === 'function');\r\n  }\r\n\r\n  // Safely ensure the form is ready\r\n  private ensureFormReady(): boolean {\r\n    if (!this.isFormReady) {\r\n      console.log('EditWorkOrderModalComponent: Form not ready, initializing now');\r\n      this.initForm();\r\n      return this.isFormReady;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Dropdown data\r\n  users: User[] = [];\r\n  assets: Asset[] = [];\r\n  locations: Location[] = [];\r\n  teams: Team[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private workOrderService: WorkOrderService,\r\n    private assetService: AssetService,\r\n    private locationService: LocationService,\r\n    private teamService: TeamService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    console.log('EditWorkOrderModalComponent: ngOnInit called');\r\n    console.log('EditWorkOrderModalComponent: ngOnInit - workOrder:', !!this.workOrder, 'isOpen:', this.isOpen);\r\n    this.initForm();\r\n    this.loadDropdownData();\r\n    if (this.workOrder && this.isFormReady) {\r\n      console.log('EditWorkOrderModalComponent: WorkOrder found, populating form');\r\n      this.populateForm();\r\n    } else if (this.workOrder) {\r\n      console.log('EditWorkOrderModalComponent: WorkOrder found but form not ready');\r\n    } else {\r\n      console.log('EditWorkOrderModalComponent: No WorkOrder provided');\r\n    }\r\n  }\r\n\r\n  // Removed ngDoCheck as it was called too frequently and could cause performance issues\r\n  // We'll rely on ngOnChanges for detecting input changes instead\r\n\r\n  ngOnChanges(): void {\r\n    // Ensure form is initialized before trying to use it\r\n    if (!this.isFormReady) {\r\n      this.initForm();\r\n\r\n      // Check again after initialization\r\n      if (!this.isFormReady) {\r\n        console.error('EditWorkOrderModalComponent: Form still not ready after initialization in ngOnChanges');\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.workOrder && this.isFormReady) {\r\n      this.populateForm();\r\n    }\r\n\r\n    // Reset form when modal is opened/closed\r\n    if (this.isOpen && this.workOrder) {\r\n      this.resetForm();\r\n      this.populateForm();\r\n    }\r\n  }\r\n\r\n  private resetForm(): void {\r\n    if (!this.isFormReady) {\r\n      this.initForm();\r\n\r\n      // Check again after initialization\r\n      if (!this.isFormReady) {\r\n        console.error('EditWorkOrderModalComponent: Form still not ready after initialization');\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.isFormReady && this.editForm) {\r\n      this.editForm.reset();\r\n      this.editForm.markAsUntouched();\r\n      this.editForm.markAsPristine();\r\n    }\r\n  }\r\n\r\n  private initForm(): void {\r\n\r\n    if (!this.fb) {\r\n      console.error('EditWorkOrderModalComponent: FormBuilder not available');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.editForm = this.fb.group({\r\n        title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(255)]],\r\n        priority: ['', Validators.required],\r\n        due_date: [''],\r\n        description: ['', [Validators.maxLength(1000)]],\r\n        estimated_hours: ['', [Validators.min(0)]],\r\n        notes: [''],\r\n        asset_id: [''],\r\n        location_id: [''],\r\n        assigned_to: ['']\r\n      });\r\n\r\n      console.log('EditWorkOrderModalComponent: Form initialized:', {\r\n        formExists: !!this.editForm,\r\n        formValid: this.editForm.valid,\r\n        formStatus: this.editForm.status,\r\n        formErrors: this.editForm.errors,\r\n        formValues: this.editForm.value,\r\n        formType: typeof this.editForm,\r\n        formConstructor: this.editForm.constructor.name\r\n      });\r\n\r\n      // Verify the form was created properly\r\n      if (!this.editForm || typeof this.editForm.patchValue !== 'function') {\r\n        console.error('EditWorkOrderModalComponent: Form not properly initialized');\r\n        this.editForm = null as any;\r\n        return;\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error('EditWorkOrderModalComponent: Error initializing form:', error);\r\n      this.editForm = null as any;\r\n    }\r\n  }\r\n\r\n  private populateForm(): void {\r\n    if (!this.workOrder) {\r\n      console.log('EditWorkOrderModalComponent: No workOrder to populate form with');\r\n      return;\r\n    }\r\n\r\n    if (!this.isFormReady) {\r\n      console.log('EditWorkOrderModalComponent: Form not ready, initializing first');\r\n      this.initForm();\r\n\r\n      // Check again after initialization\r\n      if (!this.isFormReady) {\r\n        console.error('EditWorkOrderModalComponent: Form still not ready after initialization');\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.log('EditWorkOrderModalComponent: Populating form with workOrder:', this.workOrder);\r\n\r\n    // Convert date strings to Date objects for the form\r\n    const dueDate = this.workOrder.due_date ? new Date(this.workOrder.due_date).toISOString().split('T')[0] : '';\r\n\r\n    const formValues = {\r\n      title: this.workOrder.title || '',\r\n      priority: this.workOrder.priority || '',\r\n      due_date: dueDate,\r\n      description: this.workOrder.description || '',\r\n      estimated_hours: this.workOrder.estimated_hours || '',\r\n      notes: this.workOrder.notes || '',\r\n      asset_id: this.getFieldValue(this.workOrder.asset),\r\n      location_id: this.getFieldValue(this.workOrder.location),\r\n      assigned_to: this.getFieldValue(this.workOrder.assigned_to)\r\n    };\r\n\r\n    console.log('EditWorkOrderModalComponent: Form values to set:', formValues);\r\n    console.log('EditWorkOrderModalComponent: About to call patchValue, editForm exists:', !!this.editForm);\r\n    console.log('EditWorkOrderModalComponent: editForm type:', typeof this.editForm);\r\n    console.log('EditWorkOrderModalComponent: editForm constructor:', this.editForm?.constructor?.name);\r\n\r\n    // Final safety check before calling patchValue\r\n    if (!this.isFormReady) {\r\n      console.error('EditWorkOrderModalComponent: Form not ready for patchValue operation');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.editForm.patchValue(formValues);\r\n      console.log('EditWorkOrderModalComponent: Form populated successfully');\r\n    } catch (error: unknown) {\r\n      console.error('EditWorkOrderModalComponent: Error populating form:', error);\r\n      console.error('EditWorkOrderModalComponent: Error details:', {\r\n        message: error instanceof Error ? error.message : String(error),\r\n        stack: error instanceof Error ? error.stack : undefined,\r\n        editFormExists: !!this.editForm,\r\n        editFormType: typeof this.editForm,\r\n        editFormConstructor: this.editForm?.constructor?.name\r\n      });\r\n      // If there's an error, try to reinitialize the form\r\n      this.initForm();\r\n      try {\r\n        this.editForm.patchValue(formValues);\r\n        console.log('EditWorkOrderModalComponent: Form reinitialized and populated successfully');\r\n      } catch (retryError: unknown) {\r\n        console.error('EditWorkOrderModalComponent: Failed to populate form after reinitialization:', retryError);\r\n      }\r\n    }\r\n\r\n    // Check form state after population\r\n    if (this.isFormReady && this.editForm) {\r\n      console.log('EditWorkOrderModalComponent: Form state after population:', {\r\n        formValid: this.editForm.valid,\r\n        formStatus: this.editForm.status,\r\n        formErrors: this.editForm.errors,\r\n        formValues: this.editForm.value,\r\n        titleControl: {\r\n          value: this.editForm.get('title')?.value,\r\n          valid: this.editForm.get('title')?.valid,\r\n          errors: this.editForm.get('title')?.errors\r\n        },\r\n        priorityControl: {\r\n          value: this.editForm.get('priority')?.value,\r\n          valid: this.editForm.get('priority')?.valid,\r\n          errors: this.editForm.get('priority')?.errors\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private getFieldValue(field: any): any {\r\n    if (!field) return '';\r\n\r\n    // If it's an object with an id property, return the id\r\n    if (typeof field === 'object' && field !== null && 'id' in field) {\r\n      return field.id;\r\n    }\r\n\r\n    // If it's a primitive value (number, string), return it as is\r\n    if (typeof field === 'number' || typeof field === 'string') {\r\n      return field;\r\n    }\r\n\r\n    // Default fallback\r\n    return '';\r\n  }\r\n\r\n  private async loadDropdownData(): Promise<void> {\r\n    try {\r\n      // Load users (team members for assignment)\r\n      const teamsResponse = await firstValueFrom(this.teamService.getTeamMembers());\r\n      this.users = teamsResponse?.data || [];\r\n\r\n      // Load assets\r\n      const assetsResponse = await firstValueFrom(this.assetService.getAssets({ per_page: 100 }));\r\n      this.assets = assetsResponse?.data?.assets || assetsResponse?.data || [];\r\n\r\n      // Load locations\r\n      const locationsResponse = await firstValueFrom(this.locationService.getLocations({ per_page: 100 }));\r\n      this.locations = locationsResponse?.data?.locations || [];\r\n\r\n      // Load team members (teams)\r\n      this.teams = teamsResponse?.data || [];\r\n\r\n    } catch (error: unknown) {\r\n      console.error('Error loading dropdown data:', error);\r\n    }\r\n  }\r\n\r\n  // Form validation helpers\r\n  isFieldInvalid(fieldName: string): boolean {\r\n    if (!this.isFormReady || !this.editForm) {\r\n      return false;\r\n    }\r\n    const field = this.editForm.get(fieldName);\r\n    return !!(field && field.invalid && (field.dirty || field.touched));\r\n  }\r\n\r\n  getFieldError(fieldName: string): string {\r\n    if (!this.isFormReady || !this.editForm) {\r\n      return '';\r\n    }\r\n    const field = this.editForm.get(fieldName);\r\n    if (!field || !field.errors) return '';\r\n\r\n    if (field.errors['required']) {\r\n      return `${this.getFieldLabel(fieldName)} is required`;\r\n    }\r\n    if (field.errors['minlength']) {\r\n      return `${this.getFieldLabel(fieldName)} must be at least ${field.errors['minlength'].requiredLength} characters`;\r\n    }\r\n    if (field.errors['maxlength']) {\r\n      return `${this.getFieldLabel(fieldName)} must not exceed ${field.errors['maxlength'].requiredLength} characters`;\r\n    }\r\n    if (field.errors['min']) {\r\n      return `${this.getFieldLabel(fieldName)} must be at least ${field.errors['min'].min}`;\r\n    }\r\n\r\n    return 'Invalid value';\r\n  }\r\n\r\n  private getFieldLabel(fieldName: string): string {\r\n    const labels: { [key: string]: string } = {\r\n      title: 'Title',\r\n      priority: 'Priority',\r\n      due_date: 'Due Date',\r\n      description: 'Description',\r\n      estimated_hours: 'Estimated Hours',\r\n      notes: 'Notes',\r\n      asset_id: 'Asset',\r\n      location_id: 'Location',\r\n      assigned_to: 'Assigned To'\r\n    };\r\n    return labels[fieldName] || fieldName;\r\n  }\r\n\r\n  hasFieldError(fieldName: string): boolean {\r\n    if (!this.isFormReady || !this.editForm) {\r\n      return false;\r\n    }\r\n    return this.isFieldInvalid(fieldName);\r\n  }\r\n\r\n  isFormModified(): boolean {\r\n    return this.isFormReady && this.editForm ? this.editForm.dirty : false;\r\n  }\r\n\r\n  canSubmit(): boolean {\r\n    if (!this.isFormReady || !this.editForm) {\r\n      return false;\r\n    }\r\n\r\n    const isValid = this.editForm.valid;\r\n    const notSubmitting = !this.isSubmitting;\r\n    const result = isValid && notSubmitting;\r\n\r\n    console.log('EditWorkOrderModalComponent: canSubmit check:', {\r\n      formExists: !!this.editForm,\r\n      formValid: isValid,\r\n      notSubmitting: notSubmitting,\r\n      result: result,\r\n      formErrors: this.editForm.errors,\r\n      formStatus: this.editForm.status\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  async onSubmit(): Promise<void> {\r\n    console.log('EditWorkOrderModalComponent: onSubmit called');\r\n\r\n    // Ensure form is initialized before trying to use it\r\n    if (!this.isFormReady) {\r\n      console.log('EditWorkOrderModalComponent: Form not ready, initializing first');\r\n      this.initForm();\r\n\r\n      // Check again after initialization\r\n      if (!this.isFormReady) {\r\n        console.error('EditWorkOrderModalComponent: Form still not ready after initialization');\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Final safety check before accessing form properties\r\n    if (!this.isFormReady) {\r\n      console.error('EditWorkOrderModalComponent: Form not ready for submission');\r\n      return;\r\n    }\r\n\r\n    console.log('EditWorkOrderModalComponent: Form valid:', this.editForm.valid);\r\n    console.log('EditWorkOrderModalComponent: Form invalid:', this.editForm.invalid);\r\n    console.log('EditWorkOrderModalComponent: isSubmitting:', this.isSubmitting);\r\n    console.log('EditWorkOrderModalComponent: workOrder:', !!this.workOrder);\r\n\r\n    if (this.editForm.invalid || this.isSubmitting || !this.workOrder) {\r\n      console.log('EditWorkOrderModalComponent: Form submission blocked');\r\n      return;\r\n    }\r\n\r\n    console.log('EditWorkOrderModalComponent: Starting form submission');\r\n    this.isSubmitting = true;\r\n\r\n    try {\r\n      const formData = this.editForm.value;\r\n      console.log('EditWorkOrderModalComponent: Form data:', formData);\r\n\r\n      // Prepare the update payload\r\n      const updatePayload = {\r\n        title: formData.title,\r\n        priority: formData.priority,\r\n        due_date: formData.due_date || null,\r\n        description: formData.description || null,\r\n        estimated_hours: formData.estimated_hours || null,\r\n        notes: formData.notes || null,\r\n        asset_id: formData.asset_id || null,\r\n        location_id: formData.location_id || null,\r\n        assigned_to: formData.assigned_to || null\r\n      };\r\n\r\n      console.log('EditWorkOrderModalComponent: Update payload:', updatePayload);\r\n\r\n      // Update the work order\r\n      const updatedWorkOrder = await firstValueFrom(this.workOrderService.updateWorkOrder(this.workOrder.id, updatePayload));\r\n\r\n      if (updatedWorkOrder) {\r\n        this.workOrderUpdated.emit(updatedWorkOrder);\r\n        this.closeModal();\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error('Error updating work order:', error);\r\n\r\n      // Handle specific error cases\r\n      if (error && typeof error === 'object' && 'error' in error && error.error && typeof error.error === 'object' && 'message' in error.error) {\r\n        // Show error message to user\r\n        console.error('API Error:', (error.error as any).message);\r\n      } else if (error instanceof Error && error.message) {\r\n        console.error('Network Error:', error.message);\r\n      }\r\n    } finally {\r\n      this.isSubmitting = false;\r\n    }\r\n  }\r\n\r\n  closeModal(): void {\r\n    // Check if form has unsaved changes\r\n    if (this.isFormModified()) {\r\n      if (confirm('You have unsaved changes. Are you sure you want to close?')) {\r\n        this.resetForm();\r\n        this.modalClosed.emit();\r\n      }\r\n    } else {\r\n      this.modalClosed.emit();\r\n    }\r\n  }\r\n\r\n  // Prevent modal from closing when clicking inside the modal content\r\n  onModalContentClick(event: Event): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n", "<div class=\"modal-overlay\" *ngIf=\"isOpen\" (click)=\"closeModal()\">\r\n  <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n    <!-- Modal Header -->\r\n    <div class=\"modal-header\">\r\n      <h2 class=\"modal-title\">\r\n        <svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"></path>\r\n        </svg>\r\n        Edit Work Order\r\n      </h2>\r\n      <button class=\"close-btn\" (click)=\"closeModal()\" type=\"button\">\r\n        <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Modal Body -->\r\n    <div class=\"modal-body\">\r\n      <!-- Loading state while form is being initialized -->\r\n      <div *ngIf=\"!isFormReady\" class=\"loading-state\">\r\n        <div class=\"spinner\"></div>\r\n        <p>Loading form...</p>\r\n      </div>\r\n      \r\n      <form *ngIf=\"isFormReady\" [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\" class=\"edit-form\">\r\n        <!-- Basic Information -->\r\n        <div class=\"form-section\">\r\n          <h3 class=\"section-title\">Basic Information</h3>\r\n          \r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\">\r\n              <label for=\"title\" class=\"form-label\">Title *</label>\r\n              <input\r\n                id=\"title\"\r\n                type=\"text\"\r\n                formControlName=\"title\"\r\n                class=\"form-input\"\r\n                placeholder=\"Enter work order title\"\r\n                [class.error]=\"isFieldInvalid('title')\"\r\n              />\r\n              <div *ngIf=\"isFieldInvalid('title')\" class=\"error-message\">\r\n                {{ getFieldError('title') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\">\r\n              <label for=\"priority\" class=\"form-label\">Priority *</label>\r\n              <select\r\n                id=\"priority\"\r\n                formControlName=\"priority\"\r\n                class=\"form-select\"\r\n                [class.error]=\"isFieldInvalid('priority')\"\r\n              >\r\n                <option value=\"\">Select Priority</option>\r\n                <option value=\"low\">Low</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"high\">High</option>\r\n                <option value=\"critical\">Critical</option>\r\n                <option value=\"urgent\">Urgent</option>\r\n              </select>\r\n              <div *ngIf=\"isFieldInvalid('priority')\" class=\"error-message\">\r\n                {{ getFieldError('priority') }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('due_date')\">\r\n              <label for=\"due_date\" class=\"form-label\">Due Date</label>\r\n              <input\r\n                id=\"due_date\"\r\n                type=\"date\"\r\n                formControlName=\"due_date\"\r\n                class=\"form-input\"\r\n                [class.error-input]=\"hasFieldError('due_date')\"\r\n              />\r\n              <div *ngIf=\"hasFieldError('due_date')\" class=\"error-message\">\r\n                {{ getFieldError('due_date') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('description')\">\r\n              <label for=\"description\" class=\"form-label\">Description</label>\r\n              <textarea\r\n                id=\"description\"\r\n                formControlName=\"description\"\r\n                class=\"form-textarea\"\r\n                placeholder=\"Enter work order description\"\r\n                rows=\"3\"\r\n                [class.error-input]=\"hasFieldError('description')\"\r\n              ></textarea>\r\n              <div *ngIf=\"hasFieldError('description')\" class=\"error-message\">\r\n                {{ getFieldError('description') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('estimated_hours')\">\r\n              <label for=\"estimated_hours\" class=\"form-label\">Estimated Hours</label>\r\n              <input\r\n                id=\"estimated_hours\"\r\n                type=\"number\"\r\n                formControlName=\"estimated_hours\"\r\n                class=\"form-input\"\r\n                placeholder=\"0.0\"\r\n                min=\"0\"\r\n                step=\"0.5\"\r\n                [class.error-input]=\"hasFieldError('estimated_hours')\"\r\n              />\r\n              <div *ngIf=\"hasFieldError('estimated_hours')\" class=\"error-message\">\r\n                {{ getFieldError('estimated_hours') }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('notes')\">\r\n              <label for=\"notes\" class=\"form-label\">Notes</label>\r\n              <textarea\r\n                id=\"notes\"\r\n                formControlName=\"notes\"\r\n                class=\"form-textarea\"\r\n                placeholder=\"Additional notes or instructions\"\r\n                rows=\"3\"\r\n                [class.error-input]=\"hasFieldError('notes')\"\r\n              ></textarea>\r\n              <div *ngIf=\"hasFieldError('notes')\" class=\"error-message\">\r\n                {{ getFieldError('notes') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Assignment & Asset -->\r\n        <div class=\"form-section\">\r\n          <h3 class=\"section-title\">Assignment & Asset</h3>\r\n          \r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('asset_id')\">\r\n              <label for=\"asset_id\" class=\"form-label\">Asset</label>\r\n              <select\r\n                id=\"asset_id\"\r\n                formControlName=\"asset_id\"\r\n                class=\"form-select\"\r\n                [class.error-input]=\"hasFieldError('asset_id')\"\r\n              >\r\n                <option value=\"\">Select Asset</option>\r\n                <option *ngFor=\"let asset of assets\" [value]=\"asset.id\">\r\n                  {{ asset.name }} ({{ asset.asset_id }})\r\n                </option>\r\n              </select>\r\n              <div *ngIf=\"hasFieldError('asset_id')\" class=\"error-message\">\r\n                {{ getFieldError('asset_id') }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('location_id')\">\r\n              <label for=\"location_id\" class=\"form-label\">Location</label>\r\n              <select\r\n                id=\"location_id\"\r\n                formControlName=\"location_id\"\r\n                class=\"form-select\"\r\n                [class.error-input]=\"hasFieldError('location_id')\"\r\n              >\r\n                <option value=\"\">Select Location</option>\r\n                <option *ngFor=\"let location of locations\" [value]=\"location.id\">\r\n                  {{ location.name }}\r\n                </option>\r\n              </select>\r\n              <div *ngIf=\"hasFieldError('location_id')\" class=\"error-message\">\r\n                {{ getFieldError('location_id') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('assigned_to')\">\r\n              <label for=\"assigned_to\" class=\"form-label\">Assign To Team Member (Optional)</label>\r\n              <select\r\n                id=\"assigned_to\"\r\n                formControlName=\"assigned_to\"\r\n                class=\"form-select\"\r\n                [class.error-input]=\"hasFieldError('assigned_to')\"\r\n              >\r\n                <option value=\"\">Select Assignee</option>\r\n                <option *ngFor=\"let user of users\" [value]=\"user.id\">\r\n                  {{ user.first_name }} {{ user.last_name }}\r\n                </option>\r\n              </select>\r\n              <div *ngIf=\"hasFieldError('assigned_to')\" class=\"error-message\">\r\n                {{ getFieldError('assigned_to') }}\r\n              </div>\r\n              <div class=\"field-help\">\r\n                <small>Select an existing team member to assign the work order to</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Modal Footer -->\r\n    <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeModal()\">\r\n        Cancel\r\n      </button>\r\n      <button \r\n        type=\"button\" \r\n        class=\"btn btn-primary\" \r\n        (click)=\"onSubmit()\"\r\n        [disabled]=\"!canSubmit()\"\r\n      >\r\n        <svg *ngIf=\"isSubmitting\" class=\"w-4 h-4 mr-2 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n          <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n          <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n        </svg>\r\n        {{ isSubmitting ? 'Updating...' : 'Update Work Order' }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\r\nimport { WorkOrderService, WorkOrder, WorkOrderListResponse } from '../../services/work-order.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { EditWorkOrderModalComponent } from '../edit-work-order-modal/edit-work-order-modal.component';\r\n\r\n// Interfaces for nested objects\r\ninterface User {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  user_type: string;\r\n  email: string;\r\n}\r\n\r\ninterface Asset {\r\n  id: number;\r\n  name: string;\r\n  asset_id: string;\r\n}\r\n\r\ninterface Location {\r\n  id: number;\r\n  name: string;\r\n  full_path: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-work-order-list',\r\n  standalone: false,\r\n  templateUrl: './work-order-list.component.html',\r\n  styleUrls: ['./work-order-list.component.scss']\r\n})\r\nexport class WorkOrderListComponent implements OnInit, OnDestroy {\r\n  @Output() createWorkOrderRequested = new EventEmitter<void>();\r\n\r\n  workOrders: any[] = [];\r\n  viewMode: 'grid' | 'list' = 'grid';\r\n  isLoading = true;\r\n\r\n  // Edit modal properties\r\n  isEditModalOpen = false;\r\n  selectedWorkOrder: any = null;\r\n\r\n  // Pagination properties\r\n  currentPage = 1;\r\n  perPage = 10;\r\n  total = 0;\r\n  totalPages = 0;\r\n\r\n  // Bulk operations properties\r\n  selectedWorkOrders: Set<number> = new Set();\r\n  isBulkMode = false;\r\n  showBulkActions = false;\r\n  bulkAction = '';\r\n  bulkTargetUser: number | null = null;\r\n  bulkStatus: string = '';\r\n  bulkPriority: string = '';\r\n  // Delete modal state (align with Asset delete flow)\r\n  showDeleteConfirmationModal = false;\r\n\r\n  // Math object for template access\r\n  Math = Math;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(private workOrderService: WorkOrderService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadWorkOrders();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  // Method to test empty state (remove in production)\r\n  testEmptyState(): void {\r\n    this.workOrders = [];\r\n    this.total = 0;\r\n    this.currentPage = 1;\r\n    this.totalPages = 0;\r\n    this.isLoading = false;\r\n    console.log('WorkOrderListComponent: Empty state triggered manually');\r\n  }\r\n\r\n  // Method to get current state for debugging (remove in production)\r\n  getCurrentState(): any {\r\n    return {\r\n      workOrders: this.workOrders,\r\n      workOrdersLength: this.workOrders?.length,\r\n      isLoading: this.isLoading,\r\n      total: this.total,\r\n      currentPage: this.currentPage,\r\n      totalPages: this.totalPages\r\n    };\r\n  }\r\n\r\n  loadWorkOrders(page: number = 1, filters?: any): void {\r\n    this.isLoading = true;\r\n    this.currentPage = page;\r\n\r\n    const params: any = {\r\n      page: this.currentPage,\r\n      per_page: this.perPage\r\n    };\r\n\r\n    // Apply filters if provided\r\n    if (filters) {\r\n      if (filters.search && filters.search.trim()) {\r\n        params.search = filters.search.trim();\r\n      }\r\n      // Use *_id fields coming from filters component\r\n      if (filters.status_id) {\r\n        params.status_id = filters.status_id;\r\n      }\r\n      if (filters.priority_id) {\r\n        params.priority_id = filters.priority_id;\r\n      }\r\n      if (filters.category_id) {\r\n        params.category_id = filters.category_id;\r\n      }\r\n      if (filters.asset_id && filters.asset_id !== '') {\r\n        params.asset_id = filters.asset_id;\r\n      }\r\n      if (filters.location_id && filters.location_id !== '') {\r\n        params.location_id = filters.location_id;\r\n      }\r\n      if (filters.assigned_to && filters.assigned_to !== '') {\r\n        params.assigned_to = filters.assigned_to;\r\n      }\r\n      if (filters.is_overdue !== undefined && filters.is_overdue !== false) {\r\n        params.is_overdue = filters.is_overdue;\r\n      }\r\n      if (filters.start_date && filters.start_date !== '') {\r\n        params.start_date = filters.start_date;\r\n      }\r\n      if (filters.end_date && filters.end_date !== '') {\r\n        params.end_date = filters.end_date;\r\n      }\r\n      if (filters.due_start_date && filters.due_start_date !== '') {\r\n        params.due_start_date = filters.due_start_date;\r\n      }\r\n      if (filters.due_end_date && filters.due_end_date !== '') {\r\n        params.due_end_date = filters.due_end_date;\r\n      }\r\n      if (filters.sortBy) {\r\n        params.sort_by = filters.sortBy;\r\n      }\r\n      if (filters.sortOrder) {\r\n        params.sort_dir = filters.sortOrder;\r\n      }\r\n    }\r\n\r\n    this.subscription.add(\r\n      this.workOrderService.getWorkOrders(params).subscribe({\r\n        next: (response: any) => {\r\n          // Fix: The API returns { data: [...], current_page: 1, total: 1 }\r\n          // So response.data is the array of work orders\r\n          this.workOrders = response.data.data || [];\r\n          this.total = response.total || 0;\r\n          this.currentPage = response.current_page || 1;\r\n          this.perPage = response.per_page || 10;\r\n          this.totalPages = response.last_page || 1;\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('WorkOrderListComponent: Error loading work orders:', error);\r\n          this.workOrders = [];\r\n          this.isLoading = false;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  setViewMode(mode: 'grid' | 'list') {\r\n    this.viewMode = mode;\r\n  }\r\n\r\n  refreshWorkOrders(): void {\r\n    this.loadWorkOrders(this.currentPage);\r\n  }\r\n\r\n  onFiltersChanged(filters: any): void {\r\n    console.log('WorkOrderListComponent: Filters changed:', filters);\r\n    // Reset to first page when filters change\r\n    this.loadWorkOrders(1, filters);\r\n  }\r\n\r\n  createWorkOrder(): void {\r\n    this.createWorkOrderRequested.emit();\r\n  }\r\n\r\n  goToPage(page: number): void {\r\n    if (page >= 1 && page <= this.totalPages) {\r\n      this.loadWorkOrders(page);\r\n    }\r\n  }\r\n\r\n  getPageNumbers(): number[] {\r\n    const pages: number[] = [];\r\n    const maxVisiblePages = 5;\r\n\r\n    if (this.totalPages <= maxVisiblePages) {\r\n      // Show all pages if total is small\r\n      for (let i = 1; i <= this.totalPages; i++) {\r\n        pages.push(i);\r\n      }\r\n    } else {\r\n      // Show pages around current page\r\n      let start = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));\r\n      let end = Math.min(this.totalPages, start + maxVisiblePages - 1);\r\n\r\n      // Adjust start if we're near the end\r\n      if (end - start + 1 < maxVisiblePages) {\r\n        start = Math.max(1, end - maxVisiblePages + 1);\r\n      }\r\n\r\n      for (let i = start; i <= end; i++) {\r\n        pages.push(i);\r\n      }\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  // Helper methods for list view\r\n  getStatusLabel(status: string): string {\r\n    const statusMap: { [key: string]: string } = {\r\n      'open': 'Open',\r\n      'in_progress': 'In Progress',\r\n      'completed': 'Completed',\r\n      'cancelled': 'Cancelled',\r\n      'pending': 'Pending'\r\n    };\r\n    return statusMap[status] || status;\r\n  }\r\n\r\n  getPriorityLabel(priority: string): string {\r\n    const priorityMap: { [key: string]: string } = {\r\n      'low': 'Low',\r\n      'medium': 'Medium',\r\n      'high': 'High',\r\n      'critical': 'Critical'\r\n    };\r\n    return priorityMap[priority] || priority;\r\n  }\r\n\r\n  // Bulk operations methods\r\n  toggleBulkMode(): void {\r\n    this.isBulkMode = !this.isBulkMode;\r\n    if (!this.isBulkMode) {\r\n      this.selectedWorkOrders.clear();\r\n      this.showBulkActions = false;\r\n    }\r\n  }\r\n\r\n  toggleWorkOrderSelection(workOrderId: number): void {\r\n    if (this.selectedWorkOrders.has(workOrderId)) {\r\n      this.selectedWorkOrders.delete(workOrderId);\r\n    } else {\r\n      this.selectedWorkOrders.add(workOrderId);\r\n    }\r\n    this.showBulkActions = this.selectedWorkOrders.size > 0;\r\n  }\r\n\r\n  onCardSelectionChanged(event: { workOrderId: number; selected: boolean }): void {\r\n    const { workOrderId, selected } = event;\r\n    if (selected) {\r\n      this.selectedWorkOrders.add(workOrderId);\r\n    } else {\r\n      this.selectedWorkOrders.delete(workOrderId);\r\n    }\r\n    this.showBulkActions = this.selectedWorkOrders.size > 0;\r\n  }\r\n\r\n  selectAllWorkOrders(): void {\r\n    this.workOrders.forEach(wo => this.selectedWorkOrders.add(wo.id));\r\n    this.showBulkActions = true;\r\n  }\r\n\r\n  deselectAllWorkOrders(): void {\r\n    this.selectedWorkOrders.clear();\r\n    this.showBulkActions = false;\r\n  }\r\n\r\n  getSelectedCount(): number {\r\n    return this.selectedWorkOrders.size;\r\n  }\r\n\r\n  isAllSelected(): boolean {\r\n    return this.workOrders.length > 0 && this.selectedWorkOrders.size === this.workOrders.length;\r\n  }\r\n\r\n  isPartiallySelected(): boolean {\r\n    return this.selectedWorkOrders.size > 0 && this.selectedWorkOrders.size < this.workOrders.length;\r\n  }\r\n\r\n  toggleSelectAll(): void {\r\n    if (this.isAllSelected()) {\r\n      this.deselectAllWorkOrders();\r\n    } else {\r\n      this.selectAllWorkOrders();\r\n    }\r\n  }\r\n\r\n  // Bulk status update\r\n  updateBulkStatus(status: string): void {\r\n    if (this.selectedWorkOrders.size === 0) return;\r\n\r\n    const workOrderIds = Array.from(this.selectedWorkOrders);\r\n    const updates = workOrderIds.map(id => ({\r\n      id,\r\n      status\r\n    }));\r\n\r\n    // Here you would call the bulk update API\r\n    console.log('Bulk status update:', updates);\r\n    \r\n    // For now, just refresh the list\r\n    this.refreshWorkOrders();\r\n    this.selectedWorkOrders.clear();\r\n    this.showBulkActions = false;\r\n  }\r\n\r\n  // Bulk priority update\r\n  updateBulkPriority(priority: string): void {\r\n    if (this.selectedWorkOrders.size === 0) return;\r\n\r\n    const workOrderIds = Array.from(this.selectedWorkOrders);\r\n    const updates = workOrderIds.map(id => ({\r\n      id,\r\n      priority\r\n    }));\r\n\r\n    // Here you would call the bulk update API\r\n    console.log('Bulk priority update:', updates);\r\n    \r\n    // For now, just refresh the list\r\n    this.refreshWorkOrders();\r\n    this.selectedWorkOrders.clear();\r\n    this.showBulkActions = false;\r\n  }\r\n\r\n  // Bulk assignment\r\n  assignBulkWorkOrders(userId: number): void {\r\n    if (this.selectedWorkOrders.size === 0) return;\r\n\r\n    const workOrderIds = Array.from(this.selectedWorkOrders);\r\n    const updates = workOrderIds.map(id => ({\r\n      id,\r\n      assigned_to: userId\r\n    }));\r\n\r\n    // Here you would call the bulk update API\r\n    console.log('Bulk assignment update:', updates);\r\n    \r\n    // For now, just refresh the list\r\n    this.refreshWorkOrders();\r\n    this.selectedWorkOrders.clear();\r\n    this.showBulkActions = false;\r\n  }\r\n\r\n  // Bulk delete\r\n  deleteBulkWorkOrders(): void {\r\n    if (this.selectedWorkOrders.size === 0) return;\r\n\r\n    if (confirm(`Are you sure you want to delete ${this.selectedWorkOrders.size} work order(s)?`)) {\r\n      const workOrderIds = Array.from(this.selectedWorkOrders);\r\n      \r\n      // Here you would call the bulk delete API\r\n      console.log('Bulk delete:', workOrderIds);\r\n      \r\n      // For now, just refresh the list\r\n      this.refreshWorkOrders();\r\n      this.selectedWorkOrders.clear();\r\n      this.showBulkActions = false;\r\n    }\r\n  }\r\n\r\n  getAssigneeName(workOrder: any): string {\r\n    if (workOrder.assigned_to) {\r\n      if (typeof workOrder.assigned_to === 'object' && workOrder.assigned_to !== null) {\r\n        const assignedTo = workOrder.assigned_to as User;\r\n        const firstName = assignedTo.first_name || '';\r\n        const lastName = assignedTo.last_name || '';\r\n        return `${firstName} ${lastName}`.trim() || 'Unassigned';\r\n      }\r\n      return String(workOrder.assigned_to);\r\n    }\r\n    return 'Unassigned';\r\n  }\r\n\r\n  getAssetName(workOrder: any): string {\r\n    if (workOrder.asset) {\r\n      if (typeof workOrder.asset === 'object' && workOrder.asset !== null) {\r\n        const asset = workOrder.asset as Asset;\r\n        return asset.name || asset.asset_id || 'No Asset';\r\n      }\r\n      return String(workOrder.asset);\r\n    }\r\n    return 'No Asset';\r\n  }\r\n\r\n  getLocationName(workOrder: any): string {\r\n    if (workOrder.location) {\r\n      if (typeof workOrder.location === 'object' && workOrder.location !== null) {\r\n        const location = workOrder.location as Location;\r\n        return location.name || location.full_path || 'No Location';\r\n      }\r\n      return String(workOrder.location);\r\n    }\r\n    return 'No Location';\r\n  }\r\n\r\n  viewWorkOrderDetails(workOrder: any): void {\r\n    // Navigate to work order details\r\n    console.log('Viewing work order:', workOrder);\r\n    // TODO: Implement navigation to work order details page\r\n  }\r\n\r\n  editWorkOrder(workOrder: any): void {\r\n    // Open edit modal\r\n    this.selectedWorkOrder = workOrder;\r\n    this.isEditModalOpen = true;\r\n  }\r\n\r\n  deleteWorkOrder(workOrder: WorkOrder): void {\r\n    if (!workOrder?.id) { return; }\r\n    // Match asset flow: select the item and open confirmation modal\r\n    this.selectedWorkOrders.clear();\r\n    this.selectedWorkOrders.add(workOrder.id);\r\n    this.showDeleteConfirmationModal = true;\r\n  }\r\n\r\n  closeDeleteModal(): void {\r\n    this.showDeleteConfirmationModal = false;\r\n  }\r\n\r\n  openDeleteModalForSelected(): void {\r\n    if (this.selectedWorkOrders.size === 0) {\r\n      return;\r\n    }\r\n    this.showDeleteConfirmationModal = true;\r\n  }\r\n\r\n  deleteSelected(deletionReason?: string): void {\r\n    // deletionReason is currently unused for work orders, but accepted to mirror asset delete API\r\n    const ids = Array.from(this.selectedWorkOrders);\r\n    if (ids.length === 0) {\r\n      this.showDeleteConfirmationModal = false;\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    let completed = 0;\r\n    const finalize = () => {\r\n      completed++;\r\n      if (completed >= ids.length) {\r\n        this.showDeleteConfirmationModal = false;\r\n        this.selectedWorkOrders.clear();\r\n        this.loadWorkOrders(this.currentPage);\r\n      }\r\n    };\r\n    ids.forEach((id) => {\r\n      this.subscription.add(\r\n        this.workOrderService.deleteWorkOrder(id).subscribe({\r\n          next: () => finalize(),\r\n          error: (error) => {\r\n            console.error('Failed to delete work order:', error);\r\n            finalize();\r\n          }\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  closeEditModal(): void {\r\n    this.isEditModalOpen = false;\r\n    this.selectedWorkOrder = null;\r\n  }\r\n\r\n  onWorkOrderUpdated(updatedWorkOrder: WorkOrder): void {\r\n    // Update the work order in the list\r\n    const index = this.workOrders.findIndex(wo => wo.id === updatedWorkOrder.id);\r\n    if (index !== -1) {\r\n      this.workOrders[index] = updatedWorkOrder;\r\n    }\r\n\r\n    // Close the modal\r\n    this.closeEditModal();\r\n\r\n    // Show success message (optional)\r\n    console.log('Work order updated successfully:', updatedWorkOrder);\r\n  }\r\n}\r\n", "<div class=\"list-section\">\r\n  <!-- Loading State -->\r\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\r\n    <div class=\"loading-skeleton\">\r\n      <div class=\"skeleton-header\"></div>\r\n      <div class=\"skeleton-filters\"></div>\r\n      <div class=\"skeleton-cards\">\r\n        <div class=\"skeleton-card\" *ngFor=\"let item of [1,2,3,4,5,6]\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Filters are always rendered so selections persist during loading -->\r\n  <app-work-order-filters (filtersChanged)=\"onFiltersChanged($event)\"></app-work-order-filters>\r\n\r\n  <!-- Work Orders Content -->\r\n  <div *ngIf=\"!isLoading\">\r\n    <div class=\"list-header\">\r\n      <div class=\"orders-count flex items-center gap-2\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-5\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-.952 4.125 4.125 0 0 0-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 0 1 8.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 1 1 11.964-3.07M12 6.375a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm8.25 2.25a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z\" />\r\n        </svg>\r\n        {{ workOrders.length }} work orders\r\n        <span *ngIf=\"getSelectedCount() > 0\" class=\"selected-count\">\r\n          ({{ getSelectedCount() }} selected)\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Bulk Operations -->\r\n      <div class=\"bulk-operations\" *ngIf=\"isBulkMode\">\r\n        <div class=\"bulk-selection\">\r\n          <label class=\"select-all-label\">\r\n            <input \r\n              type=\"checkbox\" \r\n              [checked]=\"isAllSelected()\"\r\n              [indeterminate]=\"isPartiallySelected()\"\r\n              (change)=\"toggleSelectAll()\"\r\n              class=\"select-all-checkbox\">\r\n            <span class=\"select-all-text\">Select All</span>\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"bulk-actions\" *ngIf=\"showBulkActions\">\r\n          <div class=\"bulk-action-group\">\r\n            <button \r\n              class=\"bulk-action-btn\"\r\n              (click)=\"updateBulkStatus('open')\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n              </svg>\r\n              Set Open\r\n            </button>\r\n            <button \r\n              class=\"bulk-action-btn\"\r\n              (click)=\"updateBulkStatus('in_progress')\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n              </svg>\r\n              Set In Progress\r\n            </button>\r\n            <button \r\n              class=\"bulk-action-btn\"\r\n              (click)=\"updateBulkStatus('completed')\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n              </svg>\r\n              Set Completed\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"bulk-action-group\">\r\n            <button \r\n              class=\"bulk-action-btn\"\r\n              (click)=\"updateBulkPriority('high')\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n              </svg>\r\n              Set High Priority\r\n            </button>\r\n            <button \r\n              class=\"bulk-action-btn\"\r\n              (click)=\"updateBulkPriority('critical')\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\r\n              </svg>\r\n              Set Critical\r\n            </button>\r\n          </div>\r\n\r\n          <button \r\n            class=\"bulk-delete-btn\"\r\n            (click)=\"deleteBulkWorkOrders()\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"></path>\r\n            </svg>\r\n            Delete Selected\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"header-actions\">\r\n        <button\r\n          class=\"bulk-delete-btn\"\r\n          [disabled]=\"getSelectedCount() === 0\"\r\n          (click)=\"openDeleteModalForSelected()\"\r\n          title=\"Delete Selected\">\r\n          <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" stroke-width=\"2\"/>\r\n            <path d=\"M8 8l8 8M8 16l8-8\" stroke-width=\"2\"/>\r\n          </svg>\r\n          Delete\r\n        </button>\r\n        <!-- Bulk Mode Toggle -->\r\n        <button\r\n          class=\"bulk-mode-btn\"\r\n          [class.active]=\"isBulkMode\"\r\n          (click)=\"toggleBulkMode()\"\r\n          title=\"Bulk Operations\">\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"></path>\r\n          </svg>\r\n          Bulk\r\n        </button>\r\n\r\n        <button\r\n          class=\"refresh-btn\"\r\n          (click)=\"refreshWorkOrders()\"\r\n          title=\"Refresh\"\r\n          [disabled]=\"isLoading\">\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n          </svg>\r\n        </button>\r\n\r\n        <div class=\"view-toggle\">\r\n          <button\r\n            class=\"view-btn\"\r\n            [class.active]=\"viewMode === 'grid'\"\r\n            (click)=\"setViewMode('grid')\"\r\n            title=\"Grid View\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\"></path>\r\n            </svg>\r\n          </button>\r\n          <button\r\n            class=\"view-btn\"\r\n            [class.active]=\"viewMode === 'list'\"\r\n            (click)=\"setViewMode('list')\"\r\n            title=\"List View\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Empty State -->\r\n    <div class=\"empty-state\" *ngIf=\"workOrders.length === 0\">\r\n      <div class=\"empty-content\">\r\n        <div class=\"empty-icon\">\r\n          <svg class=\"w-20 h-20\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n          </svg>\r\n        </div>\r\n        <div class=\"empty-text\">\r\n          <h3 class=\"empty-title\">No work orders found</h3>\r\n          <p class=\"empty-description\">Get started by creating your first work order to streamline your maintenance workflows.</p>\r\n        </div>\r\n        <div class=\"empty-actions\">\r\n          <button class=\"btn btn-primary\" (click)=\"createWorkOrder()\">\r\n            <svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\"></path>\r\n            </svg>\r\n            Create Work Order\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Work Orders Grid View -->\r\n    <div *ngIf=\"workOrders.length > 0 && viewMode === 'grid'\" class=\"work-orders-grid\">\r\n      <app-work-order-card\r\n        *ngFor=\"let workOrder of workOrders\"\r\n        [workOrder]=\"workOrder\"\r\n        [showBulkSelection]=\"true\"\r\n        [isSelected]=\"selectedWorkOrders.has(workOrder.id)\"\r\n        (editRequested)=\"editWorkOrder($event)\"\r\n        (deleteRequested)=\"deleteWorkOrder($event)\"\r\n        (selectionChanged)=\"onCardSelectionChanged($event)\"\r\n        class=\"work-order-card-item\">\r\n      </app-work-order-card>\r\n    </div>\r\n\r\n    <!-- Work Orders List View -->\r\n    <div *ngIf=\"workOrders.length > 0 && viewMode === 'list'\" class=\"work-orders-list\">\r\n      <!-- Table Header -->\r\n      <div class=\"list-table-header\">\r\n        <div class=\"list-table-row\">\r\n          <div class=\"list-table-cell header-cell\">Work Order</div>\r\n          <div class=\"list-table-cell header-cell\">Status & Priority</div>\r\n          <div class=\"list-table-cell header-cell\">Assignee & Asset</div>\r\n          <div class=\"list-table-cell header-cell\">Location</div>\r\n          <div class=\"list-table-cell header-cell\">Due Date</div>\r\n          <div class=\"list-table-cell header-cell\">Created</div>\r\n          <div class=\"list-table-cell header-cell\">Actions</div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Table Body -->\r\n      <div class=\"list-table-body\">\r\n        <div *ngFor=\"let workOrder of workOrders\" class=\"list-table-row hover:bg-gray-50\">\r\n          <div class=\"list-table-cell\">\r\n            <div class=\"work-order-info\">\r\n              <div class=\"work-order-icon\">\r\n                <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path>\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n                </svg>\r\n              </div>\r\n              <div class=\"work-order-details\">\r\n                <div class=\"work-order-title\">{{ workOrder.title }}</div>\r\n                <div class=\"work-order-description\" *ngIf=\"workOrder.description\">{{ workOrder.description }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"list-table-cell\">\r\n            <div class=\"badges-container\">\r\n              <span class=\"badge status-badge\" [ngClass]=\"'status-' + workOrder.status\">\r\n                {{ getStatusLabel(workOrder.status) }}\r\n              </span>\r\n              <span class=\"badge priority-badge\" [ngClass]=\"'priority-' + workOrder.priority\">\r\n                {{ getPriorityLabel(workOrder.priority) }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"list-table-cell\">\r\n            <div class=\"assignee-asset-info\">\r\n              <div class=\"info-item\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path>\r\n                </svg>\r\n                <span>{{ getAssigneeName(workOrder) }}</span>\r\n              </div>\r\n              <div class=\"info-item\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-14V4a2 2 0 00-2-2H6a2 2 0 00-2 2v3m16 0H4\"></path>\r\n                </svg>\r\n                <span>{{ getAssetName(workOrder) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"list-table-cell\">\r\n            <div class=\"location-info\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n              </svg>\r\n              <span>{{ getLocationName(workOrder) }}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"list-table-cell\">\r\n            <div class=\"due-date-info\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"></path>\r\n              </svg>\r\n              <span>{{ workOrder.due_date ? (workOrder.due_date | date:'MMM d, y') : 'Not set' }}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"list-table-cell\">\r\n            <div class=\"created-info\">\r\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n              </svg>\r\n              <span>{{ workOrder.created_at | date:'MMM d, y' }}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"list-table-cell\">\r\n            <div class=\"actions-container\">\r\n              <button class=\"action-btn view-btn\" (click)=\"viewWorkOrderDetails(workOrder)\" title=\"View Details\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"></path>\r\n                </svg>\r\n              </button>\r\n              <button class=\"action-btn edit-btn\" (click)=\"editWorkOrder(workOrder)\" title=\"Edit Work Order\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"></path>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Pagination -->\r\n    <div *ngIf=\"workOrders.length > 0 && totalPages > 1\" class=\"pagination-container\">\r\n      <div class=\"pagination-info\">\r\n        Showing {{ (currentPage - 1) * perPage + 1 }} to {{ Math.min(currentPage * perPage, total) }} of {{ total }} results\r\n      </div>\r\n      <div class=\"pagination-controls\">\r\n        <button\r\n          class=\"pagination-btn\"\r\n          [disabled]=\"currentPage === 1\"\r\n          (click)=\"goToPage(currentPage - 1)\">\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\"></path>\r\n          </svg>\r\n          Previous\r\n        </button>\r\n\r\n        <div class=\"page-numbers\">\r\n          <button\r\n            *ngFor=\"let page of getPageNumbers()\"\r\n            class=\"page-number\"\r\n            [class.active]=\"page === currentPage\"\r\n            (click)=\"goToPage(page)\">\r\n            {{ page }}\r\n          </button>\r\n        </div>\r\n\r\n        <button\r\n          class=\"pagination-btn\"\r\n          [disabled]=\"currentPage === totalPages\"\r\n          (click)=\"goToPage(currentPage + 1)\">\r\n          Next\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <!-- Delete Confirmation Modal (shared) -->\r\n    <app-delete-confirmation-modal\r\n      [isOpen]=\"showDeleteConfirmationModal\"\r\n      [selectedCount]=\"selectedWorkOrders.size\"\r\n      [entitySingular]=\"'Work Order'\"\r\n      [entityPlural]=\"'Work Orders'\"\r\n      [warningText]=\"null\"\r\n      (closeModal)=\"closeDeleteModal()\"\r\n      (confirmDelete)=\"deleteSelected($event)\">\r\n    </app-delete-confirmation-modal>\r\n  </div>\r\n</div>\r\n\r\n<!-- Edit Work Order Modal -->\r\n<app-edit-work-order-modal\r\n  *ngIf=\"isEditModalOpen\"\r\n  [workOrder]=\"selectedWorkOrder\"\r\n  [isOpen]=\"isEditModalOpen\"\r\n  (modalClosed)=\"closeEditModal()\"\r\n  (workOrderUpdated)=\"onWorkOrderUpdated($event)\">\r\n</app-edit-work-order-modal>\r\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { WorkOrderService, WorkOrderStatistics } from '../../services/work-order.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-work-order-stats',\r\n  standalone: false,\r\n  templateUrl: './work-order-stats.component.html',\r\n  styleUrls: ['./work-order-stats.component.scss']\r\n})\r\nexport class WorkOrderStatsComponent implements OnInit, OnDestroy {\r\n  stats: WorkOrderStatistics | null = null;\r\n  isLoading = true;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(private workOrderService: WorkOrderService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadStats();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  loadStats(): void {\r\n    this.isLoading = true;\r\n    \r\n    this.subscription.add(\r\n      this.workOrderService.getWorkOrderStatistics().subscribe({\r\n        next: (stats) => {\r\n          console.log('Work order stats loaded:', stats);\r\n          this.stats = stats;\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading stats:', error);\r\n          this.isLoading = false;\r\n          // Fallback to default stats\r\n          this.stats = {\r\n            status_counts: {},\r\n            priority_counts: {},\r\n            overdue_count: 0,\r\n            recent_created: 0,\r\n            recent_completed: 0\r\n          };\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  getIconClass(icon: string): string {\r\n    const iconMap: { [key: string]: string } = {\r\n      'wrench': 'fas fa-wrench',\r\n      'warning': 'fas fa-exclamation-triangle',\r\n      'clock': 'fas fa-clock',\r\n      'check': 'fas fa-check-circle'\r\n    };\r\n    return iconMap[icon] || 'fas fa-circle';\r\n  }\r\n\r\n  getTotalCount(): number {\r\n    if (!this.stats?.status_counts) return 0;\r\n    return Object.values(this.stats.status_counts).reduce((sum, count) => sum + count, 0);\r\n  }\r\n\r\n  // Helper methods for template access\r\n  getStatusCount(status: string): number {\r\n    return this.stats?.status_counts?.[status] || 0;\r\n  }\r\n\r\n  getPriorityCount(priority: string): number {\r\n    return this.stats?.priority_counts?.[priority] || 0;\r\n  }\r\n\r\n  getOverdueCount(): number {\r\n    return this.stats?.overdue_count || 0;\r\n  }\r\n\r\n  getRecentCreated(): number {\r\n    return this.stats?.recent_created || 0;\r\n  }\r\n\r\n  getRecentCompleted(): number {\r\n    return this.stats?.recent_completed || 0;\r\n  }\r\n\r\n  // Check if we have any data to show\r\n  hasData(): boolean {\r\n    return !!(this.stats && (\r\n      Object.keys(this.stats.status_counts || {}).length > 0 ||\r\n      Object.keys(this.stats.priority_counts || {}).length > 0 ||\r\n      this.stats.overdue_count > 0 ||\r\n      this.stats.recent_created > 0 ||\r\n      this.stats.recent_completed > 0\r\n    ));\r\n  }\r\n}\r\n", "<div class=\"stats-section\">\r\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\r\n    <div class=\"loading-wrap\">\r\n      <div class=\"spinner\"></div>\r\n      <span class=\"loading-text\">Loading stats...</span>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!isLoading\" class=\"stats-cards\">\r\n    <div class=\"stat-card theme-blue\">\r\n      <div class=\"card-top\">\r\n        <div class=\"title\">Total Work Orders</div>\r\n        <div class=\"badge\">\r\n          <svg class=\"badge-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 13V7a2 2 0 00-2-2H6a2 2 0 00-2 2v6m16 0v4a2 2 0 01-2 2H6a2 2 0 01-2-2v-4m16 0H4\"></path>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value\">{{ getTotalCount() }}</div>\r\n      <div class=\"subtitle\">Work orders in system</div>\r\n    </div>\r\n\r\n    <div class=\"stat-card theme-green\">\r\n      <div class=\"card-top\">\r\n        <div class=\"title\">Open</div>\r\n        <div class=\"badge\">\r\n          <svg class=\"badge-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4\"></path>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value\">{{ getStatusCount('open') }}</div>\r\n      <div class=\"subtitle\">Awaiting assignment</div>\r\n    </div>\r\n\r\n    <div class=\"stat-card theme-orange\">\r\n      <div class=\"card-top\">\r\n        <div class=\"title\">In Progress</div>\r\n        <div class=\"badge\">\r\n          <svg class=\"badge-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3\"></path>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value\">{{ getStatusCount('in-progress') }}</div>\r\n      <div class=\"subtitle\">Under maintenance</div>\r\n    </div>\r\n\r\n    <div class=\"stat-card theme-purple\">\r\n      <div class=\"card-top\">\r\n        <div class=\"title\">Completed</div>\r\n        <div class=\"badge\">\r\n          <svg class=\"badge-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value\">{{ getStatusCount('completed') }}</div>\r\n      <div class=\"subtitle\">Closed successfully</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WorkOrderService, WorkOrderAnalytics, WorkOrderStatistics } from '../../services/work-order.service';\nimport { Subject, takeUntil } from 'rxjs';\n\n@Component({\n  selector: 'app-work-order-analytics',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './work-order-analytics.component.html',\n  styleUrls: ['./work-order-analytics.component.scss']\n})\nexport class WorkOrderAnalyticsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  // Loading and error states\n  loading = false;\n  error: string | null = null;\n\n  // Analytics data\n  analyticsData: WorkOrderAnalytics | null = null;\n  statisticsData: WorkOrderStatistics | null = null;\n\n  // Chart data for visualization\n  statusChartData: any[] = [];\n  priorityChartData: any[] = [];\n  monthlyTrendData: any[] = [];\n  technicianData: any[] = [];\n\n  constructor(private workOrderService: WorkOrderService) { }\n\n  ngOnInit(): void {\n    this.loadAnalytics();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  loadAnalytics(): void {\n    this.loading = true;\n    this.error = null;\n\n    // Load both analytics and statistics\n    Promise.all([\n      this.loadWorkOrderAnalytics(),\n      this.loadWorkOrderStatistics()\n    ]).finally(() => {\n      this.loading = false;\n    });\n  }\n\n  loadWorkOrderAnalytics(): Promise<void> {\n    return new Promise((resolve) => {\n      this.workOrderService.getWorkOrderAnalytics()\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (response) => {\n            this.analyticsData = response;\n            this.prepareChartData();\n            resolve();\n          },\n          error: (err) => {\n            console.error('Error loading work order analytics:', err);\n            this.error = 'Failed to load analytics data. Please try again.';\n            resolve();\n          }\n        });\n    });\n  }\n\n  loadWorkOrderStatistics(): Promise<void> {\n    return new Promise((resolve) => {\n      this.workOrderService.getWorkOrderStatistics()\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (response) => {\n            this.statisticsData = response;\n            resolve();\n          },\n          error: (err) => {\n            console.error('Error loading work order statistics:', err);\n            resolve();\n          }\n        });\n    });\n  }\n\n  prepareChartData(): void {\n    if (!this.analyticsData) return;\n\n    // Safely prepare status distribution chart data with null checks\n    this.statusChartData = [\n      { \n        name: 'Completed', \n        value: this.analyticsData.status_distribution?.['completed'] || 0, \n        color: '#10b981' \n      },\n      { \n        name: 'Open', \n        value: this.analyticsData.status_distribution?.['open'] || 0, \n        color: '#ef4444' \n      },\n      { \n        name: 'In Progress', \n        value: this.analyticsData.status_distribution?.['in-progress'] || 0, \n        color: '#3b82f6' \n      },\n      { \n        name: 'On Hold', \n        value: this.analyticsData.status_distribution?.['on_hold'] || 0, \n        color: '#f59e0b' \n      },\n      { \n        name: 'Cancelled', \n        value: this.analyticsData.status_distribution?.['cancelled'] || 0, \n        color: '#6b7280' \n      }\n    ];\n\n    // Safely prepare priority distribution chart data with null checks\n    this.priorityChartData = [\n      { \n        name: 'Critical', \n        value: this.analyticsData.priority_distribution?.['critical'] || 0, \n        color: '#dc2626' \n      },\n      { \n        name: 'High', \n        value: this.analyticsData.priority_distribution?.['high'] || 0, \n        color: '#f59e0b' \n      },\n      { \n        name: 'Medium', \n        value: this.analyticsData.priority_distribution?.['medium'] || 0, \n        color: '#3b82f6' \n      },\n      { \n        name: 'Low', \n        value: this.analyticsData.priority_distribution?.['low'] || 0, \n        color: '#10b981' \n      }\n    ];\n\n    // Safely prepare monthly trends data with null checks\n    if (this.analyticsData.monthly_performance_trend && this.analyticsData.monthly_performance_trend.length > 0) {\n      this.monthlyTrendData = this.analyticsData.monthly_performance_trend.map((trend) => ({\n        month: `${trend.year}-${trend.month.toString().padStart(2, '0')}`,\n        created: trend.created_count || 0,\n        completed: trend.completed_count || 0\n      }));\n    } else {\n      this.monthlyTrendData = [];\n    }\n\n    // Safely prepare technician performance data with null checks\n    if (this.analyticsData.top_technician_performance && this.analyticsData.top_technician_performance.length > 0) {\n      this.technicianData = this.analyticsData.top_technician_performance.map(tech => ({\n        name: tech.assignedTo ? `${tech.assignedTo.first_name} ${tech.assignedTo.last_name}` : 'Unknown',\n        score: Math.round((tech.completed_count / Math.max(tech.avg_resolution_days, 1)) * 100), // Performance score based on completion rate and speed\n        completed: tech.completed_count || 0,\n        avgTime: tech.avg_resolution_days || 0\n      }));\n    } else {\n      this.technicianData = [];\n    }\n  }\n\n  refreshData(): void {\n    this.loadAnalytics();\n  }\n\n\n\n  formatDays(days: number): string {\n    if (!days || days <= 0) return '0 days';\n    if (days === 1) return '1 day';\n    return `${days} days`;\n  }\n\n  formatPercentage(value: number): string {\n    if (!value || isNaN(value)) return '0.0%';\n    return `${value.toFixed(1)}%`;\n  }\n\n  getStatusPercentage(value: number, total: number): number {\n    if (!total || total <= 0) return 0;\n    return (value / total) * 100;\n  }\n\n  // Safe getters for template usage\n  get hasStatusDistribution(): boolean {\n    return !!(this.analyticsData?.status_distribution);\n  }\n\n  get hasPriorityDistribution(): boolean {\n    return !!(this.analyticsData?.priority_distribution);\n  }\n\n  get hasMonthlyTrends(): boolean {\n    return !!(this.analyticsData?.monthly_performance_trend && this.analyticsData.monthly_performance_trend.length > 0);\n  }\n\n  get hasTechnicianData(): boolean {\n    return !!(this.analyticsData?.top_technician_performance && this.analyticsData.top_technician_performance.length > 0);\n  }\n\n\n\n  get totalStatusCount(): number {\n    if (!this.analyticsData?.status_distribution) return 0;\n    return Object.values(this.analyticsData.status_distribution).reduce((sum, count) => sum + count, 0);\n  }\n}\n", "<div class=\"work-order-analytics\">\n  <!-- Loading State -->\n  <div *ngIf=\"loading\" class=\"loading-state\">\n    <div class=\"loading-spinner\"></div>\n    <p>Loading work order analytics...</p>\n  </div>\n\n  <!-- Error State -->\n  <div *ngIf=\"error && !loading\" class=\"error-state\">\n    <svg class=\"w-12 h-12 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\n    </svg>\n    <h3 class=\"error-title\">{{ error }}</h3>\n    <button class=\"btn btn-primary\" (click)=\"refreshData()\">\n      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n      </svg>\n      Retry\n    </button>\n  </div>\n\n  <!-- Analytics Content -->\n  <div *ngIf=\"!loading && !error\">\n    <!-- Header Section -->\n    <div class=\"analytics-header\">\n      <div class=\"header-left\">\n        <h2 class=\"main-title\">Work Order Analytics</h2>\n        <p class=\"subtitle\">Performance insights and trends</p>\n      </div>\n      <div class=\"header-right\">\n        <button class=\"refresh-btn\" (click)=\"refreshData()\" title=\"Refresh Data\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n          </svg>\n          Refresh\n        </button>\n      </div>\n    </div>\n\n         <!-- Performance Metrics Cards -->\n     <div class=\"metrics-section\" *ngIf=\"analyticsData\">\n       <h3 class=\"section-title\">Performance Metrics</h3>\n       <div class=\"metrics-grid\">\n         <div class=\"metric-card\">\n           <div class=\"metric-header\">\n             <h4 class=\"metric-title\">Average Resolution Time</h4>\n             <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n               <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n             </svg>\n           </div>\n           <div class=\"metric-value\">{{ formatDays(analyticsData.average_resolution_time_days) }}</div>\n           <div class=\"metric-trend positive\">\n             {{ analyticsData.average_resolution_time_days || 0 }} days average\n           </div>\n         </div>\n\n         <div class=\"metric-card\">\n           <div class=\"metric-header\">\n             <h4 class=\"metric-title\">Completion Rate</h4>\n             <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n               <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n             </svg>\n           </div>\n           <div class=\"metric-value\">{{ formatPercentage(analyticsData.completion_rate_percentage) }}</div>\n           <div class=\"metric-target\">Target: 85%</div>\n         </div>\n\n         <div class=\"metric-card\">\n           <div class=\"metric-header\">\n             <h4 class=\"metric-title\">Overdue Work Orders</h4>\n             <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n               <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\n             </svg>\n           </div>\n           <div class=\"metric-value warning\">{{ analyticsData.overdue_work_orders || 0 }}</div>\n           <div class=\"metric-trend\">\n             {{ analyticsData.overdue_work_orders || 0 }} overdue\n           </div>\n         </div>\n\n         <div class=\"metric-card\">\n           <div class=\"metric-header\">\n             <h4 class=\"metric-title\">Active Technicians</h4>\n             <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n               <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>\n             </svg>\n           </div>\n           <div class=\"metric-value\">{{ analyticsData.active_technicians || 0 }}</div>\n           <div class=\"metric-status\">Active right now</div>\n         </div>\n       </div>\n     </div>\n\n    <!-- Charts Section -->\n    <div class=\"charts-section\" *ngIf=\"analyticsData\">\n      <div class=\"chart-row\">\n        <!-- Status Distribution Chart -->\n        <div class=\"chart-card\" *ngIf=\"hasStatusDistribution\">\n          <div class=\"chart-header\">\n            <h3 class=\"chart-title\">Work Order Status Distribution</h3>\n            <p class=\"chart-subtitle\">Current breakdown by status ({{ totalStatusCount }} total)</p>\n          </div>\n          <div class=\"chart-container\">\n            <div class=\"pie-chart\">\n              <div class=\"chart-legend\">\n                <div class=\"legend-item\" *ngFor=\"let item of statusChartData\">\n                  <div class=\"legend-color\" [style.background-color]=\"item.color\"></div>\n                  <span class=\"legend-label\">{{ item.name }}</span>\n                  <span class=\"legend-value\">{{ item.value }}</span>\n                  <span class=\"legend-percentage\">\n                    ({{ formatPercentage(getStatusPercentage(item.value, totalStatusCount)) }})\n                  </span>\n                </div>\n              </div>\n              <div class=\"chart-placeholder\">\n                <div class=\"chart-circle\">\n                  <div class=\"chart-center\">\n                    <span class=\"total-count\">{{ totalStatusCount }}</span>\n                    <span class=\"total-label\">Total</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Priority Distribution Chart -->\n        <div class=\"chart-card\" *ngIf=\"hasPriorityDistribution\">\n          <div class=\"chart-header\">\n            <h3 class=\"chart-title\">Priority Distribution</h3>\n            <p class=\"chart-subtitle\">Work orders by priority level with trends</p>\n          </div>\n          <div class=\"chart-container\">\n            <div class=\"bar-chart\">\n              <div class=\"chart-bars\">\n                <div class=\"bar-item\" *ngFor=\"let item of priorityChartData\">\n                  <div class=\"bar-label\">{{ item.name }}</div>\n                  <div class=\"bar-container\">\n                    <div class=\"bar\" \n                         [style.width]=\"getStatusPercentage(item.value, totalStatusCount) + '%'\"\n                         [style.background-color]=\"item.color\"></div>\n                    <span class=\"bar-value\">{{ item.value }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Monthly Performance Trend -->\n      <div class=\"chart-card full-width\" *ngIf=\"hasMonthlyTrends\">\n        <div class=\"chart-header\">\n          <h3 class=\"chart-title\">Monthly Performance Trend</h3>\n          <p class=\"chart-subtitle\">Work orders created vs completed with efficiency tracking</p>\n        </div>\n        <div class=\"chart-container\">\n          <div class=\"trend-chart\">\n            <div class=\"chart-y-axis\">\n              <span>80</span>\n              <span>60</span>\n              <span>40</span>\n              <span>20</span>\n              <span>0</span>\n            </div>\n            <div class=\"chart-area\">\n              <div class=\"grid-lines\">\n                <div class=\"grid-line\" *ngFor=\"let i of [0,1,2,3,4]\"></div>\n              </div>\n              <div class=\"trend-lines\">\n                <div class=\"trend-line created\" \n                     [style.height]=\"'100%'\"\n                     title=\"Work orders created\"></div>\n                <div class=\"trend-line completed\" \n                     [style.height]=\"'80%'\"\n                     title=\"Work orders completed\"></div>\n              </div>\n              <div class=\"chart-x-axis\">\n                <span *ngFor=\"let month of monthlyTrendData\">{{ month.month }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Technician Performance Section -->\n    <div class=\"technician-section\" *ngIf=\"hasTechnicianData\">\n      <h3 class=\"section-title\">Top Technician Performance</h3>\n      <p class=\"section-subtitle\">Individual performance metrics for this month</p>\n      <div class=\"technician-grid\">\n        <div class=\"technician-card\" *ngFor=\"let tech of technicianData\">\n          <div class=\"tech-header\">\n            <h4 class=\"tech-name\">{{ tech.name }}</h4>\n            <div class=\"tech-score\">{{ tech.score.toFixed(2) }}</div>\n          </div>\n          <div class=\"tech-metrics\">\n            <div class=\"tech-metric\">\n              <span class=\"metric-label\">Completed:</span>\n              <span class=\"metric-value\">{{ tech.completed }}</span>\n            </div>\n            <div class=\"tech-metric\">\n              <span class=\"metric-label\">Avg Time:</span>\n              <span class=\"metric-value\">{{ formatDays(tech.avgTime) }}</span>\n            </div>\n          </div>\n          <div class=\"performance-bar\">\n            <div class=\"bar-fill\" [style.width]=\"(tech.score * 100) + '%'\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n\n    <!-- No Data Message -->\n    <div *ngIf=\"analyticsData && !hasStatusDistribution && !hasPriorityDistribution && !hasMonthlyTrends && !hasTechnicianData\" class=\"no-data-message\">\n      <svg class=\"w-16 h-16 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>\n      </svg>\n      <h3 class=\"no-data-title\">No Analytics Data Available</h3>\n      <p class=\"no-data-description\">Work order analytics data will appear here once available.</p>\n    </div>\n  </div>\n</div>\n", "import { Component, OnInit, OnDestroy, ViewChild, HostListener } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { WorkOrderService, CreateWorkOrderRequest } from './services/work-order.service';\r\nimport { AssetService } from '../assets/services/asset.service';\r\nimport { LocationService } from '../locations/services/location.service';\r\nimport { TeamService } from '../teams/services/team.service';\r\nimport { MetaWorkOrdersService } from '../core/services/meta-work-orders.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { WorkOrderListComponent } from './components/work-order-list/work-order-list.component';\r\nimport { WorkOrderStatsComponent } from './components/work-order-stats/work-order-stats.component';\r\nimport { WorkOrderAnalyticsComponent } from './components/work-order-analytics/work-order-analytics.component';\r\nimport { MetaItem } from '../core/types/work-order.types';\r\n\r\n@Component({\r\n  selector: 'app-work-orders',\r\n  standalone: false,\r\n  templateUrl: './work-orders.component.html',\r\n  styleUrls: ['./work-orders.component.scss']\r\n})\r\nexport class WorkOrdersComponent implements OnInit, OnDestroy {\r\n  @ViewChild(WorkOrderListComponent) workOrderList!: WorkOrderListComponent;\r\n  @ViewChild(WorkOrderStatsComponent) workOrderStats!: WorkOrderStatsComponent;\r\n  @ViewChild(WorkOrderAnalyticsComponent) workOrderAnalytics!: WorkOrderAnalyticsComponent;\r\n  \r\n  activeTab: 'work-orders' | 'analytics' = 'work-orders';\r\n  showCreateModal = false;\r\n  workOrderForm: FormGroup;\r\n  isLoading = false;\r\n  showSuccessMessage = false;\r\n  showErrorMessage = false;\r\n  errorMessage = '';\r\n  fieldErrors: { [key: string]: string[] } = {};\r\n  currentFilters: any = {};\r\n  \r\n  // Lists for select boxes\r\n  assets: any[] = [];\r\n  locations: any[] = [];\r\n  teamMembers: any[] = [];\r\n  \r\n  // Metadata options for new standardized select boxes\r\n  statusOptions: MetaItem[] = [];\r\n  priorityOptions: MetaItem[] = [];\r\n  categoryOptions: MetaItem[] = [];\r\n  \r\n  // Dropdown states for new standardized select boxes\r\n  showStatusDropdown = false;\r\n  showPriorityDropdown = false;\r\n  showCategoryDropdown = false;\r\n  \r\n  // Selected values for new standardized select boxes\r\n  selectedStatus: MetaItem | null = null;\r\n  selectedPriority: MetaItem | null = null;\r\n  selectedCategory: MetaItem | null = null;\r\n  \r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private workOrderService: WorkOrderService,\r\n    private assetService: AssetService,\r\n    private locationService: LocationService,\r\n    private teamService: TeamService,\r\n    private metaWorkOrdersService: MetaWorkOrdersService\r\n  ) {\r\n    this.workOrderForm = this.fb.group({\r\n      title: ['', Validators.required],\r\n      status_id: [null, Validators.required],\r\n      priority_id: [null, Validators.required],\r\n      category_id: [null],\r\n      due_date: [''],\r\n      description: [''],\r\n      asset_id: [''],\r\n      location_id: [''],\r\n      assigned_to: [''],\r\n      team_id: [''],\r\n      estimated_hours: [''],\r\n      notes: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('WorkOrdersComponent: ngOnInit called');\r\n    console.log('WorkOrdersComponent: Initial activeTab:', this.activeTab);\r\n    this.loadSelectData();\r\n    this.loadMetadataOptions();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    console.log('WorkOrdersComponent: ngAfterViewInit called');\r\n    console.log('WorkOrdersComponent: workOrderList component:', this.workOrderList);\r\n    console.log('WorkOrdersComponent: workOrderStats component:', this.workOrderStats);\r\n    console.log('WorkOrdersComponent: workOrderAnalytics component:', this.workOrderAnalytics);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  private loadMetadataOptions(): void {\r\n    // Ensure we don't reuse any stale cached responses after deploy/code changes\r\n    this.metaWorkOrdersService.clearAllCache();\r\n\r\n    // Load statuses\r\n    this.subscription.add(\r\n      this.metaWorkOrdersService.getStatus().subscribe({\r\n        next: (statuses) => {\r\n          this.statusOptions = statuses;\r\n          // Set default status to first available\r\n          if (statuses.length > 0) {\r\n            const defaultStatus = statuses.find(s => s.slug === 'open') || statuses[0];\r\n            this.selectedStatus = defaultStatus;\r\n            this.workOrderForm.patchValue({ status_id: defaultStatus.id });\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading statuses:', error);\r\n          this.statusOptions = [];\r\n        }\r\n      })\r\n    );\r\n\r\n    // Load priorities\r\n    this.subscription.add(\r\n      this.metaWorkOrdersService.getPriorities().subscribe({\r\n        next: (priorities) => {\r\n          this.priorityOptions = priorities;\r\n          // Set default priority to medium\r\n          if (priorities.length > 0) {\r\n            const defaultPriority = priorities.find(p => p.slug === 'medium') || priorities[0];\r\n            this.selectedPriority = defaultPriority;\r\n            this.workOrderForm.patchValue({ priority_id: defaultPriority.id });\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading priorities:', error);\r\n          this.priorityOptions = [];\r\n        }\r\n      })\r\n    );\r\n\r\n    // Load categories\r\n    this.subscription.add(\r\n      this.metaWorkOrdersService.getCategories().subscribe({\r\n        next: (categories) => {\r\n          this.categoryOptions = categories;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading categories:', error);\r\n          this.categoryOptions = [];\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private loadSelectData(): void {\r\n    // Load assets\r\n    this.subscription.add(\r\n      this.assetService.getAssets({ per_page: 1000 }).subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.assets = response.data.assets || response.data || [];\r\n          } else {\r\n            this.assets = [];\r\n            console.warn('Assets response format unexpected:', response);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading assets:', error);\r\n          this.assets = [];\r\n        }\r\n      })\r\n    );\r\n\r\n    // Load locations\r\n    this.subscription.add(\r\n      this.locationService.getLocations({ per_page: 1000 }).subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.locations = response.data.locations || response.data || [];\r\n          } else {\r\n            this.locations = [];\r\n            console.warn('Locations response format unexpected:', response);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading locations:', error);\r\n          this.locations = [];\r\n        }\r\n      })\r\n    );\r\n\r\n    // Load team members\r\n    this.subscription.add(\r\n      this.teamService.getTeamMembers().subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.teamMembers = response.data || [];\r\n          } else {\r\n            this.teamMembers = [];\r\n            console.warn('Team members response format unexpected:', response);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading team members:', error);\r\n          this.teamMembers = [];\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // New standardized select box methods\r\n  toggleStatusDropdown(): void {\r\n    this.showStatusDropdown = !this.showStatusDropdown;\r\n    this.showPriorityDropdown = false;\r\n    this.showCategoryDropdown = false;\r\n  }\r\n\r\n  togglePriorityDropdown(): void {\r\n    this.showPriorityDropdown = !this.showPriorityDropdown;\r\n    this.showStatusDropdown = false;\r\n    this.showCategoryDropdown = false;\r\n  }\r\n\r\n  toggleCategoryDropdown(): void {\r\n    this.showCategoryDropdown = !this.showCategoryDropdown;\r\n    this.showStatusDropdown = false;\r\n    this.showPriorityDropdown = false;\r\n  }\r\n\r\n  selectStatus(status: MetaItem): void {\r\n    this.selectedStatus = status;\r\n    this.workOrderForm.patchValue({ status_id: status.id });\r\n    this.showStatusDropdown = false;\r\n  }\r\n\r\n  selectPriority(priority: MetaItem): void {\r\n    this.selectedPriority = priority;\r\n    this.workOrderForm.patchValue({ priority_id: priority.id });\r\n    this.showPriorityDropdown = false;\r\n  }\r\n\r\n  selectCategory(category: MetaItem | null): void {\r\n    this.selectedCategory = category;\r\n    this.workOrderForm.patchValue({ category_id: category?.id || null });\r\n    this.showCategoryDropdown = false;\r\n  }\r\n\r\n  getStatusLabel(): string {\r\n    return this.selectedStatus ? this.selectedStatus.name : 'Select status';\r\n  }\r\n\r\n  getPriorityLabel(): string {\r\n    return this.selectedPriority ? this.selectedPriority.name : 'Select priority';\r\n  }\r\n\r\n  getCategoryLabel(): string {\r\n    return this.selectedCategory ? this.selectedCategory.name : 'Select category (optional)';\r\n  }\r\n\r\n  getStatusValue(): number | null {\r\n    return this.selectedStatus ? this.selectedStatus.id : null;\r\n  }\r\n\r\n  getPriorityValue(): number | null {\r\n    return this.selectedPriority ? this.selectedPriority.id : null;\r\n  }\r\n\r\n  getCategoryValue(): number | null {\r\n    return this.selectedCategory ? this.selectedCategory.id : null;\r\n  }\r\n\r\n  getStatusColor(): string {\r\n    if (!this.selectedStatus) return '#6B7280';\r\n    switch (this.selectedStatus.slug) {\r\n      case 'open': return '#10B981';\r\n      case 'in-progress': return '#F59E0B';\r\n      case 'completed': return '#3B82F6';\r\n      case 'cancelled': return '#EF4444';\r\n      case 'on-hold': return '#8B5CF6';\r\n      default: return '#6B7280';\r\n    }\r\n  }\r\n\r\n  getPriorityColor(): string {\r\n    if (!this.selectedPriority) return '#6B7280';\r\n    switch (this.selectedPriority.slug) {\r\n      case 'low': return '#10B981';\r\n      case 'medium': return '#F59E0B';\r\n      case 'high': return '#F97316';\r\n      case 'critical': return '#EF4444';\r\n      case 'ppm': return '#8B5CF6';\r\n      default: return '#6B7280';\r\n    }\r\n  }\r\n\r\n  getStatusDescription(): string {\r\n    if (!this.selectedStatus) return 'Select a status for this work order';\r\n    switch (this.selectedStatus.slug) {\r\n      case 'open': return 'Work order is open and ready to be assigned';\r\n      case 'in-progress': return 'Work order is currently being worked on';\r\n      case 'completed': return 'Work order has been completed successfully';\r\n      case 'cancelled': return 'Work order has been cancelled';\r\n      case 'on-hold': return 'Work order is temporarily on hold';\r\n      default: return this.selectedStatus.name;\r\n    }\r\n  }\r\n\r\n  getPriorityDescription(): string {\r\n    if (!this.selectedPriority) return 'Select a priority level for this work order';\r\n    switch (this.selectedPriority.slug) {\r\n      case 'low': return 'Low priority - can be addressed when convenient';\r\n      case 'medium': return 'Medium priority - should be addressed soon';\r\n      case 'high': return 'High priority - needs immediate attention';\r\n      case 'critical': return 'Critical priority - urgent, requires immediate action';\r\n      case 'ppm': return 'Preventive maintenance - scheduled maintenance task';\r\n      default: return this.selectedPriority.name;\r\n    }\r\n  }\r\n\r\n  getCategoryDescription(category: MetaItem): string {\r\n    // Map category slugs to descriptions\r\n    switch (category.slug) {\r\n      case 'preventive-maintenance': return 'Regular scheduled maintenance to prevent breakdowns';\r\n      case 'corrective-maintenance': return 'Repair work to fix existing problems';\r\n      case 'emergency-maintenance': return 'Urgent repairs requiring immediate attention';\r\n      case 'inspection': return 'Regular inspections and assessments';\r\n      case 'calibration': return 'Equipment calibration and adjustment';\r\n      case 'cleaning': return 'Cleaning and general upkeep';\r\n      case 'lubrication': return 'Lubrication and oil changes';\r\n      case 'filter-replacement': return 'Filter and consumable replacement';\r\n      case 'belt-replacement': return 'Belt and drive component replacement';\r\n      case 'electrical': return 'Electrical system maintenance';\r\n      case 'mechanical': return 'Mechanical system maintenance';\r\n      case 'plumbing': return 'Plumbing system maintenance';\r\n      case 'hvac': return 'HVAC system maintenance';\r\n      default: return 'Maintenance category';\r\n    }\r\n  }\r\n\r\n  // Close dropdowns when clicking outside\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: Event): void {\r\n    const target = event.target as HTMLElement;\r\n    if (!target.closest('.status-dropdown') && !target.closest('.priority-dropdown') && !target.closest('.category-dropdown')) {\r\n      this.showStatusDropdown = false;\r\n      this.showPriorityDropdown = false;\r\n      this.showCategoryDropdown = false;\r\n    }\r\n  }\r\n\r\n  setActiveTab(tab: 'work-orders' | 'analytics') {\r\n    console.log('WorkOrdersComponent: setActiveTab called with:', tab);\r\n    this.activeTab = tab;\r\n    console.log('WorkOrdersComponent: activeTab is now:', this.activeTab);\r\n    \r\n    // Refresh data when switching to analytics tab\r\n    if (tab === 'analytics' && this.workOrderAnalytics) {\r\n      this.workOrderAnalytics.refreshData();\r\n    }\r\n  }\r\n\r\n  openCreateModal() {\r\n    this.showCreateModal = true;\r\n    this.resetMessages();\r\n    this.loadSelectData(); // Refresh the select data when opening modal\r\n    this.loadMetadataOptions(); // Refresh metadata options\r\n  }\r\n\r\n  closeCreateModal(event?: any) {\r\n    if (event && event.target.classList.contains('modal-overlay')) {\r\n      this.showCreateModal = false;\r\n    } else if (!event) {\r\n      this.showCreateModal = false;\r\n    }\r\n    this.resetMessages();\r\n  }\r\n\r\n  private resetMessages(): void {\r\n    this.showSuccessMessage = false;\r\n    this.showErrorMessage = false;\r\n    this.errorMessage = '';\r\n    this.fieldErrors = {};\r\n  }\r\n\r\n  private showSuccess(): void {\r\n    this.showSuccessMessage = true;\r\n    setTimeout(() => {\r\n      this.showSuccessMessage = false;\r\n    }, 3000);\r\n  }\r\n\r\n  private showError(message: string, fieldErrors?: { [key: string]: string[] }): void {\r\n    this.errorMessage = message;\r\n    this.showErrorMessage = true;\r\n    \r\n    if (fieldErrors) {\r\n      this.fieldErrors = fieldErrors;\r\n    }\r\n    \r\n    setTimeout(() => {\r\n      this.showErrorMessage = false;\r\n      this.fieldErrors = {};\r\n    }, 8000); // Show field errors longer\r\n  }\r\n\r\n  // Helper method to get field errors for display\r\n  getFieldError(fieldName: string): string {\r\n    return this.fieldErrors[fieldName] ? this.fieldErrors[fieldName].join(', ') : '';\r\n  }\r\n\r\n  // Helper method to check if a field has errors\r\n  hasFieldError(fieldName: string): boolean {\r\n    return !!this.fieldErrors[fieldName] && this.fieldErrors[fieldName].length > 0;\r\n  }\r\n\r\n  onFiltersChanged(filters: any): void {\r\n    this.currentFilters = filters;\r\n    console.log('Filters received in main component:', filters);\r\n    \r\n    // Here you would typically apply filters to the work order list\r\n    // For now, we'll just log them\r\n    if (this.workOrderList) {\r\n      // You could add a method to apply filters to the list\r\n      // this.workOrderList.applyFilters(filters);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.workOrderForm.valid) {\r\n      this.isLoading = true;\r\n      this.resetMessages();\r\n      \r\n      const workOrderData: CreateWorkOrderRequest = {\r\n        title: this.workOrderForm.value.title,\r\n        description: this.workOrderForm.value.description || undefined,\r\n        status_id: this.workOrderForm.value.status_id,\r\n        priority_id: this.workOrderForm.value.priority_id,\r\n        category_id: this.workOrderForm.value.category_id || undefined,\r\n        due_date: this.workOrderForm.value.due_date || undefined,\r\n        asset_id: this.workOrderForm.value.asset_id || undefined,\r\n        location_id: this.workOrderForm.value.location_id || undefined,\r\n        assigned_to: this.workOrderForm.value.assigned_to || undefined,\r\n        team_id: this.workOrderForm.value.team_id || undefined,\r\n        estimated_hours: this.workOrderForm.value.estimated_hours || undefined,\r\n        notes: this.workOrderForm.value.notes || undefined\r\n      };\r\n\r\n      this.subscription.add(\r\n        this.workOrderService.createWorkOrder(workOrderData).subscribe({\r\n          next: (response) => {\r\n            console.log('Work order created successfully:', response);\r\n            this.showSuccess();\r\n            this.closeCreateModal();\r\n            this.workOrderForm.reset({\r\n              status_id: this.selectedStatus?.id || null,\r\n              priority_id: this.selectedPriority?.id || null,\r\n              category_id: null\r\n            });\r\n            // Reset selected values\r\n            this.selectedCategory = null;\r\n            // Refresh the work order list and stats\r\n            if (this.workOrderList) {\r\n              this.workOrderList.refreshWorkOrders();\r\n            }\r\n            if (this.workOrderStats) {\r\n              this.workOrderStats.loadStats();\r\n            }\r\n            // Refresh analytics if on analytics tab\r\n            if (this.activeTab === 'analytics' && this.workOrderAnalytics) {\r\n              this.workOrderAnalytics.refreshData();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            console.error('Error creating work order:', error);\r\n            \r\n            // Handle different types of errors\r\n            if (error.error?.errors) {\r\n              // Backend validation errors\r\n              const fieldErrors = error.error.errors;\r\n              const message = error.error?.message || 'Please fix the validation errors below.';\r\n              this.showError(message, fieldErrors);\r\n            } else if (error.error?.message) {\r\n              // General error message\r\n              this.showError(error.error.message);\r\n            } else {\r\n              // Fallback error message\r\n              this.showError('Failed to create work order. Please try again.');\r\n            }\r\n          },\r\n          complete: () => {\r\n            this.isLoading = false;\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  refreshAllData(): void {\r\n    // Refresh work order list\r\n    if (this.workOrderList) {\r\n      this.workOrderList.refreshWorkOrders();\r\n    }\r\n    \r\n    // Refresh stats\r\n    if (this.workOrderStats) {\r\n      this.workOrderStats.loadStats();\r\n    }\r\n    \r\n    // Refresh analytics\r\n    if (this.workOrderAnalytics) {\r\n      this.workOrderAnalytics.refreshData();\r\n    }\r\n    \r\n    // Refresh select data\r\n    this.loadSelectData();\r\n    this.loadMetadataOptions();\r\n  }\r\n}\r\n", "<div class=\"work-orders-container\">\r\n  <!-- Success Message -->\r\n  <div *ngIf=\"showSuccessMessage\" class=\"success-message\">\r\n    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n    </svg>\r\n    <span>Work order created successfully!</span>\r\n  </div>\r\n\r\n  <!-- Error Message -->\r\n  <div *ngIf=\"showErrorMessage\" class=\"error-message\">\r\n    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\r\n    </svg>\r\n    <span>{{ errorMessage }}</span>\r\n  </div>\r\n\r\n  <div class=\"header\">\r\n    <h1>Work Order Management</h1>\r\n    <p>Streamline maintenance workflows with intelligent work order tracking and scheduling.</p>\r\n  </div>\r\n\r\n  <div class=\"tabs\">\r\n    <div class=\"tab\" \r\n         [class.active]=\"activeTab === 'work-orders'\"\r\n         (click)=\"setActiveTab('work-orders')\">\r\n      Work Orders\r\n    </div>\r\n    <div class=\"tab\" \r\n         [class.active]=\"activeTab === 'analytics'\"\r\n         (click)=\"setActiveTab('analytics')\">\r\n      Analytics\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <div class=\"work-orders-content\" [class.active]=\"activeTab === 'work-orders'\">\r\n      \r\n      <app-work-order-stats></app-work-order-stats>\r\n      \r\n      <div class=\"create-button-container\">\r\n        <button class=\"create-button\" (click)=\"openCreateModal()\">\r\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4v16m8-8H4\"></path>\r\n          </svg>\r\n          Create Work Order\r\n        </button>\r\n      </div>\r\n      \r\n      <app-work-order-list (createWorkOrderRequested)=\"openCreateModal()\"></app-work-order-list>\r\n    </div>\r\n\r\n    <div class=\"analytics-content\" [class.active]=\"activeTab === 'analytics'\">\r\n      <app-work-order-analytics></app-work-order-analytics>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Create Work Order Modal -->\r\n<div class=\"modal-overlay\" *ngIf=\"showCreateModal\" (click)=\"closeCreateModal($event)\">\r\n  <div class=\"modal\" (click)=\"$event.stopPropagation()\">\r\n    <div class=\"modal-header\">\r\n      <svg class=\"header-icon w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path>\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n      </svg>\r\n      <h2>Create New Work Order</h2>\r\n    </div>\r\n    \r\n    <div class=\"modal-body\">\r\n      <form [formGroup]=\"workOrderForm\" (ngSubmit)=\"onSubmit()\">\r\n        <!-- Basic Information Section -->\r\n        <div class=\"form-section\">\r\n          <div class=\"section-header\">\r\n            <svg class=\"section-icon w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n            </svg>\r\n            <h3>Basic Information</h3>\r\n          </div>\r\n          \r\n          <div class=\"form-row full-width\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('title')\">\r\n              <label>Title <span class=\"required\">*</span></label>\r\n              <input \r\n                type=\"text\" \r\n                formControlName=\"title\" \r\n                placeholder=\"Enter work order title\"\r\n                [class.error-input]=\"hasFieldError('title')\">\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('title')\">\r\n                {{ getFieldError('title') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('status_id')\">\r\n              <label>Status <span class=\"required\">*</span></label>\r\n              <!-- Custom Status Dropdown -->\r\n              <div class=\"relative status-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                <button type=\"button\" (click)=\"toggleStatusDropdown()\" class=\"dropdown-button\" [class.error]=\"hasFieldError('status_id')\" [class.active]=\"showStatusDropdown\">\r\n                  <div class=\"dropdown-content\">\r\n                    <span *ngIf=\"!selectedStatus\" class=\"placeholder\">Select status</span>\r\n                    <div *ngIf=\"selectedStatus\" class=\"selected-item\">\r\n                      <div class=\"status-icon\" [style.background-color]=\"getStatusColor() + '20'\">\r\n                        <svg class=\"icon\" [style.color]=\"getStatusColor()\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <span class=\"selected-text\">{{selectedStatus.name}}</span>\r\n                    </div>\r\n                    <svg class=\"dropdown-arrow\" [class.rotated]=\"showStatusDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n                <!-- Dropdown Menu -->\r\n                <div *ngIf=\"showStatusDropdown\" class=\"dropdown-menu\">\r\n                  <div class=\"dropdown-header\">Select status</div>\r\n                  <button *ngFor=\"let status of statusOptions\" type=\"button\" (click)=\"selectStatus(status)\" class=\"dropdown-item\" [class.selected]=\"selectedStatus?.id === status.id\">\r\n                    <div class=\"item-content\">\r\n                      <div class=\"item-icon\" [style.background-color]=\"getStatusColor() + '20'\">\r\n                        <svg class=\"icon\" [style.color]=\"getStatusColor()\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <div class=\"item-details\">\r\n                        <div class=\"item-name\">{{status.name}}</div>\r\n                        <div class=\"item-description\">{{getStatusDescription()}}</div>\r\n                      </div>\r\n                    </div>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('status_id')\">\r\n                {{ getFieldError('status_id') }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('priority_id')\">\r\n              <label>Priority <span class=\"required\">*</span></label>\r\n              <!-- Custom Priority Dropdown -->\r\n              <div class=\"relative priority-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                <button type=\"button\" (click)=\"togglePriorityDropdown()\" class=\"dropdown-button\" [class.error]=\"hasFieldError('priority_id')\" [class.active]=\"showPriorityDropdown\">\r\n                  <div class=\"dropdown-content\">\r\n                    <span *ngIf=\"!selectedPriority\" class=\"placeholder\">Select priority</span>\r\n                    <div *ngIf=\"selectedPriority\" class=\"selected-item\">\r\n                      <div class=\"priority-icon\" [style.background-color]=\"getPriorityColor() + '20'\">\r\n                        <svg class=\"icon\" [style.color]=\"getPriorityColor()\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <span class=\"selected-text\">{{selectedPriority.name}}</span>\r\n                    </div>\r\n                    <svg class=\"dropdown-arrow\" [class.rotated]=\"showPriorityDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n                <!-- Dropdown Menu -->\r\n                <div *ngIf=\"showPriorityDropdown\" class=\"dropdown-menu\">\r\n                  <div class=\"dropdown-header\">Select priority</div>\r\n                  <button *ngFor=\"let priority of priorityOptions\" type=\"button\" (click)=\"selectPriority(priority)\" class=\"dropdown-item\" [class.selected]=\"selectedPriority?.id === priority.id\">\r\n                    <div class=\"item-content\">\r\n                      <div class=\"item-icon\" [style.background-color]=\"getPriorityColor() + '20'\">\r\n                        <svg class=\"icon\" [style.color]=\"getPriorityColor()\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <div class=\"item-details\">\r\n                        <div class=\"item-name\">{{priority.name}}</div>\r\n                        <div class=\"item-description\">{{getPriorityDescription()}}</div>\r\n                      </div>\r\n                    </div>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('priority_id')\">\r\n                {{ getFieldError('priority_id') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('category_id')\">\r\n              <label>Category (Optional)</label>\r\n              <!-- Custom Category Dropdown -->\r\n              <div class=\"relative category-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                <button type=\"button\" (click)=\"toggleCategoryDropdown()\" class=\"dropdown-button\" [class.error]=\"hasFieldError('category_id')\" [class.active]=\"showCategoryDropdown\">\r\n                  <div class=\"dropdown-content\">\r\n                    <span *ngIf=\"!selectedCategory\" class=\"placeholder\">Select category (optional)</span>\r\n                    <div *ngIf=\"selectedCategory\" class=\"selected-item\">\r\n                      <div class=\"category-icon\">\r\n                        <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <span class=\"selected-text\">{{selectedCategory.name}}</span>\r\n                    </div>\r\n                    <svg class=\"dropdown-arrow\" [class.rotated]=\"showCategoryDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n                <!-- Dropdown Menu -->\r\n                <div *ngIf=\"showCategoryDropdown\" class=\"dropdown-menu\">\r\n                  <div class=\"dropdown-header\">Select category</div>\r\n                  <button type=\"button\" (click)=\"selectCategory(null)\" class=\"dropdown-item\">\r\n                    <div class=\"item-content\">\r\n                      <div class=\"item-icon no-category\">\r\n                        <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <div class=\"item-details\">\r\n                        <div class=\"item-name\">No Category</div>\r\n                        <div class=\"item-description\">Work order without specific category</div>\r\n                      </div>\r\n                    </div>\r\n                  </button>\r\n                  <button *ngFor=\"let category of categoryOptions\" type=\"button\" (click)=\"selectCategory(category)\" class=\"dropdown-item\" [class.selected]=\"selectedCategory?.id === category.id\">\r\n                    <div class=\"item-content\">\r\n                      <div class=\"item-icon\">\r\n                        <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <div class=\"item-details\">\r\n                        <div class=\"item-name\">{{category.name}}</div>\r\n                        <div class=\"item-description\">{{getCategoryDescription(category)}}</div>\r\n                      </div>\r\n                    </div>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('category_id')\">\r\n                {{ getFieldError('category_id') }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label>Due Date</label>\r\n              <input \r\n                type=\"datetime-local\" \r\n                formControlName=\"due_date\">\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-row full-width\">\r\n            <div class=\"form-group\">\r\n              <label>Description</label>\r\n              <textarea \r\n                formControlName=\"description\" \r\n                placeholder=\"Enter work order description\"></textarea>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\">\r\n              <label>Estimated Hours</label>\r\n              <input\r\n                type=\"number\"\r\n                formControlName=\"estimated_hours\"\r\n                placeholder=\"0\"\r\n                min=\"0\"\r\n                step=\"0.5\">\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label>Notes</label>\r\n              <textarea\r\n                formControlName=\"notes\"\r\n                placeholder=\"Additional notes\"></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Assignment & Location Section -->\r\n        <div class=\"form-section\">\r\n          <div class=\"section-header\">\r\n            <svg class=\"section-icon w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n            </svg>\r\n            <h3>Assignment & Location</h3>\r\n          </div>\r\n          \r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('asset_id')\">\r\n              <label>Asset (Optional)</label>\r\n              <select\r\n                formControlName=\"asset_id\"\r\n                [class.error-input]=\"hasFieldError('asset_id')\"\r\n                [disabled]=\"assets.length === 0\">\r\n                <option value=\"\">{{ assets.length === 0 ? 'Loading assets...' : 'Select an asset' }}</option>\r\n                <option *ngFor=\"let asset of assets\" [value]=\"asset.id\">\r\n                  {{ asset.name || asset.asset_name || 'Asset ' + asset.id }}\r\n                </option>\r\n              </select>\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('asset_id')\">\r\n                {{ getFieldError('asset_id') }}\r\n              </div>\r\n              <div class=\"field-help\">\r\n                <small>Select an existing asset from your assets list</small>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('location_id')\">\r\n              <label>Location (Optional)</label>\r\n              <select\r\n                formControlName=\"location_id\"\r\n                [class.error-input]=\"hasFieldError('location_id')\"\r\n                [disabled]=\"locations.length === 0\">\r\n                <option value=\"\">{{ locations.length === 0 ? 'Loading locations...' : 'Select a location' }}</option>\r\n                <option *ngFor=\"let location of locations\" [value]=\"location.id\">\r\n                  {{ location.name || 'Location ' + location.id }}\r\n                </option>\r\n              </select>\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('location_id')\">\r\n                {{ getFieldError('location_id') }}\r\n              </div>\r\n              <div class=\"field-help\">\r\n                <small>Select an existing location from your locations list</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-row\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('assigned_to')\">\r\n              <label>Assign To Team Member (Optional)</label>\r\n              <select\r\n                formControlName=\"assigned_to\"\r\n                [class.error-input]=\"hasFieldError('assigned_to')\"\r\n                [disabled]=\"teamMembers.length === 0\">\r\n                <option value=\"\">{{ teamMembers.length === 0 ? 'Loading team members...' : 'Select a team member' }}</option>\r\n                <option *ngFor=\"let member of teamMembers\" [value]=\"member.id\">\r\n                  {{ member.first_name }} {{ member.last_name }}\r\n                </option>\r\n              </select>\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('assigned_to')\">\r\n                {{ getFieldError('assigned_to') }}\r\n              </div>\r\n              <div class=\"field-help\">\r\n                <small>Select an existing team member to assign the work order to</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    \r\n    <div class=\"modal-footer\">\r\n      <button class=\"btn btn-secondary\" (click)=\"closeCreateModal()\" [disabled]=\"isLoading\">Cancel</button>\r\n      <button class=\"btn btn-primary\" (click)=\"onSubmit()\" [disabled]=\"isLoading\">\r\n        <svg *ngIf=\"isLoading\" class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n          <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n          <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n        </svg>\r\n        {{ isLoading ? 'Creating...' : 'Create Work Order' }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { WorkOrderPartItem, WorkOrderService } from '../../services/work-order.service';\r\nimport { InventoryAnalyticsService, InventoryPart, PartsCatalogResponse } from '../../../core/services/inventory-analytics.service';\r\n\r\n@Component({\r\n  selector: 'app-add-work-order-parts-modal',\r\n  standalone: false,\r\n  templateUrl: './add-work-order-parts-modal.component.html',\r\n  styleUrls: ['./add-work-order-parts-modal.component.scss']\r\n})\r\nexport class AddWorkOrderPartsModalComponent implements OnChanges {\r\n  @Input() workOrderId!: number;\r\n  @Input() isOpen = false;\r\n  @Output() closed = new EventEmitter<void>();\r\n  @Output() saved = new EventEmitter<WorkOrderPartItem[]>();\r\n\r\n  query = '';\r\n  results: InventoryPart[] = [] as any;\r\n  cart: Array<{ part: InventoryPart; qty: number; unit_cost?: number }> = [];\r\n  loading = false;\r\n\r\n  constructor(private woService: WorkOrderService, private inv: InventoryAnalyticsService) {}\r\n\r\n  search(): void {\r\n    this.loading = true;\r\n    this.inv.getPartsCatalog(this.query || undefined, undefined, 1, 10).subscribe({\r\n      next: (resp: PartsCatalogResponse) => {\r\n        this.results = resp?.data?.data || [];\r\n        this.loading = false;\r\n      },\r\n      error: () => { this.loading = false; }\r\n    });\r\n  }\r\n\r\n  addToCart(part: InventoryPart): void {\r\n    const existing = this.cart.find((c) => c.part.id === part.id);\r\n    if (existing) {\r\n      existing.qty += 1;\r\n      return;\r\n    }\r\n    this.cart.push({ part, qty: 1, unit_cost: part.unit_cost || undefined });\r\n  }\r\n\r\n  removeFromCart(partId: number): void {\r\n    this.cart = this.cart.filter((c) => c.part.id !== partId);\r\n  }\r\n\r\n  async save(): Promise<void> {\r\n    if (!this.workOrderId || this.cart.length === 0) {\r\n      this.closed.emit();\r\n      return;\r\n    }\r\n    const payload = this.cart.map((c) => ({ part_id: c.part.id, qty: c.qty, unit_cost: c.unit_cost }));\r\n    this.woService.addParts(this.workOrderId, payload).subscribe({\r\n      next: (items) => {\r\n        this.saved.emit(items);\r\n        this.closed.emit();\r\n      }\r\n    });\r\n  }\r\n\r\n  close(): void { this.closed.emit(); }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['isOpen'] && this.isOpen && this.results.length === 0 && !this.loading) {\r\n      this.search();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n", "<div class=\"modal-overlay\" *ngIf=\"isOpen\" (click)=\"close()\">\r\n  <div class=\"modal\" (click)=\"$event.stopPropagation()\">\r\n    <div class=\"modal-header\">\r\n      <h3>Add Parts</h3>\r\n      <button class=\"close\" (click)=\"close()\">×</button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <div class=\"search-row\">\r\n        <input class=\"form-input\" [(ngModel)]=\"query\" placeholder=\"Search parts by name or code\" />\r\n        <button class=\"btn btn-primary\" (click)=\"search()\" [disabled]=\"loading\">Search</button>\r\n      </div>\r\n      <div class=\"results\" *ngIf=\"results.length\">\r\n        <div class=\"result-row\" *ngFor=\"let p of results\">\r\n          <div class=\"left\">\r\n            <div class=\"name\">{{ p.name }}</div>\r\n            <div class=\"sub\">UoM: {{ $any(p).uom || '-' }} • On hand: {{ $any(p).on_hand || '-' }}</div>\r\n          </div>\r\n          <div class=\"right\">\r\n            <button class=\"btn\" (click)=\"addToCart(p)\">Add</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"cart\" *ngIf=\"cart.length\">\r\n        <div class=\"cart-row\" *ngFor=\"let c of cart\">\r\n          <div class=\"left\">{{ c.part.name }}</div>\r\n          <div class=\"right\">\r\n            <input class=\"qty\" type=\"number\" [(ngModel)]=\"c.qty\" min=\"0.001\" step=\"0.001\" />\r\n            <input class=\"cost\" type=\"number\" [(ngModel)]=\"c.unit_cost\" min=\"0\" step=\"0.01\" placeholder=\"Unit cost\" />\r\n            <button class=\"icon\" (click)=\"removeFromCart($any(c.part).id)\">🗑</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button class=\"btn btn-secondary\" (click)=\"close()\">Cancel</button>\r\n      <button class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"cart.length===0\">Add to Work Order</button>\r\n    </div>\r\n  </div>\r\n  </div>\r\n\r\n\r\n", "import { Component, Input, OnChanges, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\nimport { WorkOrderService, WorkOrderPartItem, TimeLog } from '../../services/work-order.service';\r\n\r\n@Component({\r\n  selector: 'app-view-costs-modal',\r\n  standalone: false,\r\n  templateUrl: './view-costs-modal.component.html',\r\n  styleUrls: ['./view-costs-modal.component.scss']\r\n})\r\nexport class ViewCostsModalComponent implements OnChanges {\r\n  @Input() workOrderId!: number;\r\n  @Input() isOpen = false;\r\n  @Output() closed = new EventEmitter<void>();\r\n\r\n  loading = false;\r\n  timeLogs: TimeLog[] = [];\r\n  parts: WorkOrderPartItem[] = [];\r\n  laborMinutes = 0;\r\n  laborCost = 0;\r\n  partsCost = 0;\r\n  totalCost = 0;\r\n\r\n  constructor(private woService: WorkOrderService) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['isOpen'] && this.isOpen && this.workOrderId) {\r\n      this.fetchCosts();\r\n    }\r\n  }\r\n\r\n  fetchCosts(): void {\r\n    this.loading = true;\r\n    const id = this.workOrderId;\r\n    this.woService.getTimeLogs(id).subscribe({\r\n      next: (data) => {\r\n        this.timeLogs = data.logs || [];\r\n        this.laborMinutes = data.totals?.total_minutes || 0;\r\n        this.laborCost = data.totals?.total_cost || 0;\r\n        this.computeTotals();\r\n      }\r\n    });\r\n    this.woService.getParts(id).subscribe({\r\n      next: (items) => {\r\n        this.parts = items || [];\r\n        this.computeTotals();\r\n        this.loading = false;\r\n      },\r\n      error: () => { this.loading = false; }\r\n    });\r\n  }\r\n\r\n  private computeTotals(): void {\r\n    this.partsCost = (this.parts || []).reduce((sum, p) => {\r\n      const unit = (p.unit_cost ?? 0) as number;\r\n      const qty = (p.qty ?? 0) as unknown as number;\r\n      return sum + unit * qty;\r\n    }, 0);\r\n    this.totalCost = (this.laborCost || 0) + (this.partsCost || 0);\r\n  }\r\n\r\n  close(): void { this.closed.emit(); }\r\n}\r\n\r\n\r\n", "<div class=\"modal-overlay\" *ngIf=\"isOpen\" (click)=\"close()\">\r\n  <div class=\"modal\" (click)=\"$event.stopPropagation()\">\r\n    <div class=\"modal-header\">\r\n      <h3>Work Order Costs</h3>\r\n      <button class=\"close\" (click)=\"close()\">×</button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <div *ngIf=\"loading\" class=\"text-sm text-gray-500\">Loading costs...</div>\r\n\r\n      <div class=\"summary\">\r\n        <div>\r\n          <div class=\"label\">Labor</div>\r\n          <div class=\"value\">{{ (laborMinutes/60) | number:'1.2-2' }} hrs • ${{ laborCost | number:'1.2-2' }}</div>\r\n        </div>\r\n        <div>\r\n          <div class=\"label\">Parts</div>\r\n          <div class=\"value\">${{ partsCost | number:'1.2-2' }}</div>\r\n        </div>\r\n        <div>\r\n          <div class=\"label\">Total</div>\r\n          <div class=\"value total\">${{ totalCost | number:'1.2-2' }}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <h4>Parts</h4>\r\n      <div *ngIf=\"parts.length === 0\" class=\"text-sm text-gray-500\">No parts added.</div>\r\n      <div class=\"parts-list\" *ngIf=\"parts.length\">\r\n        <div class=\"row\" *ngFor=\"let p of parts\">\r\n          <div class=\"name\">{{ p.part?.name || ('Part #' + p.part_id) }}</div>\r\n          <div class=\"qty\">x{{ p.qty }}</div>\r\n          <div class=\"cost\">${{ ((($any(p).unit_cost || 0) * ($any(p).qty || 0)) | number:'1.2-2') }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button class=\"btn btn-secondary\" (click)=\"close()\">Close</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { WorkOrderService, WorkOrderPreview, WorkOrderComment, WorkOrderHistoryEvent, WorkOrderAssignment } from '../../services/work-order.service';\r\nimport { TeamService, TeamMember } from '../../../teams/services/team.service';\r\nimport { MetaWorkOrdersService } from '../../../core/services/meta-work-orders.service';\r\nimport { MetaItem } from '../../../core/types/work-order.types';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-work-order-preview',\r\n  standalone: false,\r\n  templateUrl: './work-order-preview.component.html',\r\n  styleUrls: ['./work-order-preview.component.scss']\r\n})\r\nexport class WorkOrderPreviewComponent implements OnInit, OnDestroy {\r\n  workOrder: WorkOrderPreview | null = null;\r\n  isLoading = true;\r\n  isTimerRunning = false;\r\n  currentSession = {\r\n    description: '',\r\n    hourlyRate: 0\r\n  };\r\n  timeLogs: any[] = [];\r\n  totalMinutes = 0;\r\n  totalCost = 0;\r\n  hasActiveSession = false;\r\n  commentForm: FormGroup;\r\n  private subscription = new Subscription();\r\n  statusOptions: MetaItem[] = [];\r\n  historyPreview: WorkOrderHistoryEvent[] = [];\r\n  showHistoryModal = false;\r\n  fullHistory: WorkOrderHistoryEvent[] = [];\r\n  displayedElapsed = '00:00:00';\r\n  private timerHandle: any = null;\r\n  private activeStartTime?: Date;\r\n\r\n  // Assignments UI state\r\n  showAssignmentsModal = false;\r\n  showEditModal = false;\r\n  showAddPartsModal = false;\r\n  showViewCostsModal = false;\r\n  assignments: WorkOrderAssignment[] = [];\r\n  teamMembers: TeamMember[] = [];\r\n  selectedUserIds = new Set<number>();\r\n  assignmentStatuses = new Map<number, string>();\r\n  assignmentStatusOptions: Array<{ value: string; label: string }> = [\r\n    { value: 'assigned', label: 'Assigned' },\r\n    { value: 'accepted', label: 'Accepted' },\r\n    { value: 'declined', label: 'Declined' },\r\n    { value: 'completed', label: 'Completed' }\r\n  ];\r\n\r\n  openAssignmentsModal(): void {\r\n    this.showAssignmentsModal = true;\r\n  }\r\n\r\n  closeAssignmentsModal(): void {\r\n    this.showAssignmentsModal = false;\r\n  }\r\n\r\n  // Edit modal controls\r\n  openEditModal(): void {\r\n    this.showEditModal = true;\r\n  }\r\n\r\n  closeEditModal(): void {\r\n    this.showEditModal = false;\r\n  }\r\n\r\n  onWorkOrderUpdated(updated: any): void {\r\n    this.workOrder = { ...(this.workOrder as any), ...updated } as any;\r\n    this.showEditModal = false;\r\n  }\r\n\r\n  openAddPartsModal(): void { this.showAddPartsModal = true; }\r\n  closeAddPartsModal(): void { this.showAddPartsModal = false; }\r\n  onPartsAdded(): void { this.closeAddPartsModal(); }\r\n\r\n  toggleUserSelection(userId: number, checked: boolean): void {\r\n    if (checked) {\r\n      this.selectedUserIds.add(userId);\r\n    } else {\r\n      this.selectedUserIds.delete(userId);\r\n    }\r\n  }\r\n\r\n  saveAssignments(): void {\r\n    if (!this.workOrder) return;\r\n    const ids = Array.from(this.selectedUserIds.values());\r\n    this.workOrderService.setAssignments(this.workOrder.id, ids).subscribe({\r\n      next: (items) => {\r\n        this.assignments = items || [];\r\n        this.closeAssignmentsModal();\r\n      }\r\n    });\r\n  }\r\n\r\n  removeAssignment(a: WorkOrderAssignment): void {\r\n    if (!this.workOrder) return;\r\n    this.workOrderService.deleteAssignment(this.workOrder.id, a.id).subscribe({\r\n      next: () => {\r\n        this.assignments = (this.assignments || []).filter(x => x.id !== a.id);\r\n        this.selectedUserIds.delete(a.user_id);\r\n      }\r\n    });\r\n  }\r\n\r\n  isUserAlreadyAssigned(userId: number): boolean {\r\n    return (this.assignments || []).some(a => a.user_id === userId);\r\n  }\r\n\r\n  getAssignmentForUser(userId: number): WorkOrderAssignment | undefined {\r\n    return (this.assignments || []).find(a => a.user_id === userId);\r\n  }\r\n\r\n  removeAssignmentByUser(userId: number): void {\r\n    const a = this.getAssignmentForUser(userId);\r\n    if (!a) return;\r\n    this.removeAssignment(a);\r\n  }\r\n\r\n  onAssignmentStatusChange(a: WorkOrderAssignment, event: any): void {\r\n    const target = event.target as HTMLSelectElement;\r\n    if (!this.workOrder || !a || !target?.value) return;\r\n    const newStatus = target.value;\r\n    this.assignmentStatuses.set(a.id, newStatus);\r\n    this.workOrderService.updateAssignmentStatus(this.workOrder.id, a.id, newStatus).subscribe({\r\n      next: (updated) => {\r\n        this.assignments = (this.assignments || []).map(x => x.id === updated.id ? { ...x, status: updated.status } as any : x);\r\n        // Disable the select after status changes away from 'assigned'\r\n        const shouldDisable = newStatus !== 'assigned';\r\n        if (shouldDisable) {\r\n          // No direct DOM refs; we rely on template binding to [disabled]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getAssignmentStatusLabel(value: string | null | undefined): string {\r\n    const v = (value || 'assigned').toLowerCase();\r\n    const found = this.assignmentStatusOptions.find(o => o.value === v);\r\n    return found ? found.label : v;\r\n  }\r\n\r\n  getAssignmentStatusClass(value: string | null | undefined): string {\r\n    const v = (value || 'assigned').toLowerCase();\r\n    switch (v) {\r\n      case 'accepted':\r\n        return 'pill-status accepted';\r\n      case 'declined':\r\n        return 'pill-status declined';\r\n      case 'completed':\r\n        return 'pill-status completed';\r\n      default:\r\n        return 'pill-status assigned';\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private workOrderService: WorkOrderService,\r\n    private metaService: MetaWorkOrdersService,\r\n    private fb: FormBuilder,\r\n    private teamService: TeamService\r\n  ) {\r\n    this.commentForm = this.fb.group({\r\n      comment: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const workOrderId = this.route.snapshot.paramMap.get('id');\r\n    if (workOrderId) {\r\n      this.loadWorkOrder(workOrderId);\r\n    }\r\n\r\n    // Load status options from API for the select list\r\n    this.metaService.getStatus().subscribe({\r\n      next: (statuses) => {\r\n        this.statusOptions = statuses || [];\r\n      },\r\n      error: () => {\r\n        this.statusOptions = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n    this.stopCountdown();\r\n  }\r\n\r\n  loadWorkOrder(id: string): void {\r\n    this.isLoading = true;\r\n    \r\n    this.subscription.add(\r\n      this.workOrderService.getWorkOrderById(id).subscribe({\r\n        next: (workOrder) => {\r\n          this.workOrder = workOrder;\r\n          // Load assignments\r\n          this.workOrderService.getAssignments(workOrder.id).subscribe({\r\n            next: (items) => {\r\n              this.assignments = items || [];\r\n              this.selectedUserIds = new Set((this.assignments || []).map(a => a.user_id));\r\n              (this.assignments || []).forEach(a => {\r\n                const status: string = (a as any).status || 'assigned';\r\n                this.assignmentStatuses.set(a.id, status);\r\n              });\r\n            }\r\n          });\r\n          // Load team members for modal selection\r\n          this.teamService.getTeamMembers().subscribe({\r\n            next: (res: any) => {\r\n              this.teamMembers = res?.data || [];\r\n            },\r\n            error: () => { this.teamMembers = []; }\r\n          });\r\n          // Load existing comments from API to ensure consistent shape\r\n          this.workOrderService.getComments(workOrder.id).subscribe({\r\n            next: (comments) => {\r\n              (this.workOrder as any).comments = comments;\r\n            }\r\n          });\r\n          // Load history for preview and modal\r\n          this.workOrderService.getWorkOrderHistory(workOrder.id).subscribe({\r\n            next: (events) => {\r\n              this.fullHistory = events || [];\r\n              this.historyPreview = (events || []).slice(0, 3);\r\n            }\r\n          });\r\n          // Load time logs\r\n          this.workOrderService.getTimeLogs(workOrder.id).subscribe({\r\n            next: (data) => {\r\n              this.timeLogs = data.logs || [];\r\n              this.totalMinutes = data.totals?.total_minutes || 0;\r\n              this.totalCost = data.totals?.total_cost || 0;\r\n              const active = this.timeLogs.find((l) => !l.end_time);\r\n              this.hasActiveSession = !!active;\r\n              if (active && active.start_time) {\r\n                this.isTimerRunning = true;\r\n                this.startCountdown(new Date(active.start_time));\r\n              } else {\r\n                this.isTimerRunning = false;\r\n                this.stopCountdown();\r\n              }\r\n            }\r\n          });\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading work order:', error);\r\n          this.isLoading = false;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  openHistoryModal(): void {\r\n    this.showHistoryModal = true;\r\n  }\r\n\r\n  closeHistoryModal(): void {\r\n    this.showHistoryModal = false;\r\n  }\r\n\r\n  goBack(): void {\r\n    this.router.navigate(['/work-orders']);\r\n  }\r\n\r\n  startTimer(): void {\r\n    this.isTimerRunning = true;\r\n    if (!this.workOrder) return;\r\n    this.workOrderService.startTimer(this.workOrder.id, {\r\n      description: this.currentSession.description || undefined,\r\n      hourly_rate: this.currentSession.hourlyRate || undefined,\r\n    }).subscribe({\r\n      next: () => {\r\n        const now = new Date();\r\n        this.startCountdown(now);\r\n        this.workOrderService.getTimeLogs(this.workOrder!.id).subscribe((data) => {\r\n          this.timeLogs = data.logs || [];\r\n          this.totalMinutes = data.totals?.total_minutes || 0;\r\n          this.totalCost = data.totals?.total_cost || 0;\r\n          this.hasActiveSession = this.timeLogs.some((l) => !l.end_time);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  stopTimer(): void {\r\n    this.isTimerRunning = false;\r\n    if (!this.workOrder) return;\r\n    this.workOrderService.stopTimer(this.workOrder.id).subscribe({\r\n      next: () => {\r\n        this.stopCountdown();\r\n        this.workOrderService.getTimeLogs(this.workOrder!.id).subscribe((data) => {\r\n          this.timeLogs = data.logs || [];\r\n          this.totalMinutes = data.totals?.total_minutes || 0;\r\n          this.totalCost = data.totals?.total_cost || 0;\r\n          this.hasActiveSession = this.timeLogs.some((l) => !l.end_time);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  addComment(): void {\r\n    if (this.commentForm.valid && this.workOrder) {\r\n      const text = this.commentForm.get('comment')?.value as string;\r\n      this.workOrderService.addComment(this.workOrder.id, text).subscribe({\r\n        next: (created) => {\r\n          if (!this.workOrder!.comments) this.workOrder!.comments = [] as any;\r\n          (this.workOrder!.comments as any).unshift(created);\r\n          this.commentForm.reset();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  updateStatus(newStatus: string): void {\r\n    if (this.workOrder) {\r\n      this.workOrder.status = newStatus as any;\r\n      // API call to update status would be implemented here\r\n    }\r\n  }\r\n\r\n  onStatusChange(event: any): void {\r\n    const target = event.target as HTMLSelectElement;\r\n    if (target && target.value) {\r\n      // Find status id by slug from meta API, then call update\r\n      const slug = target.value;\r\n      if (!this.workOrder) return;\r\n      this.metaService.getStatus().subscribe({\r\n        next: (statuses) => {\r\n          const status = statuses.find((s) => s.slug === slug || s.slug === slug.replace('_', '-'));\r\n          if (!status) return;\r\n          this.workOrderService.updateWorkOrderStatus(this.workOrder!.id, status.id).subscribe({\r\n            next: (updated) => {\r\n              // Update local state and show current label\r\n              this.workOrder = { ...(this.workOrder as any), status: updated.status } as any;\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private getStatusSlug(status: any): string {\r\n    if (!status) return 'open';\r\n    if (typeof status === 'string') return status;\r\n    if (typeof status === 'object' && status !== null && 'slug' in status) {\r\n      return (status as { slug: string }).slug;\r\n    }\r\n    return String(status);\r\n  }\r\n\r\n  getStatusClass(status: string | { id: number; name: string; slug: string } | undefined): string {\r\n    const slug = this.getStatusSlug(status as any);\r\n    const statusMap: { [key: string]: string } = {\r\n      'open': 'status-open',\r\n      'in-progress': 'status-in-progress',\r\n      'in_progress': 'status-in-progress',\r\n      'completed': 'status-completed',\r\n      'cancelled': 'status-cancelled'\r\n    };\r\n    return statusMap[slug] || 'status-open';\r\n  }\r\n\r\n  getStatusLabel(status: string | { id: number; name: string; slug: string } | undefined): string {\r\n    const slug = this.getStatusSlug(status as any);\r\n    const statusMap: { [key: string]: string } = {\r\n      'open': 'Open',\r\n      'in-progress': 'In Progress',\r\n      'in_progress': 'In Progress',\r\n      'completed': 'Completed',\r\n      'cancelled': 'Cancelled'\r\n    };\r\n    return statusMap[slug] || slug;\r\n  }\r\n\r\n  private getPrioritySlug(priority: any): string {\r\n    if (!priority) return 'medium';\r\n    if (typeof priority === 'string') return priority;\r\n    if (typeof priority === 'object' && priority !== null && 'slug' in priority) {\r\n      return (priority as { slug: string }).slug;\r\n    }\r\n    return String(priority);\r\n  }\r\n\r\n  getPriorityLabel(priority: string | { id: number; name: string; slug: string } | undefined): string {\r\n    const slug = this.getPrioritySlug(priority as any);\r\n    const map: { [key: string]: string } = {\r\n      'low': 'Low',\r\n      'medium': 'Medium',\r\n      'high': 'High',\r\n      'critical': 'Critical'\r\n    };\r\n    return map[slug] || slug;\r\n  }\r\n\r\n  private startCountdown(start: Date): void {\r\n    this.activeStartTime = start;\r\n    this.updateDisplayedElapsed();\r\n    this.stopCountdown();\r\n    this.timerHandle = setInterval(() => this.updateDisplayedElapsed(), 1000);\r\n  }\r\n\r\n  private stopCountdown(): void {\r\n    if (this.timerHandle) {\r\n      clearInterval(this.timerHandle);\r\n      this.timerHandle = null;\r\n    }\r\n  }\r\n\r\n  private updateDisplayedElapsed(): void {\r\n    if (!this.activeStartTime) {\r\n      this.displayedElapsed = '00:00:00';\r\n      return;\r\n    }\r\n    const now = new Date().getTime();\r\n    const start = this.activeStartTime.getTime();\r\n    const diffSec = Math.max(0, Math.floor((now - start) / 1000));\r\n    const hours = Math.floor(diffSec / 3600);\r\n    const minutes = Math.floor((diffSec % 3600) / 60);\r\n    const seconds = diffSec % 60;\r\n    const pad = (n: number) => n.toString().padStart(2, '0');\r\n    this.displayedElapsed = `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;\r\n  }\r\n}\r\n", "<!-- History Modal as global sibling to avoid stacking context issues -->\n<div class=\"modal-overlay\" *ngIf=\"showHistoryModal\" (click)=\"closeHistoryModal()\">\n  <div class=\"modal\" (click)=\"$event.stopPropagation()\">\n    <div class=\"modal-header\">\n      <h3>Full History</h3>\n      <button class=\"close\" (click)=\"closeHistoryModal()\">×</button>\n    </div>\n    <div class=\"modal-body\">\n      <div *ngFor=\"let evt of fullHistory\" class=\"timeline-item\">\n        <div class=\"timeline-dot\" [class.dot-muted]=\"evt.type !== 'created'\"></div>\n        <div class=\"timeline-content\">\n          <label>{{ evt.title }}</label>\n          <p>{{ evt.timestamp | date:'MMMM d, y \\'at\\' h:mm a' }}</p>\n          <p *ngIf=\"evt.user\">by {{ evt.user.first_name }} {{ evt.user.last_name }}</p>\n          <p *ngIf=\"evt.type === 'comment' && evt.details?.comment\">“{{ evt.details.comment }}”</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button class=\"close-btn\" (click)=\"closeHistoryModal()\">Close</button>\n    </div>\n  </div>\n</div>\n<div class=\"work-order-preview-container\">\n  <!-- Loading State -->\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\n    <div class=\"flex items-center justify-center py-8\">\n      <svg class=\"animate-spin h-8 w-8 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n        <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n      </svg>\n      <span class=\"ml-2 text-gray-600\">Loading work order...</span>\n    </div>\n  </div>\n\n  <!-- Work Order Content -->\n  <div *ngIf=\"!isLoading && workOrder\" class=\"work-order-content\">\n    <!-- Back Navigation and Header -->\n    <div class=\"header-section\">\n      <div class=\"back-link\">\n        <a (click)=\"goBack()\" class=\"back-button\">\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\"></path>\n          </svg>\n          Back to Work Orders\n        </a>\n      </div>\n\n      <div class=\"title-section\">\n        <div class=\"title-content\">\n          <svg class=\"wrench-icon w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path>\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n          </svg>\n          <div class=\"title-text\">\n            <h1>{{ workOrder?.title }}</h1>\n            <p class=\"work-order-id\">Work Order #{{ workOrder?.id }}</p>\n            <div class=\"chips\" style=\"margin-top:4px; display:flex; gap:8px; flex-wrap:wrap;\">\n              <span class=\"chip\" style=\"background:#eef2ff;color:#3730a3;padding:2px 8px;border-radius:9999px;font-size:12px;\">\n                {{ getPriorityLabel($any(workOrder?.priority)) }}\n              </span>\n              <span class=\"chip\" style=\"background:#ecfeff;color:#155e75;padding:2px 8px;border-radius:9999px;font-size:12px;\">\n                {{ workOrder?.category?.name || 'Uncategorized' }}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"action-buttons\">\n          <button class=\"status-button\" [class]=\"getStatusClass($any(workOrder?.status))\">\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n            </svg>\n            {{ getStatusLabel($any(workOrder?.status)) }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Edit Work Order Modal Mount -->\n    <app-edit-work-order-modal\n      *ngIf=\"showEditModal\"\n      [isOpen]=\"showEditModal\"\n      [workOrder]=\"$any(workOrder)\"\n      (modalClosed)=\"closeEditModal()\"\n      (workOrderUpdated)=\"onWorkOrderUpdated($event)\">\n    </app-edit-work-order-modal>\n\n    <app-add-work-order-parts-modal\n      *ngIf=\"showAddPartsModal && workOrder\"\n      [isOpen]=\"showAddPartsModal\"\n      [workOrderId]=\"$any(workOrder)?.id\"\n      (closed)=\"closeAddPartsModal()\"\n      (saved)=\"onPartsAdded()\">\n    </app-add-work-order-parts-modal>\n\n    <app-view-costs-modal\n      *ngIf=\"workOrder\"\n      [isOpen]=\"showViewCostsModal\"\n      [workOrderId]=\"$any(workOrder)?.id\"\n      (closed)=\"showViewCostsModal=false\">\n    </app-view-costs-modal>\n\n    <!-- Main Content Grid -->\n    <div class=\"content-grid\">\n      <!-- Left Column -->\n      <div class=\"left-column\">\n        <!-- Work Order Details Card -->\n        <div class=\"info-card\">\n          <h3 class=\"card-title\">Work Order Details</h3>\n          <div class=\"row\">\n          <div class=\"detail-item col-6\">\n            <label>Description</label>\n            <p>{{ workOrder?.description || 'No description provided' }}</p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Status</label>\n            <p>{{ getStatusLabel($any(workOrder?.status)) }}</p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Priority</label>\n            <p>{{ getPriorityLabel($any(workOrder?.priority)) }}</p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Category</label>\n            <p>{{ workOrder?.category?.name || 'Uncategorized' }}</p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Assigned To</label>\n            <div class=\"assignee-info\">\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path>\n              </svg>\n              <span>\n                <ng-container *ngIf=\"$any(workOrder)?.assigned_to as a\">\n                  <ng-container *ngIf=\"a && (a.first_name || a.last_name); else assignedId\">\n                    {{ a.first_name }} {{ a.last_name }}\n                  </ng-container>\n                  <ng-template #assignedId>\n                    {{ a ? ('User ID: ' + a) : 'Unassigned' }}\n                  </ng-template>\n                </ng-container>\n              </span>\n            </div>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Asset</label>\n            <p>\n              <ng-container *ngIf=\"$any(workOrder)?.asset as asst\">\n                <ng-container *ngIf=\"asst && (asst.name || asst.asset_id); else assetId\">\n                  {{ asst.name || asst.asset_id }}\n                </ng-container>\n                <ng-template #assetId>\n                  {{ asst ? ('Asset ID: ' + asst) : 'No Asset' }}\n                </ng-template>\n              </ng-container>\n            </p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Location</label>\n            <p>\n              <ng-container *ngIf=\"$any(workOrder)?.location as loc\">\n                <ng-container *ngIf=\"loc && (loc.name || loc.full_path); else locationId\">\n                  {{ loc.name || loc.full_path }}\n                </ng-container>\n                <ng-template #locationId>\n                  {{ loc ? ('Location ID: ' + loc) : 'No Location' }}\n                </ng-template>\n              </ng-container>\n            </p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Company</label>\n            <p>{{ workOrder?.company?.name || ('Company ID: ' + workOrder?.company_id) }}</p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Estimated Hours</label>\n            <p>{{ workOrder?.estimated_hours ?? 'N/A' }}</p>\n          </div>\n          <div class=\"detail-item col-6\">\n            <label>Actual Hours</label>\n            <p>{{ workOrder?.actual_hours ?? 'N/A' }}</p>\n          </div>\n          <div class=\"detail-item col-6\" *ngIf=\"workOrder?.notes\">\n            <label>Notes</label>\n            <p>{{ workOrder?.notes }}</p>\n          </div>\n          <div class=\"detail-item col-6\" *ngIf=\"workOrder?.tags\">\n            <label>Tags</label>\n            <p>{{ workOrder?.tags }}</p>\n          </div>\n\n          </div>\n        </div>\n\n        <!-- Time Tracking Card -->\n        <div class=\"info-card\">\n          <h3 class=\"card-title\">Time Tracking</h3>\n          <p class=\"card-subtitle\">Track time spent on this work order</p>\n\n          <div class=\"current-session\">\n            <div class=\"flex items-center justify-between mb-2\">\n              <div class=\"text-sm font-medium\">Current Session</div>\n              <span *ngIf=\"isTimerRunning\" class=\"px-2 py-0.5 text-xs rounded-full\" style=\"background:#dbeafe;color:#1e40af;\">Active</span>\n            </div>\n            <div *ngIf=\"isTimerRunning\" class=\"text-center mb-3\" style=\"font-size:28px;letter-spacing:2px;color:#2563eb;\">\n              {{ displayedElapsed }}\n            </div>\n            <div *ngIf=\"isTimerRunning && hasActiveSession && timeLogs[0]?.start_time\" class=\"text-center text-xs text-gray-500 mb-3\">\n              Started {{ timeLogs[0].start_time | date:'MMM d, hh:mm a' }}\n            </div>\n            <div class=\"form-group\">\n              <label>Task Description (Optional)</label>\n              <input\n                type=\"text\"\n                [(ngModel)]=\"currentSession.description\"\n                placeholder=\"What are you working on?\"\n                class=\"form-input\">\n            </div>\n\n            <div class=\"form-group\">\n              <label>Hourly Rate (Optional)</label>\n              <input\n                type=\"number\"\n                [(ngModel)]=\"currentSession.hourlyRate\"\n                placeholder=\"0\"\n                class=\"form-input\">\n            </div>\n\n            <button\n              (click)=\"isTimerRunning ? stopTimer() : startTimer()\"\n              [class]=\"isTimerRunning ? 'stop-button' : 'start-button'\"\n              class=\"timer-button\">\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path *ngIf=\"!isTimerRunning\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                <path *ngIf=\"isTimerRunning\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                <path *ngIf=\"isTimerRunning\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z\"></path>\n              </svg>\n              {{ isTimerRunning ? 'Stop Timer' : 'Start Timer' }}\n            </button>\n          </div>\n\n          <div class=\"time-summary\">\n            <div class=\"total-time\">\n              <span class=\"time-label\">{{ (totalMinutes / 60) | number:'1.2-2' }} hrs Total Time</span>\n            </div>\n            <div class=\"total-cost\">\n              <span class=\"cost-label\">${{ totalCost | number:'1.2-2' }} Total Cost</span>\n            </div>\n          </div>\n\n          <div class=\"time-log-history\">\n            <h4>Time Log History</h4>\n            <div *ngIf=\"timeLogs.length === 0\" class=\"text-sm text-gray-500\">No time logs yet.</div>\n            <div class=\"time-log-entry\" *ngFor=\"let log of timeLogs\">\n              <div class=\"log-info\">\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path>\n                </svg>\n                <span>{{ log.user ? (log.user.first_name + ' ' + log.user.last_name) : 'Unknown' }}</span>\n              </div>\n              <div class=\"log-time\">\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"></path>\n                </svg>\n                <span>{{ log.start_time | date:'MMM d, h:mm a' }}\n                  <ng-container *ngIf=\"log.end_time\">\n                    • {{ (log.duration_minutes || 0) | number:'1.0-0' }} min\n                  </ng-container>\n                  <ng-container *ngIf=\"!log.end_time\">• running</ng-container>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Status Update Card -->\n        <div class=\"info-card\">\n          <h3 class=\"card-title\">Status Update</h3>\n          <p class=\"card-subtitle\">Update the work order status and add notes about the progress</p>\n\n          <div class=\"status-section\">\n            <label>Current Status:</label>\n            <div class=\"current-status\" [class]=\"getStatusClass($any(workOrder?.status))\">\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n              </svg>\n              {{ getStatusLabel($any(workOrder?.status)) }}\n            </div>\n          </div>\n\n          <div class=\"status-update\">\n            <label>Update Status:</label>\n            <select (change)=\"onStatusChange($event)\" class=\"form-select\">\n              <option *ngFor=\"let s of statusOptions\" [value]=\"s.slug\" [selected]=\"getStatusLabel($any(workOrder?.status)) === s.name\">\n                {{ s.name }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <!-- Comments Card -->\n        <div class=\"info-card\">\n          <h3 class=\"card-title\">Comments</h3>\n          <p class=\"card-subtitle\">Activity log and comments for this work order</p>\n\n          <form [formGroup]=\"commentForm\" (ngSubmit)=\"addComment()\" class=\"comment-form\">\n            <textarea\n              formControlName=\"comment\"\n              placeholder=\"Write a comment about the work order progress...\"\n              class=\"comment-textarea\"></textarea>\n            <button type=\"submit\" class=\"submit-comment-button\">Add Comment</button>\n          </form>\n\n          <div class=\"comments-list\" *ngIf=\"workOrder && workOrder.comments && workOrder.comments.length > 0\">\n            <div *ngFor=\"let comment of workOrder.comments as any\" class=\"comment-entry\">\n              <div class=\"comment-info\">\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path>\n                </svg>\n                <span>{{ comment.user ? (comment.user.first_name + ' ' + comment.user.last_name) : 'Unknown User' }}</span>\n              </div>\n              <div class=\"comment-text\">{{ comment.comment }}</div>\n              <div class=\"comment-time\">\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"></path>\n                </svg>\n                <span>{{ comment.created_at | date:'MMM d, y, h:mm a' }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Right Column -->\n      <div class=\"right-column\">\n        <!-- Timeline Card -->\n        <div class=\"info-card\">\n          <h3 class=\"card-title\">Timeline</h3>\n          <ng-container *ngIf=\"historyPreview && historyPreview.length > 0; else basicTimeline\">\n            <div *ngFor=\"let evt of historyPreview; let i = index\" class=\"timeline-item\">\n              <div class=\"timeline-dot\" [class.dot-muted]=\"evt.type !== 'created'\"></div>\n              <div class=\"timeline-content\">\n                <label>{{ evt.title }}</label>\n                <p>{{ evt.timestamp | date:'MMMM d, y \\'at\\' h:mm a' }}</p>\n                <p *ngIf=\"evt.user\">by {{ evt.user.first_name }} {{ evt.user.last_name }}</p>\n                <p *ngIf=\"evt.type === 'comment' && evt.details?.comment\">“{{ evt.details.comment }}”</p>\n              </div>\n            </div>\n            <button class=\"view-all-button\" (click)=\"openHistoryModal()\">View all</button>\n          </ng-container>\n          <ng-template #basicTimeline>\n            <div class=\"timeline-item\">\n              <div class=\"timeline-dot\"></div>\n              <div class=\"timeline-content\">\n                <label>Created</label>\n                <p>{{ workOrder?.created_at | date:'MMMM d, y \\'at\\' h:mm a' }}</p>\n                <p>by {{ workOrder && workOrder.created_by ? (workOrder.created_by.first_name + ' ' + workOrder.created_by.last_name) : 'Unknown' }}</p>\n              </div>\n            </div>\n            <div class=\"timeline-item\">\n              <div class=\"timeline-dot dot-muted\"></div>\n              <div class=\"timeline-content\">\n                <label>Last Updated</label>\n                <p>{{ workOrder?.updated_at | date:'MMMM d, y \\'at\\' h:mm a' }}</p>\n              </div>\n            </div>\n          </ng-template>\n        </div>\n\n\n\n        <!-- Assignments Card (light UI) -->\n        <div class=\"info-card\">\n          <div class=\"assignments-header\">\n            <h3 class=\"card-title\">Assignments<span *ngIf=\"assignments?.length\"> ({{ assignments.length }})</span></h3>\n            <button class=\"assign-add-btn\" (click)=\"openAssignmentsModal()\">+ Add Assignment</button>\n          </div>\n\n          <div *ngIf=\"assignments.length === 0\" class=\"text-sm text-gray-500\">No assignments yet.</div>\n          <div *ngIf=\"assignments.length > 0\" class=\"assignment-list\">\n            <div class=\"assignment-row\" *ngFor=\"let a of assignments\">\n              <div class=\"assignment-left\">\n                <div class=\"avatar-circle\">{{ (a.user?.first_name || '?')[0] }}{{ (a.user?.last_name || '')[0] || '' }}</div>\n                <div class=\"assignment-meta\">\n                  <div class=\"assignment-name\">{{ a.user?.first_name }} {{ a.user?.last_name }}</div>\n                  <div class=\"assignment-sub\">Assigned {{ a.created_at | date:'shortTime' }} • {{ a.created_at | date:'MMM d' }}</div>\n                </div>\n              </div>\n              <div class=\"assignment-actions\">\n                <ng-container *ngIf=\"(assignmentStatuses.get(a.id) || 'assigned') === 'assigned'; else statusBadge\">\n                  <select class=\"assignment-select\" [value]=\"assignmentStatuses.get(a.id) || 'assigned'\" (change)=\"onAssignmentStatusChange(a, $event)\">\n                    <option *ngFor=\"let opt of assignmentStatusOptions\" [value]=\"opt.value\">{{ opt.label }}</option>\n                  </select>\n                </ng-container>\n                <ng-template #statusBadge>\n                  <span [class]=\"getAssignmentStatusClass(assignmentStatuses.get(a.id))\">{{ getAssignmentStatusLabel(assignmentStatuses.get(a.id)) }}</span>\n                </ng-template>\n                <button class=\"icon-btn danger\" title=\"Remove\" (click)=\"removeAssignment(a)\">🗑</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Add Assignment Modal (light version with checkbox list) -->\n        <div class=\"modal-overlay\" *ngIf=\"showAssignmentsModal\" (click)=\"closeAssignmentsModal()\">\n          <div class=\"modal\" (click)=\"$event.stopPropagation()\">\n            <div class=\"modal-header\">\n              <svg class=\"header-icon w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path>\n              </svg>\n              <h2>Add New Assignment</h2>\n            </div>\n            <div class=\"modal-body\">\n              <!-- Checkbox list styled like assignment rows -->\n              <div class=\"assignment-list\">\n                <div class=\"assignment-row selectable\" *ngFor=\"let m of teamMembers\">\n                  <div class=\"assignment-left\">\n                    <div class=\"avatar-circle\">{{ (m.first_name || '?')[0] }}{{ (m.last_name || '')[0] || '' }}</div>\n                    <div class=\"assignment-meta\">\n                      <div class=\"assignment-name\">{{ m.first_name }} {{ m.last_name }}</div>\n                      <div class=\"assignment-sub\">\n                        <ng-container *ngIf=\"isUserAlreadyAssigned(m.id); else emailOnly\">\n                          Assigned {{ (getAssignmentForUser(m.id)?.created_at) | date:'shortTime' }} • {{ (getAssignmentForUser(m.id)?.created_at) | date:'MMM d' }}\n                        </ng-container>\n                        <ng-template #emailOnly>{{ m.email }}</ng-template>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"assignment-actions\">\n                    <ng-container *ngIf=\"isUserAlreadyAssigned(m.id)\">\n                      <ng-container *ngIf=\"(assignmentStatuses.get(getAssignmentForUser(m.id)?.id || 0) || 'assigned') === 'assigned'; else modalBadge\">\n                        <select class=\"assignment-select\" [value]=\"assignmentStatuses.get(getAssignmentForUser(m.id)?.id || 0) || 'assigned'\" (change)=\"onAssignmentStatusChange(getAssignmentForUser(m.id)!, $event)\">\n                          <option *ngFor=\"let opt of assignmentStatusOptions\" [value]=\"opt.value\">{{ opt.label }}</option>\n                        </select>\n                      </ng-container>\n                      <ng-template #modalBadge>\n                        <span [class]=\"getAssignmentStatusClass(assignmentStatuses.get(getAssignmentForUser(m.id)?.id || 0))\">{{ getAssignmentStatusLabel(assignmentStatuses.get(getAssignmentForUser(m.id)?.id || 0)) }}</span>\n                      </ng-template>\n                    </ng-container>\n                    <button *ngIf=\"isUserAlreadyAssigned(m.id)\" class=\"icon-btn danger\" title=\"Remove\" (click)=\"removeAssignmentByUser(m.id)\">🗑</button>\n                    <input type=\"checkbox\"\n                           [checked]=\"selectedUserIds.has(m.id)\"\n                           (change)=\"toggleUserSelection(m.id, $any($event.target).checked)\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"modal-footer\">\n              <button class=\"btn btn-secondary\" (click)=\"closeAssignmentsModal()\">Cancel</button>\n              <button class=\"btn btn-primary\" (click)=\"saveAssignments()\">Assign</button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Quick Actions Card -->\n        <div class=\"info-card\">\n          <h3 class=\"card-title\">Quick Actions</h3>\n          <div class=\"quick-actions\">\n            <button class=\"action-button\" (click)=\"openEditModal()\">\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"></path>\n              </svg>\n              Edit Work Order\n            </button>\n            <button class=\"action-button\" (click)=\"showViewCostsModal=true\">\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"></path>\n              </svg>\n              View Costs\n            </button>\n            <button class=\"action-button\" (click)=\"openAddPartsModal()\">\n              <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-14V4a2 2 0 00-2-2H6a2 2 0 00-2 2v3m16 0H4\"></path>\n              </svg>\n              Add Parts\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { WorkOrdersComponent } from './work-orders.component';\r\nimport { WorkOrderPreviewComponent } from './components/work-order-preview/work-order-preview.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: WorkOrdersComponent\r\n  },\r\n  {\r\n    path: ':id',\r\n    component: WorkOrderPreviewComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class WorkOrdersRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { WorkOrdersRoutingModule } from './work-orders-routing.module';\r\nimport { WorkOrdersComponent } from './work-orders.component';\r\nimport { \r\n  WorkOrderListComponent,\r\n  WorkOrderCardComponent,\r\n  WorkOrderFiltersComponent,\r\n  WorkOrderStatsComponent,\r\n  WorkOrderPreviewComponent\r\n} from './components';\r\nimport { WorkOrderAnalyticsComponent } from './components/work-order-analytics/work-order-analytics.component';\r\nimport { EditWorkOrderModalComponent } from './components/edit-work-order-modal/edit-work-order-modal.component';\r\nimport { DeleteConfirmationModalComponent } from '../assets/components/delete-confirmation-modal/delete-confirmation-modal.component';\r\nimport { AddWorkOrderPartsModalComponent } from './components/add-work-order-parts-modal/add-work-order-parts-modal.component';\r\nimport { ViewCostsModalComponent } from './components/view-costs-modal/view-costs-modal.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    WorkOrdersComponent,\r\n    WorkOrderListComponent,\r\n    WorkOrderCardComponent,\r\n    WorkOrderFiltersComponent,\r\n    WorkOrderStatsComponent,\r\n    WorkOrderPreviewComponent,\r\n    EditWorkOrderModalComponent,\r\n    AddWorkOrderPartsModalComponent,\r\n    ViewCostsModalComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    WorkOrdersRoutingModule,\r\n    WorkOrderAnalyticsComponent,\r\n    DeleteConfirmationModalComponent\r\n  ]\r\n})\r\nexport class WorkOrdersModule { }\r\n"],
  "mappings": "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",
  "names": ["_c0", "map"]
}
