{
  "version": 3,
  "sources": ["src/app/core/services/meta-work-orders.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Observable, shareReplay, map } from 'rxjs';\r\nimport { MetaItem } from '../types/work-order.types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MetaWorkOrdersService {\r\n  private http = inject(HttpClient);\r\n  private base = `${environment.apiUrl}/meta/work-orders`;\r\n\r\n  private status$?: Observable<MetaItem[]>;\r\n  private priorities$?: Observable<MetaItem[]>;\r\n  private categories$?: Observable<MetaItem[]>;\r\n\r\n  getStatus(): Observable<MetaItem[]> {\r\n    if (!this.status$) {\r\n      this.status$ = this.http\r\n        .get<any>(`${this.base}/status`)\r\n        .pipe(\r\n          map((res) => (Array.isArray(res) ? res : (res?.data as MetaItem[]) ?? [])),\r\n          shareReplay({ bufferSize: 1, refCount: true })\r\n        );\r\n    }\r\n    return this.status$;\r\n  }\r\n\r\n  // Helper to find a status id by slug\r\n  getStatusIdBySlug(slug: string): Observable<number | null> {\r\n    return this.getStatus().pipe(\r\n      map((items) => {\r\n        const found = items.find((s) => s.slug === slug);\r\n        return found ? found.id : null;\r\n      })\r\n    );\r\n  }\r\n\r\n  getPriorities(): Observable<MetaItem[]> {\r\n    if (!this.priorities$) {\r\n      this.priorities$ = this.http\r\n        .get<any>(`${this.base}/priorities`)\r\n        .pipe(\r\n          map((res) => (Array.isArray(res) ? res : (res?.data as MetaItem[]) ?? [])),\r\n          shareReplay({ bufferSize: 1, refCount: true })\r\n        );\r\n    }\r\n    return this.priorities$;\r\n  }\r\n\r\n  getCategories(): Observable<MetaItem[]> {\r\n    if (!this.categories$) {\r\n      this.categories$ = this.http\r\n        .get<any>(`${this.base}/categories`)\r\n        .pipe(\r\n          map((res) => (Array.isArray(res) ? res : (res?.data as MetaItem[]) ?? [])),\r\n          shareReplay({ bufferSize: 1, refCount: true })\r\n        );\r\n    }\r\n    return this.categories$;\r\n  }\r\n\r\n  // Clear cache methods for when data needs to be refreshed\r\n  clearStatusCache(): void {\r\n    this.status$ = undefined;\r\n  }\r\n\r\n  clearPrioritiesCache(): void {\r\n    this.priorities$ = undefined;\r\n  }\r\n\r\n  clearCategoriesCache(): void {\r\n    this.categories$ = undefined;\r\n  }\r\n\r\n  clearAllCache(): void {\r\n    this.clearStatusCache();\r\n    this.clearPrioritiesCache();\r\n    this.clearCategoriesCache();\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAOM,IAAO,wBAAP,MAAO,uBAAqB;EACxB,OAAO,OAAO,UAAU;EACxB,OAAO,GAAG,YAAY,MAAM;EAE5B;EACA;EACA;EAER,YAAS;AACP,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,UAAU,KAAK,KACjB,IAAS,GAAG,KAAK,IAAI,SAAS,EAC9B,KACC,IAAI,CAAC,QAAS,MAAM,QAAQ,GAAG,IAAI,MAAO,KAAK,QAAuB,CAAA,CAAG,GACzE,YAAY,EAAE,YAAY,GAAG,UAAU,KAAI,CAAE,CAAC;IAEpD;AACA,WAAO,KAAK;EACd;;EAGA,kBAAkB,MAAY;AAC5B,WAAO,KAAK,UAAS,EAAG,KACtB,IAAI,CAAC,UAAS;AACZ,YAAM,QAAQ,MAAM,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI;AAC/C,aAAO,QAAQ,MAAM,KAAK;IAC5B,CAAC,CAAC;EAEN;EAEA,gBAAa;AACX,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,cAAc,KAAK,KACrB,IAAS,GAAG,KAAK,IAAI,aAAa,EAClC,KACC,IAAI,CAAC,QAAS,MAAM,QAAQ,GAAG,IAAI,MAAO,KAAK,QAAuB,CAAA,CAAG,GACzE,YAAY,EAAE,YAAY,GAAG,UAAU,KAAI,CAAE,CAAC;IAEpD;AACA,WAAO,KAAK;EACd;EAEA,gBAAa;AACX,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,cAAc,KAAK,KACrB,IAAS,GAAG,KAAK,IAAI,aAAa,EAClC,KACC,IAAI,CAAC,QAAS,MAAM,QAAQ,GAAG,IAAI,MAAO,KAAK,QAAuB,CAAA,CAAG,GACzE,YAAY,EAAE,YAAY,GAAG,UAAU,KAAI,CAAE,CAAC;IAEpD;AACA,WAAO,KAAK;EACd;;EAGA,mBAAgB;AACd,SAAK,UAAU;EACjB;EAEA,uBAAoB;AAClB,SAAK,cAAc;EACrB;EAEA,uBAAoB;AAClB,SAAK,cAAc;EACrB;EAEA,gBAAa;AACX,SAAK,iBAAgB;AACrB,SAAK,qBAAoB;AACzB,SAAK,qBAAoB;EAC3B;;qCAvEW,wBAAqB;EAAA;4EAArB,wBAAqB,SAArB,uBAAqB,WAAA,YADR,OAAM,CAAA;;;sEACnB,uBAAqB,CAAA;UADjC;WAAW,EAAE,YAAY,OAAM,CAAE;;;",
  "names": []
}
