{
  "version": 3,
  "sources": ["src/app/core/services/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface User {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  email_verified_at?: string;\r\n  user_type: string;\r\n  company_id: number;\r\n  company?: Company;\r\n}\r\n\r\nexport interface Company {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  owner_id: number;\r\n  subscription_status: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  success: boolean;\r\n  message: string;\r\n  data?: {\r\n    user: User;\r\n    company?: Company;\r\n    token: string;\r\n    token_type: string;\r\n    email_verified: boolean;\r\n  };\r\n  error?: string;\r\n  email_verified?: boolean;\r\n  user_id?: number;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  first_name: string;\r\n  last_name: string;\r\n  company_name: string;\r\n  email: string;\r\n  password: string;\r\n  password_confirmation: string;\r\n  user_type?: string;\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\nexport interface ResetPasswordRequest {\r\n  token: string;\r\n  email: string;\r\n  password: string;\r\n  password_confirmation: string;\r\n}\r\n\r\nexport interface ResendVerificationRequest {\r\n  email?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = environment.apiUrl;\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadUserFromStorage();\r\n  }\r\n  private getAuthHeaders(): { headers: { [header: string]: string } } {\r\n    const token = this.getToken();\r\n    return {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n      }\r\n    };\r\n  }\r\n\r\n\r\n  register(data: RegisterRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, data, this.getAuthHeaders());\r\n  }\r\n\r\n  login(data: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, data, {headers: {\r\n        'Content-Type': 'application/json',\r\n      }})\r\n      .pipe(\r\n        tap(response => {\r\n          if (response.success && response.data?.token) {\r\n            this.setSession(response.data.token, response.data.user);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  forgotPassword(data: ForgotPasswordRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/forgot-password`, data, this.getAuthHeaders());\r\n  }\r\n\r\n  resetPassword(data: ResetPasswordRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/reset-password`, data, this.getAuthHeaders());\r\n  }\r\n\r\n  verifyEmail(id: string, hash: string): Observable<AuthResponse> {\r\n    return this.http.get<AuthResponse>(`${this.apiUrl}/email/verify/${id}/${hash}`, this.getAuthHeaders());\r\n  }\r\n\r\n  resendVerification(data?: ResendVerificationRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/email/resend`, data || {}, this.getAuthHeaders());\r\n  }\r\n\r\n  getProfile(): Observable<AuthResponse> {\r\n    return this.http.get<AuthResponse>(`${this.apiUrl}/profile`, this.getAuthHeaders());\r\n  }\r\n\r\n  logout(): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/logout`, {}, this.getAuthHeaders())\r\n      .pipe(\r\n        tap(() => {\r\n          this.clearSession();\r\n        })\r\n      );\r\n  }\r\n\r\n  logoutAll(): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/logout-all`, {})\r\n      .pipe(\r\n        tap(() => {\r\n          this.clearSession();\r\n        })\r\n      );\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  private setSession(token: string, user: User): void {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  private clearSession(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  private loadUserFromStorage(): void {\r\n    const token = localStorage.getItem('token');\r\n    const userStr = localStorage.getItem('user');\r\n\r\n    if (token && userStr) {\r\n      try {\r\n        const user = JSON.parse(userStr);\r\n        this.currentUserSubject.next(user);\r\n      } catch (error) {\r\n        this.clearSession();\r\n      }\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAyEM,IAAO,cAAP,MAAO,aAAW;EAKF;EAJZ,SAAS,YAAY;EACrB,qBAAqB,IAAI,gBAA6B,IAAI;EAC3D,eAAe,KAAK,mBAAmB,aAAY;EAE1D,YAAoB,MAAgB;AAAhB,SAAA,OAAA;AAClB,SAAK,oBAAmB;EAC1B;EACQ,iBAAc;AACpB,UAAM,QAAQ,KAAK,SAAQ;AAC3B,WAAO;MACL,SAAS;QACP,gBAAgB;SACZ,QAAQ,EAAE,iBAAiB,UAAU,KAAK,GAAE,IAAK,CAAA;;EAG3D;EAGA,SAAS,MAAqB;AAC5B,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,aAAa,MAAM,KAAK,eAAc,CAAE;EAC5F;EAEA,MAAM,MAAkB;AACtB,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,UAAU,MAAM,EAAC,SAAS;MACxE,gBAAgB;MACjB,CAAC,EACD,KACC,IAAI,cAAW;AACb,UAAI,SAAS,WAAW,SAAS,MAAM,OAAO;AAC5C,aAAK,WAAW,SAAS,KAAK,OAAO,SAAS,KAAK,IAAI;MACzD;IACF,CAAC,CAAC;EAER;EAEA,eAAe,MAA2B;AACxC,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,oBAAoB,MAAM,KAAK,eAAc,CAAE;EACnG;EAEA,cAAc,MAA0B;AACtC,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,mBAAmB,MAAM,KAAK,eAAc,CAAE;EAClG;EAEA,YAAY,IAAY,MAAY;AAClC,WAAO,KAAK,KAAK,IAAkB,GAAG,KAAK,MAAM,iBAAiB,EAAE,IAAI,IAAI,IAAI,KAAK,eAAc,CAAE;EACvG;EAEA,mBAAmB,MAAgC;AACjD,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,iBAAiB,QAAQ,CAAA,GAAI,KAAK,eAAc,CAAE;EACtG;EAEA,aAAU;AACR,WAAO,KAAK,KAAK,IAAkB,GAAG,KAAK,MAAM,YAAY,KAAK,eAAc,CAAE;EACpF;EAEA,SAAM;AACJ,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,WAAW,CAAA,GAAI,KAAK,eAAc,CAAE,EACnF,KACC,IAAI,MAAK;AACP,WAAK,aAAY;IACnB,CAAC,CAAC;EAER;EAEA,YAAS;AACP,WAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,eAAe,CAAA,CAAE,EAChE,KACC,IAAI,MAAK;AACP,WAAK,aAAY;IACnB,CAAC,CAAC;EAER;EAEA,kBAAe;AACb,WAAO,CAAC,CAAC,aAAa,QAAQ,OAAO;EACvC;EAEA,WAAQ;AACN,WAAO,aAAa,QAAQ,OAAO;EACrC;EAEA,iBAAc;AACZ,WAAO,KAAK,mBAAmB;EACjC;EAEQ,WAAW,OAAe,MAAU;AAC1C,iBAAa,QAAQ,SAAS,KAAK;AACnC,iBAAa,QAAQ,QAAQ,KAAK,UAAU,IAAI,CAAC;AACjD,SAAK,mBAAmB,KAAK,IAAI;EACnC;EAEQ,eAAY;AAClB,iBAAa,WAAW,OAAO;AAC/B,iBAAa,WAAW,MAAM;AAC9B,SAAK,mBAAmB,KAAK,IAAI;EACnC;EAEQ,sBAAmB;AACzB,UAAM,QAAQ,aAAa,QAAQ,OAAO;AAC1C,UAAM,UAAU,aAAa,QAAQ,MAAM;AAE3C,QAAI,SAAS,SAAS;AACpB,UAAI;AACF,cAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,aAAK,mBAAmB,KAAK,IAAI;MACnC,SAAS,OAAO;AACd,aAAK,aAAY;MACnB;IACF;EACF;;qCA9GW,cAAW,mBAAA,UAAA,CAAA;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;;;sEAEP,aAAW,CAAA;UAHvB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
