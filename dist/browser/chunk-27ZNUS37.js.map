{
  "version": 3,
  "sources": ["src/app/roles/services/role.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { AuthService } from '../../core/services/auth.service';\r\n\r\n// Role interfaces\r\nexport interface Role {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n  company_id: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  permissions?: Permission;\r\n  users_count?: number;\r\n  showMenu?: boolean; // For UI dropdown menu state\r\n  has_location_access?: boolean; // accessor from backend\r\n}\r\n\r\nexport interface Permission {\r\n  id: number;\r\n  role_id: number;\r\n  permissions: {\r\n    [module: string]: {\r\n      can_view: boolean;\r\n      can_create: boolean;\r\n      can_edit: boolean;\r\n      can_delete: boolean;\r\n      can_export: boolean;\r\n    };\r\n  };\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface AvailablePermissions {\r\n  [module: string]: {\r\n    can_view: boolean;\r\n    can_create: boolean;\r\n    can_edit: boolean;\r\n    can_delete: boolean;\r\n    can_export: boolean;\r\n  };\r\n}\r\n\r\nexport interface RolesResponse {\r\n  success: boolean;\r\n  data: Role[];\r\n}\r\n\r\nexport interface RoleResponse {\r\n  success: boolean;\r\n  data: Role;\r\n}\r\n\r\nexport interface AvailablePermissionsResponse {\r\n  success: boolean;\r\n  data: AvailablePermissions;\r\n}\r\n\r\nexport interface CreateRoleRequest {\r\n  name: string;\r\n  description?: string;\r\n  permissions: {\r\n    [module: string]: {\r\n      can_view: boolean;\r\n      can_create: boolean;\r\n      can_edit: boolean;\r\n      can_delete: boolean;\r\n      can_export: boolean;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface UpdateRoleRequest {\r\n  name?: string;\r\n  description?: string;\r\n  permissions?: {\r\n    [module: string]: {\r\n      can_view: boolean;\r\n      can_create: boolean;\r\n      can_edit: boolean;\r\n      can_delete: boolean;\r\n      can_export: boolean;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface AssignRoleRequest {\r\n  user_id: number;\r\n  role_id: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleService {\r\n  private apiUrl = `${environment.apiUrl}/roles`;\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  private getAuthHeaders(): { headers: { [header: string]: string } } {\r\n    const token = this.authService.getToken();\r\n    return {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n      }\r\n    };\r\n  }\r\n\r\n  // Get all roles\r\n  getRoles(): Observable<RolesResponse> {\r\n    return this.http.get<RolesResponse>(this.apiUrl, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get a specific role\r\n  getRole(id: number): Observable<RoleResponse> {\r\n    return this.http.get<RoleResponse>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Create a new role\r\n  createRole(roleData: CreateRoleRequest): Observable<RoleResponse> {\r\n    return this.http.post<RoleResponse>(this.apiUrl, roleData, this.getAuthHeaders());\r\n  }\r\n\r\n  // Update a role\r\n  updateRole(id: number, roleData: UpdateRoleRequest): Observable<RoleResponse> {\r\n    return this.http.put<RoleResponse>(`${this.apiUrl}/${id}`, roleData, this.getAuthHeaders());\r\n  }\r\n\r\n  // Delete a role\r\n  deleteRole(id: number): Observable<{ success: boolean; message: string }> {\r\n    return this.http.delete<{ success: boolean; message: string }>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get available permissions\r\n  getAvailablePermissions(): Observable<AvailablePermissionsResponse> {\r\n    return this.http.get<AvailablePermissionsResponse>(`${this.apiUrl}/available-permissions`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Assign role to user\r\n  assignRoleToUser(data: AssignRoleRequest): Observable<{ success: boolean; message: string }> {\r\n    return this.http.post<{ success: boolean; message: string }>(`${this.apiUrl}/assign-to-user`, data, this.getAuthHeaders());\r\n  }\r\n\r\n  // Remove role from user\r\n  removeRoleFromUser(data: AssignRoleRequest): Observable<{ success: boolean; message: string }> {\r\n    return this.http.post<{ success: boolean; message: string }>(`${this.apiUrl}/remove-from-user`, data, this.getAuthHeaders());\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAiGM,IAAO,cAAP,MAAO,aAAW;EAGF;EAA0B;EAFtC,SAAS,GAAG,YAAY,MAAM;EAEtC,YAAoB,MAA0B,aAAwB;AAAlD,SAAA,OAAA;AAA0B,SAAA,cAAA;EAA2B;EAEjE,iBAAc;AACpB,UAAM,QAAQ,KAAK,YAAY,SAAQ;AACvC,WAAO;MACL,SAAS;QACP,gBAAgB;SACZ,QAAQ,EAAE,iBAAiB,UAAU,KAAK,GAAE,IAAK,CAAA;;EAG3D;;EAGA,WAAQ;AACN,WAAO,KAAK,KAAK,IAAmB,KAAK,QAAQ,KAAK,eAAc,CAAE;EACxE;;EAGA,QAAQ,IAAU;AAChB,WAAO,KAAK,KAAK,IAAkB,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,KAAK,eAAc,CAAE;EAClF;;EAGA,WAAW,UAA2B;AACpC,WAAO,KAAK,KAAK,KAAmB,KAAK,QAAQ,UAAU,KAAK,eAAc,CAAE;EAClF;;EAGA,WAAW,IAAY,UAA2B;AAChD,WAAO,KAAK,KAAK,IAAkB,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,UAAU,KAAK,eAAc,CAAE;EAC5F;;EAGA,WAAW,IAAU;AACnB,WAAO,KAAK,KAAK,OAA8C,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,KAAK,eAAc,CAAE;EAC9G;;EAGA,0BAAuB;AACrB,WAAO,KAAK,KAAK,IAAkC,GAAG,KAAK,MAAM,0BAA0B,KAAK,eAAc,CAAE;EAClH;;EAGA,iBAAiB,MAAuB;AACtC,WAAO,KAAK,KAAK,KAA4C,GAAG,KAAK,MAAM,mBAAmB,MAAM,KAAK,eAAc,CAAE;EAC3H;;EAGA,mBAAmB,MAAuB;AACxC,WAAO,KAAK,KAAK,KAA4C,GAAG,KAAK,MAAM,qBAAqB,MAAM,KAAK,eAAc,CAAE;EAC7H;;qCArDW,cAAW,mBAAA,UAAA,GAAA,mBAAA,WAAA,CAAA;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;;;sEAEP,aAAW,CAAA;UAHvB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
