{
  "version": 3,
  "sources": ["src/app/inventory/components/stock-levels/stock-levels.component.ts", "src/app/inventory/components/stock-levels/stock-levels.component.html"],
  "sourcesContent": ["import {Component, OnInit} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {\r\n  InventoryAnalyticsService,\r\n  InventoryStock,\r\n  StockAdjustmentRequest,\r\n  StockTransferRequest,\r\n  StockReserveRequest,\r\n  StockCountRequest,\r\n  LocationResponse\r\n} from '../../../core/services/inventory-analytics.service';\r\n\r\n@Component({\r\n  selector: 'app-stock-levels',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './stock-levels.component.html',\r\n  styleUrls: ['./stock-levels.component.scss']\r\n})\r\nexport class StockLevelsComponent implements OnInit {\r\n  // Data properties\r\n  stockLevels: InventoryStock[] = [];\r\n  loading = true;\r\n  reserveLoading = false;\r\n  transferLoading = false;\r\n  countLoading = false;\r\n  releaseLoading = false;\r\n  error: string | null = null;\r\n  adjustStockLoading = false;\r\n  // Search and filter properties\r\n  searchTerm = '';\r\n  selectedLocationId: number | null = null;\r\n  selectedPartId: number | null = null;\r\n  currentPage = 1;\r\n  perPage = 15;\r\n  totalStocks = 0;\r\n  totalPages = 0;\r\n  locationDropdownOpen = false;\r\n  partDropdownOpen = false;\r\n  // Summary data\r\n  summaryData = {\r\n    totalItems: 0,\r\n    totalValue: 0,\r\n    lowStockItems: 0,\r\n    outOfStockItems: 0\r\n  };\r\n\r\n  // Modal states\r\n  showAdjustmentModal = false;\r\n  showTransferModal = false;\r\n  showReserveModal = false;\r\n  showCountModal = false;\r\n\r\n  // Form data\r\n  adjustmentForm: StockAdjustmentRequest = {\r\n    part_id: null,\r\n    location_id: null,\r\n    type: 'receipt',\r\n    quantity: 0,\r\n    reason: '',\r\n  };\r\n\r\n  transferForm: StockTransferRequest = {\r\n    part_id: 0,\r\n    from_location_id: 0,\r\n    to_location_id: 0,\r\n    quantity: 1\r\n  };\r\n\r\n  reserveForm: StockReserveRequest = {\r\n    part_id: 0,\r\n    location_id: 0,\r\n    quantity: 1\r\n  };\r\n\r\n  countForm: StockCountRequest = {\r\n    part_id: 0,\r\n    location_id: 0,\r\n    counted_quantity: 0\r\n  };\r\n\r\n  // Available locations (you might want to fetch this from a separate API)\r\n  availableLocations: any[] = [];\r\n  availableParts: any[] = [];\r\n  releaseQuantities: { [stockId: number]: number } = {};\r\n  constructor(private analyticsService: InventoryAnalyticsService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadStockLevels();\r\n    this.loadAvailableLocations();\r\n    this.loadAvailableParts();\r\n  }\r\n\r\n  loadStockLevels(): void {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    this.analyticsService.getStockLevels(\r\n      this.selectedLocationId || undefined,\r\n      this.selectedPartId || undefined,\r\n      this.searchTerm || undefined,\r\n      this.currentPage,\r\n      this.perPage\r\n    ).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          // Normalize numeric fields (average_cost can come back as a string)\r\n          this.stockLevels = response.data.data.map((s: any) => ({\r\n            ...s,\r\n            average_cost: typeof s.average_cost === 'string' ? parseFloat(s.average_cost) : (s.average_cost ?? 0),\r\n            on_hand: typeof s.on_hand === 'string' ? parseFloat(s.on_hand) : s.on_hand,\r\n            available: typeof s.available === 'string' ? parseFloat(s.available) : s.available,\r\n            reserved: typeof s.reserved === 'string' ? parseFloat(s.reserved) : s.reserved,\r\n          }));\r\n          this.totalStocks = response.data.total;\r\n          this.totalPages = response.data.last_page;\r\n          this.currentPage = response.data.current_page;\r\n          this.calculateSummaryData();\r\n        } else {\r\n          this.error = 'Failed to load stock levels';\r\n        }\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading stock levels:', err);\r\n        this.error = 'Error loading stock levels. Please try again.';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  loadAvailableLocations(): void {\r\n    console.log('Loading available locations...');\r\n    console.log('API URL:', this.analyticsService['apiUrl']);\r\n\r\n    // Fetch locations from the API with exact parameters as specified\r\n    this.analyticsService.getLocations(1, 100, 0, 'created', 'desc').subscribe({\r\n      next: (response: any) => {\r\n        console.log('Locations API response:', response);\r\n        console.log('Response success:', response.success);\r\n        console.log('Response data:', response.data);\r\n\r\n        // Handle different possible response structures\r\n        let locationsData: any[] = [];\r\n\r\n        if (response.success && response.data) {\r\n          // Check if data is directly an array\r\n          if (Array.isArray(response.data)) {\r\n            locationsData = response.data;\r\n          }\r\n          // Check if data has a data property (paginated response)\r\n          else if (response.data.data && Array.isArray(response.data.data)) {\r\n            locationsData = response.data.data;\r\n          }\r\n          // Check if data has a locations property\r\n          else if (response.data.locations && Array.isArray(response.data.locations)) {\r\n            locationsData = response.data.locations;\r\n          }\r\n        }\r\n\r\n        if (locationsData.length > 0) {\r\n          this.availableLocations = locationsData.map(location => ({\r\n            id: location.id,\r\n            name: location.name || location.title || location.display_name || 'Unknown Location',\r\n            code: location.code || location.short_code || (location.name ? location.name.substring(0, 2).toUpperCase() : 'LO')\r\n          }));\r\n          console.log('Available locations loaded:', this.availableLocations);\r\n          console.log('Locations count:', this.availableLocations.length);\r\n        } else {\r\n          console.error('Failed to load locations for dropdown - no valid data found');\r\n          console.error('Response structure:', {\r\n            success: response.success,\r\n            hasData: !!response.data,\r\n            dataType: typeof response.data,\r\n            isArray: Array.isArray(response.data),\r\n            dataKeys: response.data ? Object.keys(response.data) : []\r\n          });\r\n          // Fallback to mock data if API response is not successful\r\n          this.availableLocations = [\r\n            {id: 1, name: 'Main Warehouse', code: 'MW'},\r\n            {id: 2, name: 'Secondary Storage', code: 'SS'},\r\n            {id: 3, name: 'Field Office', code: 'FO'}\r\n          ];\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        console.error('Error loading locations:', err);\r\n        console.error('Error details:', {\r\n          status: err.status,\r\n          statusText: err.statusText,\r\n          message: err.message,\r\n          error: err.error\r\n        });\r\n        // Fallback to mock data if API fails\r\n        this.availableLocations = [\r\n          {id: 1, name: 'Main Warehouse', code: 'MW'},\r\n          {id: 2, name: 'Secondary Storage', code: 'SS'},\r\n          {id: 3, name: 'Field Office', code: 'FO'}\r\n        ];\r\n        console.log('Using fallback locations:', this.availableLocations);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadAvailableParts(): void {\r\n    console.log('Loading available parts...');\r\n    // Fetch parts from the API\r\n    this.analyticsService.getPartsCatalog('', 'active', 1, 100).subscribe({\r\n      next: (response: any) => {\r\n        console.log('Parts API response:', response);\r\n        if (response.success) {\r\n          this.availableParts = response.data.data.map((part: any) => ({\r\n            id: part.id,\r\n            name: part.name,\r\n            part_number: part.part_number\r\n          }));\r\n          console.log('Available parts loaded:', this.availableParts);\r\n        } else {\r\n          console.error('Failed to load parts for dropdown');\r\n          // Fallback to mock data if API response is not successful\r\n          this.availableParts = [\r\n            {id: 1, name: 'Sample Part 1', part_number: 'P001'},\r\n            {id: 2, name: 'Sample Part 2', part_number: 'P002'},\r\n            {id: 3, name: 'Sample Part 3', part_number: 'P003'}\r\n          ];\r\n        }\r\n      },\r\n      error: (err: any) => {\r\n        console.error('Error loading parts for dropdown:', err);\r\n        // Fallback to mock data if API fails\r\n        this.availableParts = [\r\n          {id: 1, name: 'Sample Part 1', part_number: 'P001'},\r\n          {id: 2, name: 'Sample Part 2', part_number: 'P002'},\r\n          {id: 3, name: 'Sample Part 3', part_number: 'P003'}\r\n        ];\r\n        console.log('Using fallback parts:', this.availableParts);\r\n      }\r\n    });\r\n  }\r\n\r\n  calculateSummaryData(): void {\r\n    this.summaryData.totalItems = this.totalStocks;\r\n    this.summaryData.totalValue = this.stockLevels.reduce((sum, stock) =>\r\n      sum + (stock.on_hand * stock.average_cost), 0\r\n    );\r\n    this.summaryData.lowStockItems = this.stockLevels.filter(stock =>\r\n      stock.on_hand <= (stock.part.reorder_point || 0)\r\n    ).length;\r\n    this.summaryData.outOfStockItems = this.stockLevels.filter(stock =>\r\n      stock.on_hand <= 0\r\n    ).length;\r\n  }\r\n\r\n  applyFilters(): void {\r\n    this.currentPage = 1;\r\n    this.loadStockLevels();\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.searchTerm = '';\r\n    this.selectedLocationId = null;\r\n    this.selectedPartId = null;\r\n    this.currentPage = 1;\r\n    this.loadStockLevels();\r\n  }\r\n\r\n  onPageChange(page: number): void {\r\n    this.currentPage = page;\r\n    this.loadStockLevels();\r\n  }\r\n\r\n  // Stock Adjustment\r\n  openAdjustmentModal(stock?: InventoryStock): void {\r\n    console.log('Opening adjustment modal...');\r\n    console.log('Available locations:', this.availableLocations);\r\n    console.log('Available parts:', this.availableParts);\r\n\r\n    // Ensure locations are loaded when modal opens\r\n    if (this.availableLocations.length === 0) {\r\n      console.log('No locations available, reloading...');\r\n      this.loadAvailableLocations();\r\n    }\r\n\r\n    if (stock) {\r\n      this.adjustmentForm = {\r\n        part_id: stock.part_id,\r\n        location_id: stock.location_id,\r\n        type: 'receipt',\r\n        quantity: 1\r\n      };\r\n    }\r\n    this.showAdjustmentModal = true;\r\n  }\r\n\r\n  closeAdjustmentModal(): void {\r\n    this.showAdjustmentModal = false;\r\n    this.adjustmentForm = {\r\n      part_id: null,\r\n      location_id: null,\r\n      type: 'receipt',\r\n      quantity: 0,\r\n      reason: '',\r\n      notes: '',\r\n    };\r\n  }\r\n\r\n  onAdjustStock(): void {\r\n    if (this.adjustmentForm.part_id && this.adjustmentForm.location_id && this.adjustmentForm.quantity !== 0) {\r\n      this.adjustStockLoading = true;\r\n      // Set a default type based on quantity (positive = receipt, negative = issue)\r\n      const adjustmentData: StockAdjustmentRequest = {\r\n        ...this.adjustmentForm,\r\n        type: this.adjustmentForm.quantity > 0 ? 'receipt' : 'issue'\r\n      };\r\n\r\n      this.analyticsService.adjustStock(adjustmentData).subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.closeAdjustmentModal();\r\n            this.loadStockLevels();\r\n            // You could add a success notification here\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.adjustStockLoading = false;\r\n          console.error('Error adjusting stock:', err);\r\n          // You could add an error notification here\r\n        }\r\n      }).add(() => {\r\n        this.adjustStockLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Stock Transfer\r\n  openTransferModal(stock?: InventoryStock): void {\r\n    if (stock) {\r\n      this.transferForm = {\r\n        part_id: stock.part_id,\r\n        from_location_id: stock.location_id,\r\n        to_location_id: 0,\r\n        quantity: 1\r\n      };\r\n    }\r\n    this.showTransferModal = true;\r\n  }\r\n\r\n  closeTransferModal(): void {\r\n    this.showTransferModal = false;\r\n    this.transferForm = {\r\n      part_id: 0,\r\n      from_location_id: 0,\r\n      to_location_id: 0,\r\n      quantity: 1\r\n    };\r\n  }\r\n\r\n  onTransferStock(): void {\r\n    if (this.transferForm.part_id && this.transferForm.from_location_id &&\r\n      this.transferForm.to_location_id && this.transferForm.quantity > 0 &&\r\n      this.transferForm.from_location_id !== this.transferForm.to_location_id) {\r\n      this.transferLoading = true;\r\n      this.analyticsService.transferStock(this.transferForm).subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.closeTransferModal();\r\n            this.loadStockLevels();\r\n            // You could add a success notification here\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.transferLoading = false;\r\n          console.error('Error transferring stock:', err);\r\n          // You could add an error notification here\r\n        }\r\n      }).add(() => {\r\n        this.transferLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Stock Reservation\r\n  openReserveModal(stock?: InventoryStock): void {\r\n    if (stock) {\r\n      this.reserveForm = {\r\n        part_id: stock.part_id,\r\n        location_id: stock.location_id,\r\n        quantity: 1\r\n      };\r\n    }\r\n    this.showReserveModal = true;\r\n  }\r\n\r\n  closeReserveModal(): void {\r\n    this.showReserveModal = false;\r\n    this.reserveForm = {\r\n      part_id: 0,\r\n      location_id: 0,\r\n      quantity: 1\r\n    };\r\n  }\r\n\r\n  onReserveStock(): void {\r\n    if (this.reserveForm.part_id && this.reserveForm.location_id && this.reserveForm.quantity > 0) {\r\n      this.reserveLoading = true;\r\n      this.analyticsService.reserveStock(this.reserveForm).subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.closeReserveModal();\r\n            this.loadStockLevels();\r\n            // You could add a success notification here\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.reserveLoading = false;\r\n          console.error('Error reserving stock:', err);\r\n          // You could add an error notification here\r\n        }\r\n      }).add(() => {\r\n        this.reserveLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Stock Count\r\n  openCountModal(stock?: InventoryStock): void {\r\n    if (stock) {\r\n      this.countForm = {\r\n        part_id: stock.part_id,\r\n        location_id: stock.location_id,\r\n        counted_quantity: stock.on_hand\r\n      };\r\n    }\r\n    this.showCountModal = true;\r\n  }\r\n\r\n  closeCountModal(): void {\r\n    this.showCountModal = false;\r\n    this.countForm = {\r\n      part_id: 0,\r\n      location_id: 0,\r\n      counted_quantity: 0\r\n    };\r\n  }\r\n\r\n  onPerformStockCount(): void {\r\n    if (this.countForm.part_id && this.countForm.location_id && this.countForm.counted_quantity >= 0) {\r\n      this.countLoading = true;\r\n      this.analyticsService.performStockCount(this.countForm).subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.closeCountModal();\r\n            this.loadStockLevels();\r\n            // You could add a success notification here\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.countLoading = false;\r\n          console.error('Error performing stock count:', err);\r\n          // You could add an error notification here\r\n        }\r\n      }).add(() => {\r\n        this.countLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Stock Release\r\n  onReleaseStock(stock: InventoryStock, quantity: number | null = 1): void {\r\n    if (quantity === null) {\r\n      quantity = 1;\r\n    }\r\n    if (quantity > 0 && quantity <= stock.reserved) {\r\n      const releaseData: StockReserveRequest = {\r\n        part_id: stock.part_id,\r\n        location_id: stock.location_id,\r\n        quantity: quantity\r\n      };\r\n      this.releaseLoading = true;\r\n      this.analyticsService.releaseStock(releaseData).subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.loadStockLevels();\r\n            this.releaseQuantities = {};\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.releaseLoading = false;\r\n          console.error('Error releasing stock:', err);\r\n          // You could add an error notification here\r\n        }\r\n      }).add(() => {\r\n        this.releaseLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  getStockStatus(stock: InventoryStock): { status: string; class: string; icon: string } {\r\n    if (stock.on_hand <= 0) {\r\n      return {status: 'Out of Stock', class: 'out-of-stock', icon: 'x-circle'};\r\n    }\r\n\r\n    if (stock.on_hand <= (stock.part.reorder_point || 0)) {\r\n      return {status: 'Low Stock', class: 'low-stock', icon: 'exclamation-triangle'};\r\n    }\r\n\r\n    if (stock.reserved > 0) {\r\n      return {status: 'Partially Reserved', class: 'reserved', icon: 'lock-closed'};\r\n    }\r\n\r\n    return {status: 'In Stock', class: 'in-stock', icon: 'check-circle'};\r\n  }\r\n\r\n  getStockLevelClass(stock: InventoryStock): string {\r\n    const percentage = stock.on_hand > 0 ? (stock.available / stock.on_hand) * 100 : 0;\r\n\r\n    if (percentage <= 20) return 'critical';\r\n    if (percentage <= 50) return 'warning';\r\n    return 'good';\r\n  }\r\n\r\n  refreshData(): void {\r\n    this.loadStockLevels();\r\n  }\r\n\r\n  getAdjustmentTypes(): string[] {\r\n    return ['receipt', 'issue', 'adjustment', 'return'];\r\n  }\r\n\r\n  // Debug method to test API calls\r\n  testAPIs(): void {\r\n    console.log('Testing APIs...');\r\n    console.log('Environment API URL:', this.analyticsService['apiUrl']);\r\n\r\n    // Test locations API with exact parameters\r\n    this.analyticsService.getLocations(1, 100, 0, 'created', 'desc').subscribe({\r\n      next: (response) => {\r\n        console.log('Locations API test response:', response);\r\n      },\r\n      error: (err) => {\r\n        console.error('Locations API test error:', err);\r\n      }\r\n    });\r\n\r\n    // Test parts API\r\n    this.analyticsService.getPartsCatalog('', 'active', 1, 5).subscribe({\r\n      next: (response) => {\r\n        console.log('Parts API test response:', response);\r\n      },\r\n      error: (err) => {\r\n        console.error('Parts API test error:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Method to refresh locations data\r\n  refreshLocations(): void {\r\n    console.log('Refreshing locations data...');\r\n    this.loadAvailableLocations();\r\n  }\r\n\r\n  // Method to force reload locations and show status\r\n  forceReloadLocations(): void {\r\n    console.log('Force reloading locations...');\r\n    this.availableLocations = []; // Clear current locations\r\n    this.loadAvailableLocations();\r\n\r\n    // Show a temporary message\r\n    setTimeout(() => {\r\n      if (this.availableLocations.length === 0) {\r\n        console.log('Still no locations after force reload');\r\n      } else {\r\n        console.log('Locations successfully loaded after force reload');\r\n      }\r\n    }, 2000);\r\n  }\r\n\r\n  // Method to manually test the locations API\r\n  testLocationsAPI(): void {\r\n    console.log('=== Testing Locations API ===');\r\n    console.log('Current token:', localStorage.getItem('token'));\r\n    console.log('Current API URL:', this.analyticsService['apiUrl']);\r\n\r\n    // Test with a simple HTTP call to see what we get\r\n    this.analyticsService.getLocations(1, 5, 0, 'created', 'desc').subscribe({\r\n      next: (response) => {\r\n        console.log('✅ Locations API test successful:', response);\r\n        if (response.success && response.data && response.data.data) {\r\n          console.log('✅ Locations found:', response.data.data.length);\r\n          console.log('✅ First location:', response.data.data[0]);\r\n        } else {\r\n          console.log('❌ No locations in response');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.log('❌ Locations API test failed:', err);\r\n        console.log('❌ Error status:', err.status);\r\n        console.log('❌ Error message:', err.message);\r\n      }\r\n    });\r\n  }\r\n}\r\n", "<div class=\"stock-levels\">\r\n  <!-- Loading State -->\r\n  <div *ngIf=\"loading\" class=\"loading-state\">\r\n    <div class=\"loading-spinner\"></div>\r\n    <p>Loading stock levels...</p>\r\n  </div>\r\n\r\n  <!-- Error State -->\r\n  <div *ngIf=\"error && !loading\" class=\"error-state\">\r\n    <svg class=\"w-12 h-12 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n            d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\r\n    </svg>\r\n    <h3 class=\"error-title\">{{ error }}</h3>\r\n    <button class=\"btn btn-primary\" (click)=\"refreshData()\">\r\n      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n              d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n      </svg>\r\n      Retry\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Stock Levels Content -->\r\n  <div *ngIf=\"!loading && !error\">\r\n    <!-- Summary Cards Row -->\r\n    <div class=\"summary-cards-row\">\r\n      <div class=\"summary-card total-items\">\r\n        <div class=\"card-icon\">\r\n          <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                  d=\"M20 7l-8-4-8 4m16 0l-8 4m8-14V4a2 2 0 00-2-2H6a2 2 0 00-2 2v3m16 0H4\"></path>\r\n          </svg>\r\n        </div>\r\n        <div class=\"card-content\">\r\n          <div class=\"card-value\">{{ summaryData.totalItems }}</div>\r\n          <div class=\"card-label\">Total Stock Items</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"summary-card total-value\">\r\n        <div class=\"card-icon\">\r\n          <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                  d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"></path>\r\n          </svg>\r\n        </div>\r\n        <div class=\"card-content\">\r\n          <div class=\"card-value\">${{ summaryData.totalValue.toLocaleString() }}</div>\r\n          <div class=\"card-label\">Total Inventory Value</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"summary-card low-stock\">\r\n        <div class=\"card-icon\">\r\n          <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                  d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\r\n          </svg>\r\n        </div>\r\n        <div class=\"card-content\">\r\n          <div class=\"card-value warning\">{{ summaryData.lowStockItems }}</div>\r\n          <div class=\"card-label\">Low Stock Items</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"summary-card out-of-stock\">\r\n        <div class=\"card-icon\">\r\n          <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n          </svg>\r\n        </div>\r\n        <div class=\"card-content\">\r\n          <div class=\"card-value danger\">{{ summaryData.outOfStockItems }}</div>\r\n          <div class=\"card-label\">Out of Stock</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Search and Filters Section -->\r\n    <div class=\"search-filters-section\">\r\n      <div class=\"search-row\">\r\n        <div class=\"search-container\">\r\n          <svg class=\"search-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                  d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\r\n          </svg>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search here...\"\r\n            class=\"search-input\"\r\n            [(ngModel)]=\"searchTerm\">\r\n        </div>\r\n\r\n        <div class=\"filter-container position-relative\">\r\n          <select\r\n            (mousedown)=\"locationDropdownOpen = true\"\r\n            (change)=\"locationDropdownOpen =false\"\r\n            (blur)=\"locationDropdownOpen = false\"\r\n            class=\"filter-select\"\r\n            [(ngModel)]=\"selectedLocationId\">\r\n            <option [value]=\"null\">All Locations</option>\r\n            <option *ngFor=\"let location of availableLocations\" [value]=\"location.id\">\r\n              {{ location.name }}\r\n            </option>\r\n          </select>\r\n          <svg\r\n            class=\"dropdown-arrow absolute top-1/2 right-2 transform -translate-y-1/2 w-4 h-4 transition duration-200\"\r\n            [class.rotate-180]=\"locationDropdownOpen\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n          </svg>\r\n        </div>\r\n\r\n        <div class=\"filter-container position-relative\">\r\n          <select\r\n            (mousedown)=\"partDropdownOpen = true\"\r\n            (change)=\"partDropdownOpen =false\"\r\n            (blur)=\"partDropdownOpen = false\"\r\n            class=\"filter-select\"\r\n            [(ngModel)]=\"selectedPartId\">\r\n            <option [value]=\"null\">All Parts</option>\r\n            <option *ngFor=\"let part of availableParts\" [value]=\"part.id\">\r\n              {{ part.part_number }} - {{ part.name }}\r\n            </option>\r\n          </select>\r\n          <svg\r\n            class=\"dropdown-arrow absolute top-1/2 right-2 transform -translate-y-1/2 w-4 h-4 transition duration-200\"\r\n            [class.rotate-180]=\"partDropdownOpen\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n          </svg>\r\n        </div>\r\n        @if (searchTerm || selectedLocationId || selectedPartId) {\r\n          <button class=\"btn btn-outline !border\" (click)=\"clearFilters()\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style=\"margin-right: .5rem;\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n            </svg>\r\n            Clear Filters\r\n          </button>\r\n          <button class=\"btn btn-primary\" (click)=\"applyFilters()\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style=\"margin-right: .5rem;\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\r\n            </svg>\r\n            Apply Filters\r\n          </button>\r\n        }\r\n\r\n      </div>\r\n\r\n      <div class=\"actions-row\">\r\n        <div class=\"bulk-actions\">\r\n          <button class=\"btn btn-primary\" (click)=\"openAdjustmentModal()\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n            </svg>\r\n            Stock Adjustment\r\n          </button>\r\n          <button class=\"btn btn-secondary !hidden\" (click)=\"openTransferModal()\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\"></path>\r\n            </svg>\r\n            Transfer Stock\r\n          </button>\r\n          <button class=\"btn btn-warning !hidden\" (click)=\"openCountModal()\">\r\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"></path>\r\n            </svg>\r\n            Stock Count\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Stock Levels Table -->\r\n    <div class=\"stock-table-container\">\r\n      <table class=\"stock-table\">\r\n        <thead>\r\n        <tr class=\"uppercase\">\r\n          <th class=\"th-part\">Part</th>\r\n          <th class=\"th-location\">Location</th>\r\n          <th class=\"th-on-hand\">On Hand</th>\r\n          <th class=\"th-available\">Available</th>\r\n          <th class=\"th-reserved\">Reserved</th>\r\n          <th class=\"th-cost\">Average Cost</th>\r\n          <th class=\"th-status\">Status</th>\r\n          <th class=\"th-actions\" style=\"min-width: 220px; width: 20%\">Actions</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        <tr *ngFor=\"let stock of stockLevels\">\r\n          <td class=\"part-info\">\r\n            <div class=\"part-name\">{{ stock.part.name }}</div>\r\n            <div class=\"part-number\">{{ stock.part.part_number }}</div>\r\n          </td>\r\n          <td class=\"location-info\">\r\n            <div class=\"location-name\">{{ stock.location.name }}</div>\r\n            <div class=\"location-code\" *ngIf=\"stock.location.code\">{{ stock.location.code }}</div>\r\n          </td>\r\n          <td class=\"stock-quantity\">\r\n              <span class=\"quantity\" [class]=\"getStockLevelClass(stock)\">\r\n                {{ stock.on_hand }}\r\n              </span>\r\n          </td>\r\n          <td class=\"stock-quantity\">\r\n            <span class=\"quantity available\">{{ stock.available }}</span>\r\n          </td>\r\n          <td class=\"stock-quantity\">\r\n            <span class=\"quantity reserved\" *ngIf=\"stock.reserved > 0\">{{ stock.reserved }}</span>\r\n            <span class=\"quantity\" *ngIf=\"stock.reserved === 0\">-</span>\r\n          </td>\r\n          <td class=\"stock-cost\">\r\n            <span class=\"cost\" *ngIf=\"stock.average_cost > 0\">${{ stock.average_cost | number:'1.2-2' }}</span>\r\n            <span class=\"cost\" *ngIf=\"!stock.average_cost || stock.average_cost === 0\">-</span>\r\n          </td>\r\n          <td class=\"stock-status\">\r\n              <span class=\"status-badge\" [class]=\"getStockStatus(stock).class\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                        d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\r\n                </svg>\r\n                {{ getStockStatus(stock).status }}\r\n              </span>\r\n          </td>\r\n          <td class=\"stock-actions\" style=\"min-width: 220px; width: 20%\">\r\n            <div class=\"action-buttons\">\r\n              <button class=\"action-btn adjust\" (click)=\"openAdjustmentModal(stock)\" title=\"Adjust Stock\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                        d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n                </svg>\r\n              </button>\r\n              @if (stock.available > 0){\r\n                <button class=\"action-btn transfer\" (click)=\"openTransferModal(stock)\" title=\"Transfer Stock\">\r\n                  <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                          d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\"></path>\r\n                  </svg>\r\n                </button>\r\n\r\n                <button class=\"action-btn reserve\" (click)=\"openReserveModal(stock)\" title=\"Reserve Stock\">\r\n                  <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                          d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"></path>\r\n                  </svg>\r\n                </button>\r\n              }\r\n\r\n\r\n              <button class=\"action-btn count\" (click)=\"openCountModal(stock)\" title=\"Stock Count\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                        d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"></path>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n\r\n            <!-- Quick Release for Reserved Stock -->\r\n            <div class=\"quick-release\" *ngIf=\"stock.reserved > 0\">\r\n              <input\r\n                type=\"number\"\r\n                [(ngModel)]=\"releaseQuantities[stock.id]\"\r\n                class=\"release-quantity\"\r\n                [max]=\"stock.reserved\"\r\n                min=\"1\"\r\n                placeholder=\"Qty\">\r\n              <button class=\"release-btn\" (click)=\"onReleaseStock(stock, releaseQuantities[stock.id])\"\r\n                      title=\"Release Reserved Stock\">\r\n                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                        d=\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\"></path>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- No Results Message -->\r\n      <div *ngIf=\"stockLevels.length === 0\" class=\"no-results\">\r\n        <svg class=\"w-12 h-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n        </svg>\r\n        <h3 class=\"no-results-title\">No Stock Items Found</h3>\r\n        <p class=\"no-results-description\">Try adjusting your search criteria or filters.</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Pagination -->\r\n    <div *ngIf=\"totalPages > 1\" class=\"pagination\">\r\n      <button\r\n        class=\"pagination-btn\"\r\n        [disabled]=\"currentPage === 1\"\r\n        (click)=\"onPageChange(currentPage - 1)\">\r\n        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\"></path>\r\n        </svg>\r\n        Previous\r\n      </button>\r\n\r\n      <div class=\"pagination-pages\">\r\n        <button\r\n          *ngFor=\"let page of [].constructor(totalPages); let i = index\"\r\n          class=\"pagination-page\"\r\n          [class.active]=\"currentPage === i + 1\"\r\n          (click)=\"onPageChange(i + 1)\">\r\n          {{ i + 1 }}\r\n        </button>\r\n      </div>\r\n\r\n      <button\r\n        class=\"pagination-btn\"\r\n        [disabled]=\"currentPage === totalPages\"\r\n        (click)=\"onPageChange(currentPage + 1)\">\r\n        Next\r\n        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"></path>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Stock Adjustment Modal -->\r\n  <div *ngIf=\"showAdjustmentModal\" class=\"modal-overlay\" (click)=\"closeAdjustmentModal()\">\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h2 class=\"modal-title\">\r\n          <a href=\"javascript:void(0)\" (click)=\"closeAdjustmentModal()\">\r\n            <svg class=\"w-5 h-5 inline mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M7 16l-4-4m0 0l4-4m-4 4h18\"></path>\r\n            </svg>\r\n          </a>\r\n          Stock Adjustment\r\n        </h2>\r\n        <button class=\"close-btn\" (click)=\"closeAdjustmentModal()\">\r\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <form (ngSubmit)=\"onAdjustStock()\" class=\"modal-form\">\r\n        <!-- Part Information Section -->\r\n        <div class=\"form-section\">\r\n          <div class=\"section-header\">\r\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M20 7l-8-4-8 4m16 0l-8 4m8-14V4a2 2 0 00-2-2H6a2 2 0 00-2 2v3m16 0H4\"></path>\r\n            </svg>\r\n            <h3 class=\"section-title\">Part Information</h3>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"adjustment-part\" class=\"form-label\">Part *</label>\r\n            <select\r\n              id=\"adjustment-part\"\r\n              class=\"form-select\"\r\n              [(ngModel)]=\"adjustmentForm.part_id\"\r\n              name=\"part_id\"\r\n              required>\r\n              <option value=\"null\">Select a part</option>\r\n              <option *ngFor=\"let part of availableParts\" [value]=\"part.id\">\r\n                {{ part.part_number }} - {{ part.name }}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Location Details Section -->\r\n        <div class=\"form-section\">\r\n          <div class=\"section-header\">\r\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n            </svg>\r\n            <h3 class=\"section-title\">Location Details</h3>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"adjustment-location\" class=\"form-label\">Location *</label>\r\n            <select\r\n              id=\"adjustment-location\"\r\n              class=\"form-select\"\r\n              [(ngModel)]=\"adjustmentForm.location_id\"\r\n              name=\"location_id\"\r\n              required>\r\n              <option value=\"null\">Select a location</option>\r\n              <option *ngFor=\"let location of availableLocations\" [value]=\"location.id\">\r\n                {{ location.name }}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Adjustment Information Section -->\r\n        <div class=\"form-section\">\r\n          <div class=\"section-header\">\r\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>\r\n            </svg>\r\n            <h3 class=\"section-title\">Adjustment Information</h3>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"adjustment-quantity\" class=\"form-label\">Adjustment Quantity *</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"adjustment-quantity\"\r\n              class=\"form-input\"\r\n              [(ngModel)]=\"adjustmentForm.quantity\"\r\n              name=\"quantity\"\r\n              min=\"0\"\r\n              required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"adjustment-reason\" class=\"form-label\">Reason</label>\r\n            <select\r\n              id=\"adjustment-reason\"\r\n              class=\"form-select\"\r\n              [(ngModel)]=\"adjustmentForm.reason\"\r\n              name=\"reason\">\r\n              <option value=\"\">Select a reason</option>\r\n              <option value=\"receipt\">Receipt</option>\r\n              <option value=\"issue\">Issue</option>\r\n              <option value=\"adjustment\">Adjustment</option>\r\n              <option value=\"return\">Return</option>\r\n              <option value=\"damage\">Damage</option>\r\n              <option value=\"expiry\">Expiry</option>\r\n              <option value=\"theft\">Theft</option>\r\n              <option value=\"other\">Other</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Additional Notes Section -->\r\n        <div class=\"form-section\">\r\n          <div class=\"section-header\">\r\n            <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\r\n                    d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n            </svg>\r\n            <h3 class=\"section-title\">Additional Notes</h3>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"adjustment-notes\" class=\"form-label\">Notes</label>\r\n            <textarea\r\n              id=\"adjustment-notes\"\r\n              class=\"form-textarea\"\r\n              [(ngModel)]=\"adjustmentForm.notes\"\r\n              name=\"notes\"\r\n              rows=\"3\"\r\n              placeholder=\"Additional notes...\"></textarea>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-actions\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeAdjustmentModal()\">\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\"\r\n                  [class.opacity-50]=\"adjustStockLoading && !adjustmentForm.part_id && !adjustmentForm.location_id && adjustmentForm.quantity == 0\"\r\n                  [disabled]=\"!adjustmentForm.part_id && !adjustmentForm.location_id && adjustmentForm.quantity == 0\">\r\n\r\n            @if (adjustStockLoading) {\r\n              Adjusting...\r\n              <span\r\n                class=\"border-t border-white animate-spin border-opacity-25 ml-2 w-4 h-4 rounded-full inline-block\"></span>\r\n            } @else {\r\n              Adjust Stock\r\n            }\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Stock Transfer Modal -->\r\n  <div *ngIf=\"showTransferModal\" class=\"modal-overlay\" (click)=\"closeTransferModal()\">\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h2 class=\"modal-title\">Transfer Stock</h2>\r\n        <button class=\"close-btn\" (click)=\"closeTransferModal()\">\r\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <form (ngSubmit)=\"onTransferStock()\" class=\"modal-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"transfer-from\" class=\"form-label\">From Location *</label>\r\n          <select\r\n            id=\"transfer-from\"\r\n            class=\"form-select\"\r\n            [(ngModel)]=\"transferForm.from_location_id\"\r\n            name=\"from_location_id\"\r\n            required>\r\n            <option value=\"\">Select source location</option>\r\n            <option *ngFor=\"let location of availableLocations\" [value]=\"location.id\">\r\n              {{ location.name }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"transfer-to\" class=\"form-label\">To Location *</label>\r\n          <select\r\n            id=\"transfer-to\"\r\n            class=\"form-select\"\r\n            [(ngModel)]=\"transferForm.to_location_id\"\r\n            name=\"to_location_id\"\r\n            required>\r\n            <option value=\"\">Select destination location</option>\r\n            <option *ngFor=\"let location of availableLocations\" [value]=\"location.id\">\r\n              {{ location.name }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"transfer-quantity\" class=\"form-label\">Quantity *</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"transfer-quantity\"\r\n            class=\"form-input\"\r\n            [(ngModel)]=\"transferForm.quantity\"\r\n            name=\"quantity\"\r\n            min=\"1\"\r\n            required>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"transfer-reason\" class=\"form-label\">Reason</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"transfer-reason\"\r\n            class=\"form-input\"\r\n            [(ngModel)]=\"transferForm.reason\"\r\n            name=\"reason\"\r\n            placeholder=\"Reason for transfer\">\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"transfer-notes\" class=\"form-label\">Notes</label>\r\n          <textarea\r\n            id=\"transfer-notes\"\r\n            class=\"form-textarea\"\r\n            [(ngModel)]=\"transferForm.notes\"\r\n            name=\"notes\"\r\n            rows=\"3\"\r\n            placeholder=\"Additional notes\"></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"transfer-reference\" class=\"form-label\">Reference</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"transfer-reference\"\r\n            class=\"form-input\"\r\n            [(ngModel)]=\"transferForm.reference\"\r\n            name=\"reference\"\r\n            placeholder=\"Reference number or document\">\r\n        </div>\r\n\r\n        <div class=\"form-actions\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeTransferModal()\">\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\" [class.opacity-50]=\"transferLoading\"\r\n                  [disabled]=\"transferLoading\">\r\n            @if (transferLoading) {\r\n              Transferring...\r\n              <span\r\n                class=\"border-t border-white animate-spin border-opacity-25 ml-2 w-4 h-4 rounded-full inline-block\"></span>\r\n            } @else {\r\n              Transfer Stock\r\n            }\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Stock Reserve Modal -->\r\n  <div *ngIf=\"showReserveModal\" class=\"modal-overlay\" (click)=\"closeReserveModal()\">\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h2 class=\"modal-title\">Reserve Stock</h2>\r\n        <button class=\"close-btn\" (click)=\"closeReserveModal()\">\r\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <form (ngSubmit)=\"onReserveStock()\" class=\"modal-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"reserve-quantity\" class=\"form-label\">Quantity to Reserve *</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"reserve-quantity\"\r\n            class=\"form-input\"\r\n            [(ngModel)]=\"reserveForm.quantity\"\r\n            name=\"quantity\"\r\n            min=\"1\"\r\n            required>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"reserve-reference\" class=\"form-label\">Reference</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"reserve-reference\"\r\n            class=\"form-input\"\r\n            [(ngModel)]=\"reserveForm.reference\"\r\n            name=\"reference\"\r\n            placeholder=\"Reference for reservation\">\r\n        </div>\r\n\r\n        <div class=\"form-actions\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeReserveModal()\">\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\">\r\n            @if (reserveLoading){\r\n              Reserving Stock...\r\n              <span class=\"border-t border-white animate-spin border-opacity-25 ml-2 w-4 h-4 rounded-full inline-block\"></span>\r\n            } @else {\r\n              Reserve Stock\r\n            }\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Stock Count Modal -->\r\n  <div *ngIf=\"showCountModal\" class=\"modal-overlay\" (click)=\"closeCountModal()\">\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h2 class=\"modal-title\">Stock Count</h2>\r\n        <button class=\"close-btn\" (click)=\"closeCountModal()\">\r\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <form (ngSubmit)=\"onPerformStockCount()\" class=\"modal-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"count-quantity\" class=\"form-label\">Counted Quantity *</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"count-quantity\"\r\n            class=\"form-input\"\r\n            [(ngModel)]=\"countForm.counted_quantity\"\r\n            name=\"counted_quantity\"\r\n            min=\"0\"\r\n            required>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"count-notes\" class=\"form-label\">Notes</label>\r\n          <textarea\r\n            id=\"count-notes\"\r\n            class=\"form-textarea\"\r\n            [(ngModel)]=\"countForm.notes\"\r\n            name=\"notes\"\r\n            rows=\"3\"\r\n            placeholder=\"Notes about the count\"></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-actions\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeCountModal()\">\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\">\r\n            @if (countLoading){\r\n              Updating Count...\r\n              <span class=\"border-t border-white animate-spin border-opacity-25 ml-2 w-4 h-4 rounded-full inline-block\"></span>\r\n            } @else {\r\n              Update Count\r\n            }\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Floating Action Button -->\r\n  <button class=\"fab\" (click)=\"openAdjustmentModal()\" title=\"Stock Adjustment\">\r\n    <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\r\n    </svg>\r\n  </button>\r\n</div>\r\n"],
  "mappings": "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",
  "names": []
}
