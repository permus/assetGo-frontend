{
  "version": 3,
  "sources": ["src/app/ai-features/shared/predictive-maintenance.service.ts", "src/app/ai-features/components/predictive-maintenance/predictive-maintenance.component.ts", "src/app/ai-features/components/natural-language/nlq-header.component.ts", "src/app/ai-features/components/natural-language/nlq-context-strip.component.ts", "src/app/ai-features/shared/natural-language.service.ts", "src/app/ai-features/components/natural-language/nlq-chat.component.ts", "src/app/ai-features/components/natural-language/nlq-examples.component.ts", "src/app/ai-features/components/natural-language/nlq-capabilities.component.ts", "src/app/ai-features/components/natural-language/natural-language.component.ts", "src/app/ai-features/components/ai-recommendations/recs-header.component.ts", "src/app/ai-features/components/ai-recommendations/recs-summary.component.ts", "src/app/ai-features/components/ai-recommendations/recs-filters.component.ts", "src/app/ai-features/components/ai-recommendations/recs-list.component.ts", "src/app/ai-features/shared/ai-recommendations.service.ts", "src/app/ai-features/components/ai-recommendations/ai-recommendations.component.ts", "src/app/ai-features/components/ai-analytics/analytics-header.component.ts", "src/app/ai-features/shared/ai-analytics.service.ts", "src/app/ai-features/components/ai-analytics/health-score-card.component.ts", "src/app/ai-features/components/ai-analytics/risk-assets.component.ts", "src/app/ai-features/components/ai-analytics/performance-insights.component.ts", "src/app/ai-features/components/ai-analytics/cost-optimizations.component.ts", "src/app/ai-features/components/ai-analytics/ai-analytics.component.ts", "src/app/ai-features/ai-features.component.ts", "src/app/ai-features/ai-features.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { \r\n  Prediction, \r\n  Summary, \r\n  PredictiveMaintenanceResponse, \r\n  GeneratePredictionsRequest, \r\n  GeneratePredictionsResponse,\r\n  ExportRequest,\r\n  ExportResponse\r\n} from './predictive-maintenance.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PredictiveMaintenanceService {\r\n  private baseUrl = `${environment.apiUrl}/ai/predictive-maintenance`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Get predictions with optional filtering.\r\n   */\r\n  getPredictions(filters?: {\r\n    riskLevel?: string;\r\n    minConfidence?: number;\r\n    dateFrom?: string;\r\n    dateTo?: string;\r\n  }): Observable<PredictiveMaintenanceResponse> {\r\n    let params = new HttpParams();\r\n    \r\n    if (filters) {\r\n      if (filters.riskLevel) params = params.set('risk_level', filters.riskLevel);\r\n      if (filters.minConfidence) params = params.set('min_confidence', filters.minConfidence.toString());\r\n      if (filters.dateFrom) params = params.set('date_from', filters.dateFrom);\r\n      if (filters.dateTo) params = params.set('date_to', filters.dateTo);\r\n    }\r\n\r\n    return this.http.get<PredictiveMaintenanceResponse>(this.baseUrl, { params });\r\n  }\r\n\r\n  /**\r\n   * Generate new predictions using AI.\r\n   */\r\n  generatePredictions(request: GeneratePredictionsRequest): Observable<GeneratePredictionsResponse> {\r\n    return this.http.post<GeneratePredictionsResponse>(`${this.baseUrl}/generate`, request);\r\n  }\r\n\r\n  /**\r\n   * Export predictions to CSV.\r\n   */\r\n  exportToCsv(filters?: {\r\n    riskLevel?: string;\r\n    minConfidence?: number;\r\n    dateFrom?: string;\r\n    dateTo?: string;\r\n  }): Observable<Blob> {\r\n    let params = new HttpParams().set('format', 'csv');\r\n    \r\n    if (filters) {\r\n      if (filters.riskLevel) params = params.set('filters[risk_level]', filters.riskLevel);\r\n      if (filters.minConfidence) params = params.set('filters[min_confidence]', filters.minConfidence.toString());\r\n      if (filters.dateFrom) params = params.set('filters[date_from]', filters.dateFrom);\r\n      if (filters.dateTo) params = params.set('filters[date_to]', filters.dateTo);\r\n    }\r\n\r\n    return this.http.get(`${this.baseUrl}/export`, { \r\n      params, \r\n      responseType: 'blob' \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get summary statistics.\r\n   */\r\n  getSummary(): Observable<{ success: boolean; data: Summary }> {\r\n    return this.http.get<{ success: boolean; data: Summary }>(`${this.baseUrl}/summary`);\r\n  }\r\n\r\n  /**\r\n   * Clear all predictions.\r\n   */\r\n  clearPredictions(): Observable<{ success: boolean; message: string }> {\r\n    return this.http.delete<{ success: boolean; message: string }>(`${this.baseUrl}/clear`);\r\n  }\r\n\r\n  /**\r\n   * Download CSV file.\r\n   */\r\n  downloadCsv(blob: Blob, filename: string = 'predictive_maintenance.csv'): void {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Format currency for display.\r\n   */\r\n  formatCurrency(amount: number): string {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD'\r\n    }).format(amount);\r\n  }\r\n\r\n  /**\r\n   * Format date for display.\r\n   */\r\n  formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get risk level color class.\r\n   */\r\n  getRiskLevelClass(riskLevel: string): string {\r\n    switch (riskLevel.toLowerCase()) {\r\n      case 'high':\r\n        return 'bg-red-50 text-red-700 border-red-200';\r\n      case 'medium':\r\n        return 'bg-amber-50 text-amber-700 border-amber-200';\r\n      case 'low':\r\n        return 'bg-green-50 text-green-700 border-green-200';\r\n      default:\r\n        return 'bg-gray-50 text-gray-700 border-gray-200';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get confidence level class.\r\n   */\r\n  getConfidenceClass(confidence: number): string {\r\n    if (confidence >= 80) return 'text-green-600';\r\n    if (confidence >= 60) return 'text-amber-600';\r\n    return 'text-red-600';\r\n  }\r\n\r\n  /**\r\n   * Calculate ROI percentage.\r\n   */\r\n  calculateROI(estimatedCost: number, preventiveCost: number): number {\r\n    if (preventiveCost <= 0) return 0;\r\n    return Math.round((estimatedCost - preventiveCost) / preventiveCost * 100);\r\n  }\r\n}\r\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { \r\n  Prediction, \r\n  Summary\r\n} from '../../shared/predictive-maintenance.interface';\r\nimport { PredictiveMaintenanceService } from '../../shared/predictive-maintenance.service';\r\n\r\n@Component({\r\n  selector: 'app-predictive-maintenance',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"predictive-maintenance\">\r\n      <!-- Header -->\r\n      <div class=\"pm-header\">\r\n        <h1 class=\"pm-title\">Predictive Maintenance</h1>\r\n        <p class=\"pm-description\">\r\n          AI-powered failure prediction and maintenance optimization. \r\n          Get intelligent insights to prevent costly breakdowns and optimize your maintenance schedule.\r\n        </p>\r\n      </div>\r\n\r\n      <!-- Actions -->\r\n      <div class=\"pm-actions\">\r\n        <div class=\"action-buttons\">\r\n          <button \r\n            class=\"btn btn-secondary\" \r\n            (click)=\"onRefresh()\"\r\n            [disabled]=\"isLoading\">\r\n            <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path>\r\n              <path d=\"M21 3v5h-5\"></path>\r\n              <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path>\r\n              <path d=\"M3 21v-5h5\"></path>\r\n            </svg>\r\n            Refresh Analysis\r\n          </button>\r\n\r\n          <button \r\n            class=\"btn btn-primary\" \r\n            (click)=\"onGenerate()\"\r\n            [disabled]=\"isLoading || isGenerating\">\r\n            <svg *ngIf=\"!isGenerating\" class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\"></path>\r\n            </svg>\r\n            <svg *ngIf=\"isGenerating\" class=\"btn-icon animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n            </svg>\r\n            {{ isGenerating ? 'Generating...' : 'Generate Predictions' }}\r\n          </button>\r\n\r\n          <button \r\n            class=\"btn btn-outline\" \r\n            (click)=\"onExport()\"\r\n            [disabled]=\"isLoading || !hasData\">\r\n            <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\r\n              <polyline points=\"7,10 12,15 17,10\"></polyline>\r\n              <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\r\n            </svg>\r\n            Export Report\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"action-info\" *ngIf=\"lastUpdated\">\r\n          <div class=\"info-item\">\r\n            <svg class=\"info-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n              <polyline points=\"12,6 12,12 16,14\"></polyline>\r\n            </svg>\r\n            <span class=\"info-text\">Last updated: {{ formatDate(lastUpdated) }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Summary -->\r\n      <div class=\"pm-summary\" *ngIf=\"summary\">\r\n        <div class=\"summary-grid\">\r\n          <div class=\"summary-card\">\r\n            <div class=\"card-icon assets-icon\">\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\r\n                <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line>\r\n                <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\r\n              </svg>\r\n            </div>\r\n            <div class=\"card-content\">\r\n              <div class=\"card-value\">{{ summary?.totalAssets || 0 }}</div>\r\n              <div class=\"card-label\">Assets Monitored</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"summary-card\">\r\n            <div class=\"card-icon risk-icon\">\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M12 2L2 7l10 5 10-5-10-5z\"></path>\r\n                <path d=\"M2 17l10 5 10-5\"></path>\r\n                <path d=\"M2 12l10 5 10-5\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"card-content\">\r\n              <div class=\"card-value risk-value\">{{ summary?.highRiskCount || 0 }}</div>\r\n              <div class=\"card-label\">High-Risk Assets</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"summary-card\">\r\n            <div class=\"card-icon savings-icon\">\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\r\n                <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"card-content\">\r\n              <div class=\"card-value savings-value\">{{ formatCurrency(summary?.totalSavings || 0) }}</div>\r\n              <div class=\"card-label\">Potential Savings</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"summary-card\">\r\n            <div class=\"card-icon confidence-icon\">\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                <polyline points=\"22,4 12,14.01 9,11.01\"></polyline>\r\n              </svg>\r\n            </div>\r\n            <div class=\"card-content\">\r\n              <div class=\"card-value confidence-value\">{{ summary?.averageConfidence || 0 }}%</div>\r\n              <div class=\"card-label\">Avg Confidence</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Predictions List -->\r\n      <div class=\"pm-predictions\" *ngIf=\"!isLoading && predictions.length > 0\">\r\n        <h3 class=\"predictions-title\">Predictions</h3>\r\n        <div class=\"predictions-list\">\r\n          <div class=\"prediction-card\" *ngFor=\"let prediction of predictions\">\r\n            <div class=\"prediction-header\">\r\n              <h4 class=\"asset-name\">{{ prediction.assetName }}</h4>\r\n              <span class=\"risk-badge\" [ngClass]=\"getRiskClass(prediction.riskLevel)\">\r\n                {{ prediction.riskLevel | titlecase }} Risk\r\n              </span>\r\n            </div>\r\n            <div class=\"prediction-details\">\r\n              <div class=\"detail-item\">\r\n                <span class=\"detail-label\">Confidence:</span>\r\n                <span class=\"detail-value\">{{ prediction.confidence }}%</span>\r\n              </div>\r\n              <div class=\"detail-item\">\r\n                <span class=\"detail-label\">Predicted Failure:</span>\r\n                <span class=\"detail-value\">{{ formatDate(prediction.predictedFailureDate) }}</span>\r\n              </div>\r\n              <div class=\"detail-item\">\r\n                <span class=\"detail-label\">Action:</span>\r\n                <span class=\"detail-value\">{{ prediction.recommendedAction }}</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"prediction-actions\">\r\n              <button class=\"btn btn-sm btn-secondary\">Schedule Maintenance</button>\r\n              <button class=\"btn btn-sm btn-primary\">Create Work Order</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Empty State -->\r\n      <div class=\"empty-state\" *ngIf=\"!isLoading && predictions.length === 0\">\r\n        <div class=\"empty-icon\">\r\n          <svg width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n            <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\"></path>\r\n          </svg>\r\n        </div>\r\n        <h3 class=\"empty-title\">No Predictions Yet</h3>\r\n        <p class=\"empty-description\">\r\n          Generate AI-powered predictions to get started with predictive maintenance insights.\r\n        </p>\r\n        <button class=\"btn btn-primary\" (click)=\"onGenerate()\">\r\n          <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\"></path>\r\n          </svg>\r\n          Generate Predictions\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Loading State -->\r\n      <div class=\"loading-state\" *ngIf=\"isLoading\">\r\n        <div class=\"loading-spinner\">\r\n          <svg class=\"animate-spin\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n          </svg>\r\n        </div>\r\n        <h3 class=\"loading-title\">Loading Predictions</h3>\r\n        <p class=\"loading-description\">Fetching your predictive maintenance data...</p>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./predictive-maintenance.component.scss']\r\n})\r\nexport class PredictiveMaintenanceComponent implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject<void>();\r\n\r\n  // State\r\n  predictions: Prediction[] = [];\r\n  summary: Summary | null = null;\r\n  isLoading = false;\r\n  isGenerating = false;\r\n  errorMessage = '';\r\n  lastUpdated: string | null = null;\r\n\r\n  constructor(private pmService: PredictiveMaintenanceService) {}\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  get hasData(): boolean {\r\n    return this.predictions.length > 0;\r\n  }\r\n\r\n  loadData() {\r\n    this.isLoading = true;\r\n    this.errorMessage = '';\r\n\r\n    this.pmService.getPredictions()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.predictions = response.data.predictions;\r\n            this.summary = response.data.summary;\r\n            this.lastUpdated = response.data.summary.lastUpdated;\r\n          } else {\r\n            this.errorMessage = response.message || 'Failed to load predictions';\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading predictions:', error);\r\n          this.errorMessage = 'Failed to load predictions. Please try again.';\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onRefresh() {\r\n    this.loadData();\r\n  }\r\n\r\n  onGenerate() {\r\n    this.isGenerating = true;\r\n    this.errorMessage = '';\r\n\r\n    this.pmService.generatePredictions({ forceRefresh: true })\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.predictions = response.data.predictions;\r\n            this.summary = response.data.summary;\r\n            this.lastUpdated = response.data.summary.lastUpdated;\r\n          } else {\r\n            this.errorMessage = response.message || 'Failed to generate predictions';\r\n          }\r\n          this.isGenerating = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error generating predictions:', error);\r\n          this.errorMessage = 'Failed to generate predictions. Please try again.';\r\n          this.isGenerating = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onExport() {\r\n    if (this.predictions.length === 0) {\r\n      alert('No predictions to export. Please generate predictions first.');\r\n      return;\r\n    }\r\n\r\n    this.pmService.exportToCsv()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (blob) => {\r\n          const filename = `predictive_maintenance_${new Date().toISOString().split('T')[0]}.csv`;\r\n          this.pmService.downloadCsv(blob, filename);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error exporting data:', error);\r\n          this.errorMessage = 'Failed to export data. Please try again.';\r\n        }\r\n      });\r\n  }\r\n\r\n  formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n\r\n  formatCurrency(amount: number): string {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(amount);\r\n  }\r\n\r\n  getRiskClass(riskLevel: string): string {\r\n    switch (riskLevel.toLowerCase()) {\r\n      case 'high':\r\n        return 'risk-high';\r\n      case 'medium':\r\n        return 'risk-medium';\r\n      case 'low':\r\n        return 'risk-low';\r\n      default:\r\n        return 'risk-medium';\r\n    }\r\n  }\r\n}", "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-nlq-header',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"nlq-header\">\r\n      <!-- Breadcrumbs -->\r\n      <nav class=\"breadcrumbs\">\r\n        <ol class=\"breadcrumb-list\">\r\n          <li class=\"breadcrumb-item\">\r\n            <a routerLink=\"/ai-features\" class=\"breadcrumb-link\">\r\n              <svg class=\"breadcrumb-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n              </svg>\r\n              AI Features\r\n            </a>\r\n          </li>\r\n          <li class=\"breadcrumb-separator\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 18l6-6-6-6\"></path>\r\n            </svg>\r\n          </li>\r\n          <li class=\"breadcrumb-item active\">\r\n            <span class=\"breadcrumb-current\">Natural Language</span>\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n\r\n      <!-- Main Header -->\r\n      <div class=\"header-content\">\r\n        <div class=\"header-main\">\r\n          <div class=\"header-icon\">\r\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\r\n              <path d=\"M13 8H7\"></path>\r\n              <path d=\"M17 12H7\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"header-text\">\r\n            <h1 class=\"header-title\">Natural Language Queries</h1>\r\n            <p class=\"header-description\">\r\n              Ask questions about your assets in plain English and get AI-powered answers. \r\n              Get insights on maintenance, costs, performance, and more.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- AI Badge -->\r\n        <div class=\"ai-badge\">\r\n          <svg class=\"ai-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n          </svg>\r\n          <span class=\"ai-text\">Powered by AI</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- API Key Warning Banner -->\r\n      <div *ngIf=\"needsApiKey\" class=\"api-key-banner\">\r\n        <div class=\"banner-content\">\r\n          <svg class=\"banner-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n            <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n            <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n          </svg>\r\n          <div class=\"banner-text\">\r\n            <h3 class=\"banner-title\">OpenAI API Key Required</h3>\r\n            <p class=\"banner-description\">\r\n              To use Natural Language Queries, please configure your OpenAI API key in the system settings.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./nlq-header.component.scss']\r\n})\r\nexport class NLQHeaderComponent {\r\n  @Input() needsApiKey: boolean = false;\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AssetContext } from '../../shared/natural-language.interface';\r\n\r\n@Component({\r\n  selector: 'app-nlq-context-strip',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"context-strip\">\r\n      <div class=\"context-content\" *ngIf=\"context; else loadingTemplate\">\r\n        <div class=\"context-title\">\r\n          <svg class=\"context-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n            <path d=\"M12 6v6l4 2\"></path>\r\n          </svg>\r\n          <span>Current Context</span>\r\n        </div>\r\n        \r\n        <div class=\"context-stats\">\r\n          <div class=\"stat-item\">\r\n            <svg class=\"stat-icon\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\r\n            </svg>\r\n            <span class=\"stat-value\">{{ context.totalAssets }}</span>\r\n            <span class=\"stat-label\">Assets</span>\r\n          </div>\r\n\r\n          <div class=\"stat-item\">\r\n            <svg class=\"stat-icon\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 12l2 2 4-4\"></path>\r\n              <path d=\"M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c1.5 0 2.91.37 4.15 1.02\"></path>\r\n            </svg>\r\n            <span class=\"stat-value\">{{ context.activeAssets }}</span>\r\n            <span class=\"stat-label\">Active</span>\r\n          </div>\r\n\r\n          <div class=\"stat-item\">\r\n            <svg class=\"stat-icon\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n              <polyline points=\"14,2 14,8 20,8\"></polyline>\r\n              <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\r\n              <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\r\n            </svg>\r\n            <span class=\"stat-value\">{{ context.openWorkOrders }}</span>\r\n            <span class=\"stat-label\">Open WOs</span>\r\n          </div>\r\n\r\n          <div class=\"stat-item\">\r\n            <svg class=\"stat-icon\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\r\n              <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\r\n            </svg>\r\n            <span class=\"stat-value\">{{ context.totalLocations }}</span>\r\n            <span class=\"stat-label\">Locations</span>\r\n          </div>\r\n\r\n          <div class=\"stat-item\" *ngIf=\"context.overdueMaintenance > 0\">\r\n            <svg class=\"stat-icon warning\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n              <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n            </svg>\r\n            <span class=\"stat-value warning\">{{ context.overdueMaintenance }}</span>\r\n            <span class=\"stat-label\">Need Maintenance</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ng-template #loadingTemplate>\r\n        <div class=\"context-loading\">\r\n          <div class=\"loading-skeleton\">\r\n            <div class=\"skeleton-line w-24\"></div>\r\n            <div class=\"skeleton-line w-32\"></div>\r\n            <div class=\"skeleton-line w-28\"></div>\r\n            <div class=\"skeleton-line w-20\"></div>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./nlq-context-strip.component.scss']\r\n})\r\nexport class NLQContextStripComponent {\r\n  @Input() context: AssetContext | null = null;\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { \r\n  AssetContext, \r\n  ChatRequest, \r\n  ChatResponse, \r\n  ContextResponse \r\n} from './natural-language.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NaturalLanguageService {\r\n  private apiUrl = `${environment.apiUrl}/ai/natural-language`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Get asset context for natural language queries.\r\n   */\r\n  getContext(): Observable<ContextResponse> {\r\n    return this.http.get<ContextResponse>(`${this.apiUrl}/context`);\r\n  }\r\n\r\n  /**\r\n   * Send chat message to AI.\r\n   */\r\n  chat(request: ChatRequest): Observable<ChatResponse> {\r\n    return this.http.post<ChatResponse>(`${this.apiUrl}/chat`, request);\r\n  }\r\n\r\n  /**\r\n   * Check if OpenAI API key is configured.\r\n   */\r\n  checkApiKey(): Observable<{ success: boolean; hasApiKey: boolean }> {\r\n    return this.http.get<{ success: boolean; hasApiKey: boolean }>(`${this.apiUrl}/check-api-key`);\r\n  }\r\n\r\n  /**\r\n   * Format markdown content for display.\r\n   */\r\n  formatMarkdown(content: string): string {\r\n    // Basic markdown formatting\r\n    return content\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\r\n      .replace(/`(.*?)`/g, '<code>$1</code>')\r\n      .replace(/\\n/g, '<br>')\r\n      .replace(/^### (.*$)/gim, '<h3>$1</h3>')\r\n      .replace(/^## (.*$)/gim, '<h2>$1</h2>')\r\n      .replace(/^# (.*$)/gim, '<h1>$1</h1>')\r\n      .replace(/^\\* (.*$)/gim, '<li>$1</li>')\r\n      .replace(/^- (.*$)/gim, '<li>$1</li>');\r\n  }\r\n\r\n  /**\r\n   * Copy text to clipboard.\r\n   */\r\n  async copyToClipboard(text: string): Promise<boolean> {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      return true;\r\n    } catch (err) {\r\n      // Fallback for older browsers\r\n      const textArea = document.createElement('textarea');\r\n      textArea.value = text;\r\n      document.body.appendChild(textArea);\r\n      textArea.focus();\r\n      textArea.select();\r\n      try {\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        return true;\r\n      } catch (err) {\r\n        document.body.removeChild(textArea);\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ChatMessage } from '../../shared/natural-language.interface';\r\nimport { NaturalLanguageService } from '../../shared/natural-language.service';\r\n\r\n@Component({\r\n  selector: 'app-nlq-chat',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"chat-container\">\r\n      <!-- Messages Area -->\r\n      <div class=\"messages-area\" #messagesContainer>\r\n        <div *ngIf=\"messages.length === 0\" class=\"empty-state\">\r\n          <div class=\"empty-icon\">\r\n            <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n              <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\r\n              <path d=\"M13 8H7\"></path>\r\n              <path d=\"M17 12H7\"></path>\r\n            </svg>\r\n          </div>\r\n          <h3 class=\"empty-title\">Start a Conversation</h3>\r\n          <p class=\"empty-description\">\r\n            Ask me anything about your assets, maintenance, work orders, or operations. \r\n            I can help you analyze data, find information, and get insights.\r\n          </p>\r\n        </div>\r\n\r\n        <div *ngFor=\"let message of messages\" class=\"message\" [ngClass]=\"'message-' + message.type\">\r\n          <div class=\"message-avatar\">\r\n            <svg *ngIf=\"message.type === 'assistant'\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n            </svg>\r\n            <svg *ngIf=\"message.type === 'user'\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\r\n              <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\r\n            </svg>\r\n          </div>\r\n          <div class=\"message-content\">\r\n            <div class=\"message-text\" [innerHTML]=\"formatMessage(message.content)\"></div>\r\n            <div class=\"message-actions\">\r\n              <button class=\"action-button\" (click)=\"copyMessage(message.content)\" title=\"Copy message\">\r\n                <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\r\n                  <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n            <div class=\"message-timestamp\">{{ formatTime(message.timestamp) }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Processing Indicator -->\r\n        <div *ngIf=\"isProcessing\" class=\"message message-assistant\">\r\n          <div class=\"message-avatar\">\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"message-content\">\r\n            <div class=\"processing-indicator\">\r\n              <div class=\"processing-dots\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n              <span class=\"processing-text\">AI is thinking...</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Input Area -->\r\n      <div class=\"input-area\">\r\n        <div class=\"input-container\">\r\n          <textarea\r\n            #messageInput\r\n            [(ngModel)]=\"currentMessage\"\r\n            (keydown)=\"onKeyDown($event)\"\r\n            [disabled]=\"isProcessing || needsApiKey\"\r\n            placeholder=\"Ask me anything about your assets...\"\r\n            class=\"message-input\"\r\n            rows=\"1\">\r\n          </textarea>\r\n          <button\r\n            (click)=\"sendMessage()\"\r\n            [disabled]=\"!currentMessage.trim() || isProcessing || needsApiKey\"\r\n            class=\"send-button\">\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\r\n              <polygon points=\"22,2 15,22 11,13 2,9 22,2\"></polygon>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div class=\"input-hint\">\r\n          Press Enter to send, Shift+Enter for new line\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./nlq-chat.component.scss']\r\n})\r\nexport class NLQChatComponent implements OnInit, OnDestroy {\r\n  @Input() messages: ChatMessage[] = [];\r\n  @Input() isProcessing: boolean = false;\r\n  @Input() needsApiKey: boolean = false;\r\n  @Output() messageSent = new EventEmitter<string>();\r\n\r\n  @ViewChild('messageInput') messageInput!: ElementRef<HTMLTextAreaElement>;\r\n  @ViewChild('messagesContainer') messagesContainer!: ElementRef<HTMLDivElement>;\r\n\r\n  currentMessage: string = '';\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(private nlService: NaturalLanguageService) {}\r\n\r\n  ngOnInit() {\r\n    // Auto-focus input on component init\r\n    setTimeout(() => {\r\n      if (this.messageInput) {\r\n        this.messageInput.nativeElement.focus();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  onKeyDown(event: KeyboardEvent) {\r\n    if (event.key === 'Enter' && !event.shiftKey) {\r\n      event.preventDefault();\r\n      this.sendMessage();\r\n    }\r\n  }\r\n\r\n  sendMessage() {\r\n    if (!this.currentMessage.trim() || this.isProcessing || this.needsApiKey) {\r\n      return;\r\n    }\r\n\r\n    this.messageSent.emit(this.currentMessage.trim());\r\n    this.currentMessage = '';\r\n    this.autoResize();\r\n  }\r\n\r\n  copyMessage(content: string) {\r\n    this.nlService.copyToClipboard(content).then(success => {\r\n      if (success) {\r\n        // Could show a toast notification here\r\n        console.log('Message copied to clipboard');\r\n      }\r\n    });\r\n  }\r\n\r\n  formatMessage(content: string): string {\r\n    return this.nlService.formatMarkdown(content);\r\n  }\r\n\r\n  formatTime(timestamp: string): string {\r\n    return new Date(timestamp).toLocaleTimeString('en-US', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n\r\n  private autoResize() {\r\n    if (this.messageInput) {\r\n      const textarea = this.messageInput.nativeElement;\r\n      textarea.style.height = 'auto';\r\n      textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    // Scroll to bottom when new messages are added\r\n    if (this.messagesContainer) {\r\n      const container = this.messagesContainer.nativeElement;\r\n      container.scrollTop = container.scrollHeight;\r\n    }\r\n  }\r\n}\r\n", "import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ExampleQuery, Category } from '../../shared/natural-language.interface';\r\n\r\n@Component({\r\n  selector: 'app-nlq-examples',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"examples-container\">\r\n      <div class=\"examples-header\">\r\n        <h3 class=\"examples-title\">Example Queries</h3>\r\n        <p class=\"examples-description\">Click any example to get started</p>\r\n      </div>\r\n\r\n      <div class=\"examples-grid\">\r\n        <div \r\n          *ngFor=\"let example of examples\" \r\n          class=\"example-card\"\r\n          [ngClass]=\"'category-' + example.category.toLowerCase()\"\r\n          (click)=\"selectExample(example)\">\r\n          <div class=\"example-header\">\r\n            <div class=\"example-icon\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path [attr.d]=\"getIconPath(example.icon)\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"example-category\" [ngClass]=\"'badge-' + example.category.toLowerCase()\">\r\n              {{ example.category }}\r\n            </div>\r\n          </div>\r\n          <div class=\"example-content\">\r\n            <h4 class=\"example-title\">{{ example.title }}</h4>\r\n            <p class=\"example-description\">{{ example.description }}</p>\r\n          </div>\r\n          <div class=\"example-query\">\r\n            \"{{ example.query }}\"\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./nlq-examples.component.scss']\r\n})\r\nexport class NLQExamplesComponent {\r\n  @Output() exampleSelected = new EventEmitter<string>();\r\n\r\n  examples: ExampleQuery[] = [\r\n    {\r\n      id: '1',\r\n      category: 'Maintenance',\r\n      title: 'Overdue Maintenance',\r\n      description: 'Find assets that need immediate attention',\r\n      query: 'Show me all assets with overdue maintenance',\r\n      icon: 'wrench'\r\n    },\r\n    {\r\n      id: '2',\r\n      category: 'Financial',\r\n      title: 'Asset Costs',\r\n      description: 'Analyze spending and budgets',\r\n      query: 'What are my highest value assets and their maintenance costs?',\r\n      icon: 'dollar-sign'\r\n    },\r\n    {\r\n      id: '3',\r\n      category: 'Analytics',\r\n      title: 'Performance Trends',\r\n      description: 'Get insights on asset performance',\r\n      query: 'How are my assets performing this quarter compared to last?',\r\n      icon: 'bar-chart-3'\r\n    },\r\n    {\r\n      id: '4',\r\n      category: 'Search',\r\n      title: 'Find Assets',\r\n      description: 'Locate specific assets or types',\r\n      query: 'Find all HVAC units in Building A that are over 5 years old',\r\n      icon: 'search'\r\n    },\r\n    {\r\n      id: '5',\r\n      category: 'Operations',\r\n      title: 'Work Orders',\r\n      description: 'Check work order status and priorities',\r\n      query: 'What work orders are high priority and who is assigned to them?',\r\n      icon: 'settings-2'\r\n    },\r\n    {\r\n      id: '6',\r\n      category: 'Maintenance',\r\n      title: 'Maintenance Schedule',\r\n      description: 'Plan upcoming maintenance',\r\n      query: 'What maintenance is scheduled for next week?',\r\n      icon: 'calendar'\r\n    }\r\n  ];\r\n\r\n  selectExample(example: ExampleQuery) {\r\n    this.exampleSelected.emit(example.query);\r\n  }\r\n\r\n  getIconPath(iconName: string): string {\r\n    const icons: { [key: string]: string } = {\r\n      'wrench': 'M22 7l-7.5-4.5L7 7l5.5 3.5L22 7zM7 7v10l5.5 3.5L18 17V7l-5.5 3.5L7 7z',\r\n      'dollar-sign': 'M12 1v22M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6',\r\n      'bar-chart-3': 'M3 3v18h18M18 17V9M13 17V5M8 17v-3',\r\n      'search': 'M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z',\r\n      'settings-2': 'M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4',\r\n      'calendar': 'M8 2v4M16 2v4M3 10h18M5 4h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2z'\r\n    };\r\n    return icons[iconName] || icons['search'];\r\n  }\r\n}\r\n", "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Capability } from '../../shared/natural-language.interface';\r\n\r\n@Component({\r\n  selector: 'app-nlq-capabilities',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"capabilities-container\">\r\n      <div class=\"capabilities-header\">\r\n        <h3 class=\"capabilities-title\">AI Capabilities</h3>\r\n        <p class=\"capabilities-description\">What I can help you with</p>\r\n      </div>\r\n\r\n      <div class=\"capabilities-grid\">\r\n        <div \r\n          *ngFor=\"let capability of capabilities\" \r\n          class=\"capability-card\"\r\n          [ngClass]=\"'capability-' + capability.id\">\r\n          <div class=\"capability-icon\" [ngClass]=\"'icon-' + capability.color\">\r\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path [attr.d]=\"getIconPath(capability.icon)\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"capability-content\">\r\n            <h4 class=\"capability-title\">{{ capability.title }}</h4>\r\n            <p class=\"capability-description\">{{ capability.description }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./nlq-capabilities.component.scss']\r\n})\r\nexport class NLQCapabilitiesComponent {\r\n  capabilities: Capability[] = [\r\n    {\r\n      id: 'search',\r\n      title: 'Search & Filter',\r\n      description: 'Find assets, work orders, and data using natural language',\r\n      icon: 'search',\r\n      color: 'blue'\r\n    },\r\n    {\r\n      id: 'financial',\r\n      title: 'Financial Analysis',\r\n      description: 'Analyze costs, budgets, and financial performance',\r\n      icon: 'dollar-sign',\r\n      color: 'green'\r\n    },\r\n    {\r\n      id: 'maintenance',\r\n      title: 'Maintenance Planning',\r\n      description: 'Schedule, track, and optimize maintenance activities',\r\n      icon: 'wrench',\r\n      color: 'purple'\r\n    },\r\n    {\r\n      id: 'analytics',\r\n      title: 'Data Analytics',\r\n      description: 'Get insights from your asset data and trends',\r\n      icon: 'bar-chart-3',\r\n      color: 'orange'\r\n    },\r\n    {\r\n      id: 'reports',\r\n      title: 'Smart Reports',\r\n      description: 'Generate detailed reports and summaries',\r\n      icon: 'file-text',\r\n      color: 'red'\r\n    },\r\n    {\r\n      id: 'recommendations',\r\n      title: 'Recommendations',\r\n      description: 'Get AI-powered suggestions and best practices',\r\n      icon: 'lightbulb',\r\n      color: 'indigo'\r\n    }\r\n  ];\r\n\r\n  getIconPath(iconName: string): string {\r\n    const icons: { [key: string]: string } = {\r\n      'search': 'M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z',\r\n      'dollar-sign': 'M12 1v22M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6',\r\n      'wrench': 'M22 7l-7.5-4.5L7 7l5.5 3.5L22 7zM7 7v10l5.5 3.5L18 17V7l-5.5 3.5L7 7z',\r\n      'bar-chart-3': 'M3 3v18h18M18 17V9M13 17V5M8 17v-3',\r\n      'file-text': 'M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8zM14 2v6h6M16 13H8M16 17H8M10 9H8',\r\n      'lightbulb': 'M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6A4.997 4.997 0 0 1 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z'\r\n    };\r\n    return icons[iconName] || icons['search'];\r\n  }\r\n}\r\n", "import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { \r\n  ChatMessage, \r\n  AssetContext, \r\n  NLQState, \r\n  ChatRequest \r\n} from '../../shared/natural-language.interface';\r\nimport { NaturalLanguageService } from '../../shared/natural-language.service';\r\nimport { NLQHeaderComponent } from './nlq-header.component';\r\nimport { NLQContextStripComponent } from './nlq-context-strip.component';\r\nimport { NLQChatComponent } from './nlq-chat.component';\r\nimport { NLQExamplesComponent } from './nlq-examples.component';\r\nimport { NLQCapabilitiesComponent } from './nlq-capabilities.component';\r\n\r\n@Component({\r\n  selector: 'app-natural-language',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    NLQHeaderComponent,\r\n    NLQContextStripComponent,\r\n    NLQChatComponent,\r\n    NLQExamplesComponent,\r\n    NLQCapabilitiesComponent\r\n  ],\r\n  template: `\r\n    <div class=\"natural-language-page\">\r\n      <!-- Header -->\r\n      <app-nlq-header [needsApiKey]=\"state.needsApiKey\"></app-nlq-header>\r\n\r\n      <!-- Context Strip -->\r\n      <app-nlq-context-strip [context]=\"state.assetContext\"></app-nlq-context-strip>\r\n\r\n      <!-- Main Content -->\r\n      <div class=\"main-content\">\r\n        <div class=\"chat-section\">\r\n          <app-nlq-chat\r\n            [messages]=\"state.messages\"\r\n            [isProcessing]=\"state.isProcessing\"\r\n            [needsApiKey]=\"state.needsApiKey\"\r\n            (messageSent)=\"onMessageSent($event)\">\r\n          </app-nlq-chat>\r\n        </div>\r\n\r\n        <div class=\"sidebar\">\r\n          <!-- Examples -->\r\n          <app-nlq-examples (exampleSelected)=\"onExampleSelected($event)\"></app-nlq-examples>\r\n\r\n          <!-- Capabilities -->\r\n          <app-nlq-capabilities></app-nlq-capabilities>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Error State -->\r\n      <div *ngIf=\"errorMessage\" class=\"error-state\">\r\n        <div class=\"error-content\">\r\n          <svg class=\"error-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n            <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n            <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n            <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n          </svg>\r\n          <h3 class=\"error-title\">Something went wrong</h3>\r\n          <p class=\"error-description\">{{ errorMessage }}</p>\r\n          <button class=\"retry-button\" (click)=\"retry()\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path>\r\n              <path d=\"M21 3v5h-5\"></path>\r\n              <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path>\r\n              <path d=\"M3 21v-5h5\"></path>\r\n            </svg>\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./natural-language.component.scss']\r\n})\r\nexport class NaturalLanguageComponent implements OnInit, OnDestroy {\r\n  @ViewChild('chatComponent') chatComponent!: NLQChatComponent;\r\n\r\n  state: NLQState = {\r\n    query: '',\r\n    messages: [],\r\n    isProcessing: false,\r\n    assetContext: null,\r\n    needsApiKey: false\r\n  };\r\n\r\n  errorMessage: string | null = null;\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(private nlService: NaturalLanguageService) {}\r\n\r\n  ngOnInit() {\r\n    this.loadContext();\r\n    this.checkApiKey();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  loadContext() {\r\n    this.nlService.getContext()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.state.assetContext = response.data;\r\n          } else {\r\n            this.errorMessage = response.error || 'Failed to load context';\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading context:', error);\r\n          this.errorMessage = 'Failed to load context. Please try again.';\r\n        }\r\n      });\r\n  }\r\n\r\n  checkApiKey() {\r\n    this.nlService.checkApiKey()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          this.state.needsApiKey = !response.hasApiKey;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error checking API key:', error);\r\n          this.state.needsApiKey = true;\r\n        }\r\n      });\r\n  }\r\n\r\n  onMessageSent(message: string) {\r\n    if (!message.trim() || this.state.isProcessing || this.state.needsApiKey) {\r\n      return;\r\n    }\r\n\r\n    // Add user message\r\n    const userMessage: ChatMessage = {\r\n      type: 'user',\r\n      content: message,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    this.state.messages.push(userMessage);\r\n    this.state.isProcessing = true;\r\n    this.errorMessage = null;\r\n\r\n    // Prepare chat request\r\n    const chatRequest: ChatRequest = {\r\n      messages: this.state.messages.map(msg => ({\r\n        role: msg.type as 'user' | 'assistant',\r\n        content: msg.content\r\n      })),\r\n      assetContext: this.state.assetContext!,\r\n      companyContext: {\r\n        name: 'Your Company' // This could be dynamic\r\n      }\r\n    };\r\n\r\n    // Send to AI\r\n    this.nlService.chat(chatRequest)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.reply) {\r\n            // Add assistant message\r\n            const assistantMessage: ChatMessage = {\r\n              type: 'assistant',\r\n              content: response.reply,\r\n              timestamp: new Date().toISOString()\r\n            };\r\n            this.state.messages.push(assistantMessage);\r\n          } else {\r\n            this.errorMessage = response.error || 'Failed to get response from AI';\r\n          }\r\n          this.state.isProcessing = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error sending message:', error);\r\n          this.errorMessage = 'Failed to send message. Please try again.';\r\n          this.state.isProcessing = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onExampleSelected(query: string) {\r\n    // This will trigger the message sent event\r\n    this.onMessageSent(query);\r\n  }\r\n\r\n  retry() {\r\n    this.errorMessage = null;\r\n    this.loadContext();\r\n    this.checkApiKey();\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-recs-header',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"recs-header\">\r\n      <!-- Main Header -->\r\n      <div class=\"header-content\">\r\n        <div class=\"header-main\">\r\n          <div class=\"header-icon\">\r\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n              <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"header-text\">\r\n            <h1 class=\"header-title\">AI Recommendations</h1>\r\n            <p class=\"header-description\">\r\n              Intelligent suggestions to optimize your asset management operations, \r\n              reduce costs, and improve efficiency.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Last Updated -->\r\n        <div class=\"last-updated\" *ngIf=\"lastUpdated\">\r\n          <svg class=\"update-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n            <path d=\"M12 6v6l4 2\"></path>\r\n          </svg>\r\n          <span>Last updated {{ lastUpdated | date:'short' }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Action Bar -->\r\n      <div class=\"action-bar\">\r\n        <div class=\"action-buttons\">\r\n          <button\r\n            class=\"btn btn-secondary\"\r\n            (click)=\"onRefresh()\"\r\n            [disabled]=\"isLoading\">\r\n            <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path>\r\n              <path d=\"M21 3v5h-5\"></path>\r\n              <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path>\r\n              <path d=\"M3 21v-5h5\"></path>\r\n            </svg>\r\n            <span class=\"btn-text\">Refresh</span>\r\n          </button>\r\n\r\n          <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"onGenerate()\"\r\n            [disabled]=\"isLoading || isGenerating\">\r\n            <svg *ngIf=\"!isGenerating\" class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\"></path>\r\n            </svg>\r\n            <svg *ngIf=\"isGenerating\" class=\"btn-icon animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n            </svg>\r\n            <span class=\"btn-text\">{{ isGenerating ? 'Generating...' : 'Generate New' }}</span>\r\n          </button>\r\n\r\n          <button\r\n            class=\"btn btn-outline\"\r\n            (click)=\"onExport()\"\r\n            [disabled]=\"isLoading || !hasData\">\r\n            <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\r\n              <polyline points=\"7,10 12,15 17,10\"></polyline>\r\n              <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\r\n            </svg>\r\n            <span class=\"btn-text\">Export Report</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./recs-header.component.scss']\r\n})\r\nexport class RecsHeaderComponent {\r\n  @Input() lastUpdated: string | null = null;\r\n  @Input() isLoading: boolean = false;\r\n  @Input() isGenerating: boolean = false;\r\n  @Input() hasData: boolean = false;\r\n\r\n  @Output() refresh = new EventEmitter<void>();\r\n  @Output() generate = new EventEmitter<void>();\r\n  @Output() export = new EventEmitter<void>();\r\n\r\n  onRefresh() {\r\n    this.refresh.emit();\r\n  }\r\n\r\n  onGenerate() {\r\n    this.generate.emit();\r\n  }\r\n\r\n  onExport() {\r\n    this.export.emit();\r\n  }\r\n}\r\n", "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RecSummary } from '../../shared/ai-recommendations.interface';\r\n\r\n@Component({\r\n  selector: 'app-recs-summary',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"recs-summary\">\r\n      <div class=\"summary-grid\" *ngIf=\"summary; else loadingTemplate\">\r\n        <!-- Total Recommendations -->\r\n        <div class=\"summary-card\">\r\n          <div class=\"card-icon bg-gradient-blue\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 12l2 2 4-4\"></path>\r\n              <path d=\"M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c1.5 0 2.91.37 4.15 1.02\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"card-content\">\r\n            <span class=\"card-label\">Total Recommendations</span>\r\n            <span class=\"card-value\">{{ summary.totalRecommendations }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- High Priority -->\r\n        <div class=\"summary-card\">\r\n          <div class=\"card-icon bg-gradient-red\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n              <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n            </svg>\r\n          </div>\r\n          <div class=\"card-content\">\r\n            <span class=\"card-label\">High Priority</span>\r\n            <span class=\"card-value\">{{ summary.highPriorityCount }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Potential Savings -->\r\n        <div class=\"summary-card\">\r\n          <div class=\"card-icon bg-gradient-green\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z\"></path>\r\n              <path d=\"M12 8V12L15 15\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"card-content\">\r\n            <span class=\"card-label\">Potential Savings</span>\r\n            <span class=\"card-value\">{{ summary.totalSavings | currency:'AED':'symbol':'1.2-2' }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Investment Required -->\r\n        <div class=\"summary-card\">\r\n          <div class=\"card-icon bg-gradient-orange\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z\"></path>\r\n              <path d=\"M12 6V12L16 14\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"card-content\">\r\n            <span class=\"card-label\">Investment Required</span>\r\n            <span class=\"card-value\">{{ summary.totalCost | currency:'AED':'symbol':'1.2-2' }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- ROI -->\r\n        <div class=\"summary-card\">\r\n          <div class=\"card-icon bg-gradient-purple\">\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18M18 17V9M13 17V5M8 17v-3\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"card-content\">\r\n            <span class=\"card-label\">ROI</span>\r\n            <span class=\"card-value\">{{ summary.roi | number:'1.0-1' }}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ng-template #loadingTemplate>\r\n        <div class=\"summary-loading\">\r\n          <div class=\"loading-skeleton\" *ngFor=\"let i of [1,2,3,4,5]\">\r\n            <div class=\"skeleton-icon\"></div>\r\n            <div class=\"skeleton-content\">\r\n              <div class=\"skeleton-line w-24\"></div>\r\n              <div class=\"skeleton-line w-16\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./recs-summary.component.scss']\r\n})\r\nexport class RecsSummaryComponent {\r\n  @Input() summary: RecSummary | null = null;\r\n}\r\n", "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RecFilters, RecType, Level } from '../../shared/ai-recommendations.interface';\r\n\r\n@Component({\r\n  selector: 'app-recs-filters',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"recs-filters\">\r\n      <div class=\"filters-content\">\r\n        <!-- Search -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">Search</label>\r\n          <div class=\"search-input\">\r\n            <svg class=\"search-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\r\n            </svg>\r\n            <input\r\n              type=\"text\"\r\n              [(ngModel)]=\"filters.search\"\r\n              (ngModelChange)=\"onFilterChange()\"\r\n              placeholder=\"Search recommendations...\"\r\n              class=\"search-field\">\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Type Filter -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">Type</label>\r\n          <select\r\n            [(ngModel)]=\"filters.type\"\r\n            (ngModelChange)=\"onFilterChange()\"\r\n            class=\"filter-select\">\r\n            <option value=\"\">All Types</option>\r\n            <option value=\"cost_optimization\">Cost Optimization</option>\r\n            <option value=\"maintenance\">Maintenance</option>\r\n            <option value=\"efficiency\">Efficiency</option>\r\n            <option value=\"compliance\">Compliance</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- Priority Filter -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">Priority</label>\r\n          <select\r\n            [(ngModel)]=\"filters.priority\"\r\n            (ngModelChange)=\"onFilterChange()\"\r\n            class=\"filter-select\">\r\n            <option value=\"\">All Priorities</option>\r\n            <option value=\"high\">High</option>\r\n            <option value=\"medium\">Medium</option>\r\n            <option value=\"low\">Low</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- Impact Filter -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">Impact</label>\r\n          <select\r\n            [(ngModel)]=\"filters.impact\"\r\n            (ngModelChange)=\"onFilterChange()\"\r\n            class=\"filter-select\">\r\n            <option value=\"\">All Impacts</option>\r\n            <option value=\"high\">High</option>\r\n            <option value=\"medium\">Medium</option>\r\n            <option value=\"low\">Low</option>\r\n          </select>\r\n        </div>\r\n\r\n        <!-- Min Confidence -->\r\n        <div class=\"filter-group\">\r\n          <label class=\"filter-label\">Min Confidence: {{ filters.minConfidence || 0 }}%</label>\r\n          <input\r\n            type=\"range\"\r\n            [(ngModel)]=\"filters.minConfidence\"\r\n            (ngModelChange)=\"onFilterChange()\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"5\"\r\n            class=\"confidence-slider\">\r\n        </div>\r\n\r\n        <!-- Clear Filters -->\r\n        <div class=\"filter-group\">\r\n          <button\r\n            (click)=\"clearFilters()\"\r\n            class=\"clear-button\"\r\n            [disabled]=\"!hasActiveFilters\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6M10 11v6M14 11v6\"></path>\r\n            </svg>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./recs-filters.component.scss']\r\n})\r\nexport class RecsFiltersComponent implements OnInit {\r\n  @Input() filters: RecFilters = {};\r\n  @Output() filtersChange = new EventEmitter<RecFilters>();\r\n\r\n  ngOnInit() {\r\n    // Initialize default values\r\n    if (this.filters.minConfidence === undefined) {\r\n      this.filters.minConfidence = 0;\r\n    }\r\n  }\r\n\r\n  onFilterChange() {\r\n    this.filtersChange.emit(this.filters);\r\n  }\r\n\r\n  clearFilters() {\r\n    this.filters = {\r\n      minConfidence: 0\r\n    };\r\n    this.filtersChange.emit(this.filters);\r\n  }\r\n\r\n  get hasActiveFilters(): boolean {\r\n    return !!(\r\n      this.filters.type ||\r\n      this.filters.priority ||\r\n      this.filters.impact ||\r\n      this.filters.search ||\r\n      (this.filters.minConfidence && this.filters.minConfidence > 0)\r\n    );\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Recommendation } from '../../shared/ai-recommendations.interface';\r\n\r\n@Component({\r\n  selector: 'app-recs-list',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"recs-list\">\r\n      <!-- List Header -->\r\n      <div class=\"list-header\">\r\n        <h3 class=\"list-title\">Recommendations</h3>\r\n        <div class=\"list-info\" *ngIf=\"pagination\">\r\n          <span class=\"item-count\">{{ pagination.total }} recommendations</span>\r\n          <div class=\"page-size-selector\">\r\n            <label class=\"page-size-label\">Show:</label>\r\n            <select \r\n              [(ngModel)]=\"pageSize\" \r\n              (ngModelChange)=\"onPageSizeChange()\"\r\n              class=\"page-size-select\">\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading State -->\r\n      <div *ngIf=\"isLoading\" class=\"loading-state\">\r\n        <div class=\"skeleton-card\" *ngFor=\"let i of [1,2,3]\">\r\n          <div class=\"skeleton-header\">\r\n            <div class=\"skeleton-icon\"></div>\r\n            <div class=\"skeleton-content\">\r\n              <div class=\"skeleton-line w-3-4\"></div>\r\n              <div class=\"skeleton-line w-1-2\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"skeleton-body\">\r\n            <div class=\"skeleton-line w-full\"></div>\r\n            <div class=\"skeleton-line w-2-3\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Error State -->\r\n      <div *ngIf=\"!isLoading && errorMessage\" class=\"error-state\">\r\n        <svg class=\"error-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n          <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n          <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n          <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n        </svg>\r\n        <h3 class=\"error-title\">Error Loading Recommendations</h3>\r\n        <p class=\"error-description\">{{ errorMessage }}</p>\r\n        <button class=\"retry-button\" (click)=\"onRetry()\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path>\r\n            <path d=\"M21 3v5h-5\"></path>\r\n            <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path>\r\n            <path d=\"M3 21v-5h5\"></path>\r\n          </svg>\r\n          Try Again\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Empty State -->\r\n      <div *ngIf=\"!isLoading && !errorMessage && recommendations.length === 0\" class=\"empty-state\">\r\n        <svg class=\"empty-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n          <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n          <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\r\n        </svg>\r\n        <h3 class=\"empty-title\">No Recommendations Yet</h3>\r\n        <p class=\"empty-description\">\r\n          Generate your first set of AI-powered recommendations to optimize your asset management.\r\n        </p>\r\n        <button class=\"generate-button\" (click)=\"onGenerate()\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\"></path>\r\n          </svg>\r\n          Generate Recommendations\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Recommendations Grid -->\r\n      <div *ngIf=\"!isLoading && !errorMessage && recommendations.length > 0\" class=\"recommendations-grid\">\r\n        <app-rec-card\r\n          *ngFor=\"let recommendation of recommendations\"\r\n          [recommendation]=\"recommendation\"\r\n          (toggleImplementation)=\"onToggleImplementation($event)\"\r\n          (createActionPlan)=\"onCreateActionPlan($event)\">\r\n        </app-rec-card>\r\n      </div>\r\n\r\n      <!-- Pagination -->\r\n      <div *ngIf=\"!isLoading && !errorMessage && pagination && pagination.totalPages > 1\" class=\"pagination\">\r\n        <button\r\n          class=\"pagination-btn\"\r\n          [disabled]=\"pagination.page <= 1\"\r\n          (click)=\"onPageChange(pagination.page - 1)\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M15 18l-6-6 6-6\"></path>\r\n          </svg>\r\n          Previous\r\n        </button>\r\n\r\n        <div class=\"pagination-info\">\r\n          Page {{ pagination.page }} of {{ pagination.totalPages }}\r\n        </div>\r\n\r\n        <button\r\n          class=\"pagination-btn\"\r\n          [disabled]=\"pagination.page >= pagination.totalPages\"\r\n          (click)=\"onPageChange(pagination.page + 1)\">\r\n          Next\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M9 18l6-6-6-6\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./recs-list.component.scss']\r\n})\r\nexport class RecsListComponent {\r\n  @Input() recommendations: Recommendation[] = [];\r\n  @Input() isLoading: boolean = false;\r\n  @Input() errorMessage: string | null = null;\r\n  @Input() pagination: any = null;\r\n  @Input() pageSize: number = 10;\r\n\r\n  @Output() retry = new EventEmitter<void>();\r\n  @Output() generate = new EventEmitter<void>();\r\n  @Output() toggleImplementation = new EventEmitter<{ id: string; implemented: boolean }>();\r\n  @Output() createActionPlan = new EventEmitter<Recommendation>();\r\n  @Output() pageChange = new EventEmitter<number>();\r\n  @Output() pageSizeChange = new EventEmitter<number>();\r\n\r\n  onRetry() {\r\n    this.retry.emit();\r\n  }\r\n\r\n  onGenerate() {\r\n    this.generate.emit();\r\n  }\r\n\r\n  onToggleImplementation(event: { id: string; implemented: boolean }) {\r\n    this.toggleImplementation.emit(event);\r\n  }\r\n\r\n  onCreateActionPlan(recommendation: Recommendation) {\r\n    this.createActionPlan.emit(recommendation);\r\n  }\r\n\r\n  onPageChange(page: number) {\r\n    this.pageChange.emit(page);\r\n  }\r\n\r\n  onPageSizeChange() {\r\n    this.pageSizeChange.emit(this.pageSize);\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { \r\n  Recommendation, \r\n  RecSummary, \r\n  RecFilters, \r\n  RecResponse, \r\n  RecGenerateResponse, \r\n  RecToggleResponse \r\n} from './ai-recommendations.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AIRecommendationsService {\r\n  private apiUrl = `${environment.apiUrl}/ai/recommendations`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Get recommendations with filters and pagination\r\n   */\r\n  getRecommendations(filters: RecFilters = {}, page: number = 1, pageSize: number = 10): Observable<RecResponse> {\r\n    let params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('pageSize', pageSize.toString());\r\n\r\n    // Add filters to params\r\n    if (filters.type) params = params.set('type', filters.type);\r\n    if (filters.priority) params = params.set('priority', filters.priority);\r\n    if (filters.impact) params = params.set('impact', filters.impact);\r\n    if (filters.search) params = params.set('search', filters.search);\r\n    if (filters.minConfidence !== undefined) params = params.set('minConfidence', filters.minConfidence.toString());\r\n\r\n    return this.http.get<RecResponse>(`${this.apiUrl}/`, { params });\r\n  }\r\n\r\n  /**\r\n   * Generate new recommendations\r\n   */\r\n  generateRecommendations(): Observable<RecGenerateResponse> {\r\n    return this.http.post<RecGenerateResponse>(`${this.apiUrl}/generate`, {});\r\n  }\r\n\r\n  /**\r\n   * Toggle implementation status\r\n   */\r\n  toggleImplementation(id: string, implemented: boolean): Observable<RecToggleResponse> {\r\n    return this.http.post<RecToggleResponse>(`${this.apiUrl}/${id}/toggle`, { implemented });\r\n  }\r\n\r\n  /**\r\n   * Export recommendations to CSV\r\n   */\r\n  exportRecommendations(filters: RecFilters = {}): Observable<Blob> {\r\n    let params = new HttpParams();\r\n\r\n    // Add filters to params\r\n    if (filters.type) params = params.set('type', filters.type);\r\n    if (filters.priority) params = params.set('priority', filters.priority);\r\n    if (filters.impact) params = params.set('impact', filters.impact);\r\n    if (filters.search) params = params.set('search', filters.search);\r\n    if (filters.minConfidence !== undefined) params = params.set('minConfidence', filters.minConfidence.toString());\r\n\r\n    return this.http.get(`${this.apiUrl}/export`, { \r\n      params, \r\n      responseType: 'blob' \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get summary statistics\r\n   */\r\n  getSummary(): Observable<{ success: boolean; data?: RecSummary; error?: string }> {\r\n    return this.http.get<{ success: boolean; data?: RecSummary; error?: string }>(`${this.apiUrl}/summary`);\r\n  }\r\n\r\n  /**\r\n   * Download CSV file\r\n   */\r\n  downloadCsv(blob: Blob, filename: string): void {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Compute ROI and net benefit\r\n   */\r\n  computeROI(estimatedSavings?: number, implementationCost?: number): { net: number | null; roi: number | null } {\r\n    if (!estimatedSavings || !implementationCost || implementationCost <= 0) {\r\n      return { net: null, roi: null };\r\n    }\r\n    \r\n    const net = estimatedSavings - implementationCost;\r\n    const roi = (net / implementationCost) * 100;\r\n    return { net, roi };\r\n  }\r\n\r\n  /**\r\n   * Compute payback period\r\n   */\r\n  computePaybackPeriod(estimatedSavings?: number, implementationCost?: number): string | null {\r\n    if (!estimatedSavings || !implementationCost || estimatedSavings <= 0) {\r\n      return null;\r\n    }\r\n    \r\n    const months = Math.max(1, Math.round((implementationCost / (estimatedSavings / 12))));\r\n    return `${months} months`;\r\n  }\r\n\r\n  /**\r\n   * Get type display name\r\n   */\r\n  getTypeDisplayName(type: string): string {\r\n    const typeMap: { [key: string]: string } = {\r\n      'cost_optimization': 'Cost Optimization',\r\n      'maintenance': 'Maintenance',\r\n      'efficiency': 'Efficiency',\r\n      'compliance': 'Compliance'\r\n    };\r\n    return typeMap[type] || type;\r\n  }\r\n\r\n  /**\r\n   * Get type icon\r\n   */\r\n  getTypeIcon(type: string): string {\r\n    const iconMap: { [key: string]: string } = {\r\n      'cost_optimization': 'dollar-sign',\r\n      'maintenance': 'wrench',\r\n      'efficiency': 'trending-up',\r\n      'compliance': 'shield-check'\r\n    };\r\n    return iconMap[type] || 'help-circle';\r\n  }\r\n\r\n  /**\r\n   * Get priority color class\r\n   */\r\n  getPriorityColorClass(priority: string): string {\r\n    const colorMap: { [key: string]: string } = {\r\n      'low': 'priority-low',\r\n      'medium': 'priority-medium',\r\n      'high': 'priority-high'\r\n    };\r\n    return colorMap[priority] || 'priority-medium';\r\n  }\r\n\r\n  /**\r\n   * Get impact color class\r\n   */\r\n  getImpactColorClass(impact: string): string {\r\n    const colorMap: { [key: string]: string } = {\r\n      'low': 'impact-low',\r\n      'medium': 'impact-medium',\r\n      'high': 'impact-high'\r\n    };\r\n    return colorMap[impact] || 'impact-medium';\r\n  }\r\n}\r\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { \r\n  Recommendation, \r\n  RecSummary, \r\n  RecFilters, \r\n  RecResponse \r\n} from '../../shared/ai-recommendations.interface';\r\nimport { AIRecommendationsService } from '../../shared/ai-recommendations.service';\r\nimport { RecsHeaderComponent } from './recs-header.component';\r\nimport { RecsSummaryComponent } from './recs-summary.component';\r\nimport { RecsFiltersComponent } from './recs-filters.component';\r\nimport { RecsListComponent } from './recs-list.component';\r\n\r\n@Component({\r\n  selector: 'app-ai-recommendations',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RecsHeaderComponent,\r\n    RecsSummaryComponent,\r\n    RecsFiltersComponent,\r\n    RecsListComponent\r\n  ],\r\n  template: `\r\n    <div class=\"ai-recommendations-page\">\r\n      <!-- Header -->\r\n      <app-recs-header\r\n        [lastUpdated]=\"summary?.lastUpdated\"\r\n        [isLoading]=\"isLoading\"\r\n        [isGenerating]=\"isGenerating\"\r\n        [hasData]=\"recommendations.length > 0\"\r\n        (refresh)=\"onRefresh()\"\r\n        (generate)=\"onGenerate()\"\r\n        (export)=\"onExport()\">\r\n      </app-recs-header>\r\n\r\n      <!-- Summary -->\r\n      <app-recs-summary [summary]=\"summary\"></app-recs-summary>\r\n\r\n      <!-- Filters -->\r\n      <app-recs-filters\r\n        [filters]=\"filters\"\r\n        (filtersChange)=\"onFiltersChange($event)\">\r\n      </app-recs-filters>\r\n\r\n      <!-- List -->\r\n      <app-recs-list\r\n        [recommendations]=\"recommendations\"\r\n        [isLoading]=\"isLoading\"\r\n        [errorMessage]=\"errorMessage\"\r\n        [pagination]=\"pagination\"\r\n        [pageSize]=\"pageSize\"\r\n        (retry)=\"onRetry()\"\r\n        (generate)=\"onGenerate()\"\r\n        (toggleImplementation)=\"onToggleImplementation($event)\"\r\n        (createActionPlan)=\"onCreateActionPlan($event)\"\r\n        (pageChange)=\"onPageChange($event)\"\r\n        (pageSizeChange)=\"onPageSizeChange($event)\">\r\n      </app-recs-list>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./ai-recommendations.component.scss']\r\n})\r\nexport class AIRecommendationsComponent implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject<void>();\r\n\r\n  // State\r\n  recommendations: Recommendation[] = [];\r\n  summary: RecSummary | null = null;\r\n  isLoading = false;\r\n  isGenerating = false;\r\n  errorMessage: string | null = null;\r\n  pagination: any = null;\r\n\r\n  // Filters and pagination\r\n  filters: RecFilters = {\r\n    minConfidence: 0\r\n  };\r\n  currentPage = 1;\r\n  pageSize = 10;\r\n\r\n  constructor(private recService: AIRecommendationsService) {}\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  loadData() {\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n\r\n    this.recService.getRecommendations(this.filters, this.currentPage, this.pageSize)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response: RecResponse) => {\r\n          if (response.success && response.data) {\r\n            this.recommendations = response.data.recommendations;\r\n            this.summary = response.data.summary;\r\n            this.pagination = response.data.pagination;\r\n          } else {\r\n            this.errorMessage = response.error || 'Failed to load recommendations';\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading recommendations:', error);\r\n          this.errorMessage = 'Failed to load recommendations. Please try again.';\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onRefresh() {\r\n    this.loadData();\r\n  }\r\n\r\n  onGenerate() {\r\n    this.isGenerating = true;\r\n    this.errorMessage = null;\r\n\r\n    this.recService.generateRecommendations()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.recommendations = response.data.recommendations;\r\n            this.summary = response.data.summary;\r\n            this.currentPage = 1; // Reset to first page\r\n            this.loadData(); // Reload to get pagination\r\n          } else {\r\n            this.errorMessage = response.error || 'Failed to generate recommendations';\r\n          }\r\n          this.isGenerating = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error generating recommendations:', error);\r\n          this.errorMessage = 'Failed to generate recommendations. Please try again.';\r\n          this.isGenerating = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onExport() {\r\n    if (this.recommendations.length === 0) {\r\n      alert('No recommendations to export. Please generate recommendations first.');\r\n      return;\r\n    }\r\n\r\n    this.recService.exportRecommendations(this.filters)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (blob) => {\r\n          const filename = `ai_recommendations_${new Date().toISOString().split('T')[0]}.csv`;\r\n          this.recService.downloadCsv(blob, filename);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error exporting recommendations:', error);\r\n          this.errorMessage = 'Failed to export recommendations. Please try again.';\r\n        }\r\n      });\r\n  }\r\n\r\n  onFiltersChange(filters: RecFilters) {\r\n    this.filters = filters;\r\n    this.currentPage = 1; // Reset to first page\r\n    this.loadData();\r\n  }\r\n\r\n  onRetry() {\r\n    this.loadData();\r\n  }\r\n\r\n  onToggleImplementation(event: { id: string; implemented: boolean }) {\r\n    this.recService.toggleImplementation(event.id, event.implemented)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            // Update the recommendation in the list\r\n            const index = this.recommendations.findIndex(r => r.id === event.id);\r\n            if (index !== -1) {\r\n              this.recommendations[index] = response.data;\r\n            }\r\n            // Reload summary\r\n            this.loadSummary();\r\n          } else {\r\n            console.error('Failed to toggle implementation:', response.error);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error toggling implementation:', error);\r\n        }\r\n      });\r\n  }\r\n\r\n  onCreateActionPlan(recommendation: Recommendation) {\r\n    // TODO: Implement action plan creation\r\n    alert(`Create Action Plan for: ${recommendation.title}`);\r\n  }\r\n\r\n  onPageChange(page: number) {\r\n    this.currentPage = page;\r\n    this.loadData();\r\n  }\r\n\r\n  onPageSizeChange(pageSize: number) {\r\n    this.pageSize = pageSize;\r\n    this.currentPage = 1; // Reset to first page\r\n    this.loadData();\r\n  }\r\n\r\n  private loadSummary() {\r\n    this.recService.getSummary()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.summary = response.data;\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading summary:', error);\r\n        }\r\n      });\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-analytics-header',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"analytics-header\">\r\n      <!-- Main Header -->\r\n      <div class=\"header-content\">\r\n        <div class=\"header-main\">\r\n          <div class=\"header-icon\">\r\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 3v18h18M18 17V9M13 17V5M8 17v-3\"></path>\r\n              <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\r\n            </svg>\r\n          </div>\r\n          <div class=\"header-text\">\r\n            <h1 class=\"header-title\">AI Asset Analytics</h1>\r\n            <p class=\"header-description\">\r\n              AI-powered insights and comprehensive analytics for your asset portfolio. \r\n              Get intelligent recommendations to optimize performance and reduce costs.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Last Updated -->\r\n        <div class=\"last-updated\" *ngIf=\"lastUpdated\">\r\n          <svg class=\"update-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n            <path d=\"M12 6v6l4 2\"></path>\r\n          </svg>\r\n          <span>Last updated {{ lastUpdated | date:'short' }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Action Bar -->\r\n      <div class=\"action-bar\">\r\n        <div class=\"action-buttons\">\r\n          <button\r\n            class=\"btn btn-secondary\"\r\n            (click)=\"onRefresh()\"\r\n            [disabled]=\"isLoading\">\r\n            <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path>\r\n              <path d=\"M21 3v5h-5\"></path>\r\n              <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path>\r\n              <path d=\"M3 21v-5h5\"></path>\r\n            </svg>\r\n            <span class=\"btn-text\">Refresh Analysis</span>\r\n          </button>\r\n\r\n          <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"onGenerate()\"\r\n            [disabled]=\"isLoading || isGenerating\">\r\n            <svg *ngIf=\"!isGenerating\" class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\"></path>\r\n            </svg>\r\n            <svg *ngIf=\"isGenerating\" class=\"btn-icon animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n            </svg>\r\n            <span class=\"btn-text\">{{ isGenerating ? 'Generating...' : 'Generate New' }}</span>\r\n          </button>\r\n\r\n          <button\r\n            class=\"btn btn-outline\"\r\n            (click)=\"onExport()\"\r\n            [disabled]=\"isLoading || !hasData\">\r\n            <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\r\n              <polyline points=\"7,10 12,15 17,10\"></polyline>\r\n              <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\r\n            </svg>\r\n            <span class=\"btn-text\">Export Report</span>\r\n          </button>\r\n\r\n          <button\r\n            class=\"btn btn-outline\"\r\n            (click)=\"onSchedule()\"\r\n            [disabled]=\"isLoading\">\r\n            <svg class=\"btn-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n              <path d=\"M12 6v6l4 2\"></path>\r\n            </svg>\r\n            <span class=\"btn-text\">Schedule Updates</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./analytics-header.component.scss']\r\n})\r\nexport class AnalyticsHeaderComponent {\r\n  @Input() lastUpdated: string | null = null;\r\n  @Input() isLoading: boolean = false;\r\n  @Input() isGenerating: boolean = false;\r\n  @Input() hasData: boolean = false;\r\n\r\n  @Output() refresh = new EventEmitter<void>();\r\n  @Output() generate = new EventEmitter<void>();\r\n  @Output() export = new EventEmitter<void>();\r\n  @Output() schedule = new EventEmitter<void>();\r\n\r\n  onRefresh() {\r\n    this.refresh.emit();\r\n  }\r\n\r\n  onGenerate() {\r\n    this.generate.emit();\r\n  }\r\n\r\n  onExport() {\r\n    this.export.emit();\r\n  }\r\n\r\n  onSchedule() {\r\n    this.schedule.emit();\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { \r\n  AnalyticsResponse, \r\n  AnalyticsGenerateResponse, \r\n  ScheduleResponse, \r\n  AnalyticsSnapshot,\r\n  ScheduleSettings,\r\n  AnalyticsFilters\r\n} from './ai-analytics.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AIAnalyticsService {\r\n  private apiUrl = `${environment.apiUrl}/ai/analytics`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Get latest analytics and history\r\n   */\r\n  getAnalytics(): Observable<AnalyticsResponse> {\r\n    return this.http.get<AnalyticsResponse>(`${this.apiUrl}/`);\r\n  }\r\n\r\n  /**\r\n   * Generate new analytics\r\n   */\r\n  generateAnalytics(): Observable<AnalyticsGenerateResponse> {\r\n    return this.http.post<AnalyticsGenerateResponse>(`${this.apiUrl}/generate`, {});\r\n  }\r\n\r\n  /**\r\n   * Export analytics to CSV\r\n   */\r\n  exportAnalytics(): Observable<Blob> {\r\n    return this.http.get(`${this.apiUrl}/export`, { \r\n      responseType: 'blob' \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get schedule settings\r\n   */\r\n  getScheduleSettings(): Observable<ScheduleResponse> {\r\n    return this.http.get<ScheduleResponse>(`${this.apiUrl}/schedule`);\r\n  }\r\n\r\n  /**\r\n   * Update schedule settings\r\n   */\r\n  updateScheduleSettings(settings: ScheduleSettings): Observable<ScheduleResponse> {\r\n    return this.http.post<ScheduleResponse>(`${this.apiUrl}/schedule`, settings);\r\n  }\r\n\r\n  /**\r\n   * Download CSV file\r\n   */\r\n  downloadCsv(blob: Blob, filename: string): void {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Get health score label\r\n   */\r\n  getHealthScoreLabel(score: number): string {\r\n    if (score >= 90) return 'Excellent';\r\n    if (score >= 80) return 'Good';\r\n    if (score >= 70) return 'Fair';\r\n    if (score >= 60) return 'Poor';\r\n    return 'Critical';\r\n  }\r\n\r\n  /**\r\n   * Get health score color class\r\n   */\r\n  getHealthScoreColorClass(score: number): string {\r\n    if (score >= 90) return 'health-excellent';\r\n    if (score >= 80) return 'health-good';\r\n    if (score >= 70) return 'health-fair';\r\n    if (score >= 60) return 'health-poor';\r\n    return 'health-critical';\r\n  }\r\n\r\n  /**\r\n   * Get risk level color class\r\n   */\r\n  getRiskLevelColorClass(riskLevel: string): string {\r\n    const colorMap: { [key: string]: string } = {\r\n      'high': 'risk-high',\r\n      'medium': 'risk-medium',\r\n      'low': 'risk-low'\r\n    };\r\n    return colorMap[riskLevel] || 'risk-medium';\r\n  }\r\n\r\n  /**\r\n   * Get impact color class\r\n   */\r\n  getImpactColorClass(impact: string): string {\r\n    const colorMap: { [key: string]: string } = {\r\n      'high': 'impact-high',\r\n      'medium': 'impact-medium',\r\n      'low': 'impact-low'\r\n    };\r\n    return colorMap[impact] || 'impact-medium';\r\n  }\r\n\r\n  /**\r\n   * Get category icon\r\n   */\r\n  getCategoryIcon(category: string): string {\r\n    const iconMap: { [key: string]: string } = {\r\n      'utilization': 'activity',\r\n      'efficiency': 'trending-up',\r\n      'maintenance': 'wrench',\r\n      'cost': 'dollar-sign',\r\n      'energy': 'zap',\r\n      'vendor': 'truck',\r\n      'lifecycle': 'refresh-cw'\r\n    };\r\n    return iconMap[category] || 'help-circle';\r\n  }\r\n\r\n  /**\r\n   * Get frequency display name\r\n   */\r\n  getFrequencyDisplayName(frequency: string): string {\r\n    const nameMap: { [key: string]: string } = {\r\n      'daily': 'Daily',\r\n      'weekly': 'Weekly',\r\n      'monthly': 'Monthly'\r\n    };\r\n    return nameMap[frequency] || 'Weekly';\r\n  }\r\n\r\n  /**\r\n   * Filter analytics data\r\n   */\r\n  filterAnalyticsData(data: any, filters: AnalyticsFilters): any {\r\n    if (!data) return data;\r\n\r\n    let filteredData = { ...data };\r\n\r\n    // Filter risk assets\r\n    if (data.riskAssets) {\r\n      filteredData.riskAssets = data.riskAssets.filter((asset: any) => {\r\n        if (filters.riskLevel && asset.riskLevel !== filters.riskLevel) return false;\r\n        if (filters.minConfidence && asset.confidence < filters.minConfidence) return false;\r\n        if (filters.search && !asset.name.toLowerCase().includes(filters.search.toLowerCase())) return false;\r\n        return true;\r\n      });\r\n    }\r\n\r\n    // Filter performance insights\r\n    if (data.performanceInsights) {\r\n      filteredData.performanceInsights = data.performanceInsights.filter((insight: any) => {\r\n        if (filters.impact && insight.impact !== filters.impact) return false;\r\n        if (filters.minConfidence && insight.confidence < filters.minConfidence) return false;\r\n        if (filters.category && insight.category !== filters.category) return false;\r\n        if (filters.search && !insight.title.toLowerCase().includes(filters.search.toLowerCase())) return false;\r\n        return true;\r\n      });\r\n    }\r\n\r\n    // Filter cost optimizations\r\n    if (data.costOptimizations) {\r\n      filteredData.costOptimizations = data.costOptimizations.filter((optimization: any) => {\r\n        if (filters.minConfidence && optimization.confidence < filters.minConfidence) return false;\r\n        if (filters.category && optimization.category !== filters.category) return false;\r\n        if (filters.search && !optimization.title.toLowerCase().includes(filters.search.toLowerCase())) return false;\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return filteredData;\r\n  }\r\n}", "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AIAnalyticsService } from '../../shared/ai-analytics.service';\r\n\r\n@Component({\r\n  selector: 'app-health-score-card',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"health-score-card\">\r\n      <div class=\"card-header\">\r\n        <h3 class=\"card-title\">Overall Asset Health Score</h3>\r\n        <div class=\"score-label\" [ngClass]=\"getHealthScoreColorClass(healthScore)\">\r\n          {{ getHealthScoreLabel(healthScore) }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"score-display\">\r\n        <div class=\"score-circle\" [ngClass]=\"getHealthScoreColorClass(healthScore)\">\r\n          <div class=\"score-value\">{{ healthScore }}</div>\r\n          <div class=\"score-percent\">%</div>\r\n        </div>\r\n        \r\n        <div class=\"score-details\">\r\n          <div class=\"detail-item\">\r\n            <span class=\"detail-label\">Asset Age</span>\r\n            <span class=\"detail-value\">{{ avgAssetAge }} years</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"detail-label\">Maintenance Status</span>\r\n            <span class=\"detail-value\">{{ maintenanceStatus }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"detail-label\">Performance</span>\r\n            <span class=\"detail-value\">{{ performanceStatus }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"detail-label\">Condition</span>\r\n            <span class=\"detail-value\">{{ conditionStatus }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"progress-bar\">\r\n        <div \r\n          class=\"progress-fill\" \r\n          [ngClass]=\"getHealthScoreColorClass(healthScore)\"\r\n          [style.width.%]=\"healthScore\">\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"health-description\">\r\n        <p *ngIf=\"healthScore >= 90\" class=\"description-text\">\r\n          Your asset portfolio is in excellent condition with minimal maintenance needs and optimal performance.\r\n        </p>\r\n        <p *ngIf=\"healthScore >= 80 && healthScore < 90\" class=\"description-text\">\r\n          Your assets are performing well with good maintenance practices. Consider minor optimizations.\r\n        </p>\r\n        <p *ngIf=\"healthScore >= 70 && healthScore < 80\" class=\"description-text\">\r\n          Your assets are in fair condition. Some maintenance improvements and optimizations are recommended.\r\n        </p>\r\n        <p *ngIf=\"healthScore >= 60 && healthScore < 70\" class=\"description-text\">\r\n          Your assets need attention. Immediate maintenance and performance improvements are recommended.\r\n        </p>\r\n        <p *ngIf=\"healthScore < 60\" class=\"description-text\">\r\n          Critical attention required. Your assets need immediate maintenance and performance improvements.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./health-score-card.component.scss']\r\n})\r\nexport class HealthScoreCardComponent {\r\n  @Input() healthScore: number = 0;\r\n  @Input() avgAssetAge: number = 0;\r\n  @Input() maintenanceStatus: string = 'Good';\r\n  @Input() performanceStatus: string = 'Optimal';\r\n  @Input() conditionStatus: string = 'Excellent';\r\n\r\n  constructor(private analyticsService: AIAnalyticsService) {}\r\n\r\n  getHealthScoreLabel(score: number): string {\r\n    return this.analyticsService.getHealthScoreLabel(score);\r\n  }\r\n\r\n  getHealthScoreColorClass(score: number): string {\r\n    return this.analyticsService.getHealthScoreColorClass(score);\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RiskAsset } from '../../shared/ai-analytics.interface';\r\nimport { AIAnalyticsService } from '../../shared/ai-analytics.service';\r\n\r\n@Component({\r\n  selector: 'app-risk-assets',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"risk-assets-card\">\r\n      <div class=\"card-header\">\r\n        <h3 class=\"card-title\">High-Risk Assets</h3>\r\n        <div class=\"asset-count\">{{ riskAssets.length }} assets</div>\r\n      </div>\r\n\r\n      <div class=\"assets-list\" *ngIf=\"riskAssets.length > 0; else emptyState\">\r\n        <div \r\n          *ngFor=\"let asset of riskAssets\" \r\n          class=\"asset-item\"\r\n          [ngClass]=\"'risk-' + asset.riskLevel\">\r\n          <div class=\"asset-header\">\r\n            <div class=\"asset-name\">{{ asset.name }}</div>\r\n            <div class=\"risk-badge\" [ngClass]=\"getRiskLevelColorClass(asset.riskLevel)\">\r\n              {{ asset.riskLevel | titlecase }}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"asset-reason\">{{ asset.reason }}</div>\r\n          \r\n          <div class=\"asset-details\">\r\n            <div class=\"confidence-chip\">\r\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z\"></path>\r\n                <path d=\"M12 16V12\"></path>\r\n                <path d=\"M12 8H12.01\"></path>\r\n              </svg>\r\n              {{ asset.confidence }}%\r\n            </div>\r\n            \r\n            <div class=\"cost-info\" *ngIf=\"asset.estimatedCost\">\r\n              <span class=\"cost-label\">Est. Cost:</span>\r\n              <span class=\"cost-value\">{{ asset.estimatedCost | currency:'AED':'symbol':'1.2-2' }}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"asset-actions\">\r\n            <button \r\n              class=\"action-btn primary\"\r\n              (click)=\"onScheduleMaintenance(asset)\">\r\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                <path d=\"M12 6v6l4 2\"></path>\r\n              </svg>\r\n              Schedule Maintenance\r\n            </button>\r\n            \r\n            <button \r\n              class=\"action-btn secondary\"\r\n              (click)=\"onCreateWorkOrder(asset)\">\r\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                <polyline points=\"14,2 14,8 20,8\"></polyline>\r\n                <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\r\n                <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\r\n              </svg>\r\n              Create Work Order\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"recommended-action\">\r\n            <strong>Recommended Action:</strong> {{ asset.recommendedAction }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ng-template #emptyState>\r\n        <div class=\"empty-state\">\r\n          <svg class=\"empty-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n            <path d=\"M9 12l2 2 4-4\"></path>\r\n            <path d=\"M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c1.5 0 2.91.37 4.15 1.02\"></path>\r\n          </svg>\r\n          <h4 class=\"empty-title\">No High-Risk Assets</h4>\r\n          <p class=\"empty-description\">\r\n            Great! Your assets are currently in good condition with no high-risk items identified.\r\n          </p>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./risk-assets.component.scss']\r\n})\r\nexport class RiskAssetsComponent {\r\n  @Input() riskAssets: RiskAsset[] = [];\r\n  @Output() scheduleMaintenance = new EventEmitter<RiskAsset>();\r\n  @Output() createWorkOrder = new EventEmitter<RiskAsset>();\r\n\r\n  constructor(private analyticsService: AIAnalyticsService) {}\r\n\r\n  getRiskLevelColorClass(riskLevel: string): string {\r\n    return this.analyticsService.getRiskLevelColorClass(riskLevel);\r\n  }\r\n\r\n  onScheduleMaintenance(asset: RiskAsset) {\r\n    this.scheduleMaintenance.emit(asset);\r\n  }\r\n\r\n  onCreateWorkOrder(asset: RiskAsset) {\r\n    this.createWorkOrder.emit(asset);\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PerformanceInsight } from '../../shared/ai-analytics.interface';\r\nimport { AIAnalyticsService } from '../../shared/ai-analytics.service';\r\n\r\n@Component({\r\n  selector: 'app-performance-insights',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"insights-card\">\r\n      <div class=\"card-header\">\r\n        <h3 class=\"card-title\">Performance Insights</h3>\r\n        <div class=\"insights-count\">{{ performanceInsights.length }} insights</div>\r\n      </div>\r\n\r\n      <div class=\"insights-list\" *ngIf=\"performanceInsights.length > 0; else emptyState\">\r\n        <div \r\n          *ngFor=\"let insight of performanceInsights; let i = index\" \r\n          class=\"insight-item\"\r\n          [ngClass]=\"'impact-' + insight.impact\">\r\n          <div class=\"insight-header\">\r\n            <div class=\"insight-icon\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path [attr.d]=\"getCategoryIconPath(insight.category)\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"insight-title\">{{ insight.title }}</div>\r\n            <div class=\"impact-badge\" [ngClass]=\"getImpactColorClass(insight.impact)\">\r\n              {{ insight.impact | titlecase }} Impact\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"insight-description\">{{ insight.description }}</div>\r\n          \r\n          <div class=\"insight-details\">\r\n            <div class=\"confidence-chip\">\r\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z\"></path>\r\n                <path d=\"M12 16V12\"></path>\r\n                <path d=\"M12 8H12.01\"></path>\r\n              </svg>\r\n              {{ insight.confidence }}%\r\n            </div>\r\n            \r\n            <div class=\"category-badge\" *ngIf=\"insight.category\">\r\n              {{ insight.category | titlecase }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"insight-action\">\r\n            <div class=\"action-text\">\r\n              <strong>Recommended Action:</strong> {{ insight.action }}\r\n            </div>\r\n            <button \r\n              class=\"action-btn\"\r\n              (click)=\"onViewDetails(insight)\">\r\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\r\n                <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\r\n              </svg>\r\n              View Details\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ng-template #emptyState>\r\n        <div class=\"empty-state\">\r\n          <svg class=\"empty-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n            <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n            <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\r\n          </svg>\r\n          <h4 class=\"empty-title\">No Performance Insights</h4>\r\n          <p class=\"empty-description\">\r\n            Generate analytics to get AI-powered performance insights for your assets.\r\n          </p>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./performance-insights.component.scss']\r\n})\r\nexport class PerformanceInsightsComponent {\r\n  @Input() performanceInsights: PerformanceInsight[] = [];\r\n  @Output() viewDetails = new EventEmitter<PerformanceInsight>();\r\n\r\n  constructor(private analyticsService: AIAnalyticsService) {}\r\n\r\n  getImpactColorClass(impact: string): string {\r\n    return this.analyticsService.getImpactColorClass(impact);\r\n  }\r\n\r\n  getCategoryIconPath(category?: string): string {\r\n    const iconMap: { [key: string]: string } = {\r\n      'utilization': 'M22 12h-4l-3 9L9 3l-3 9H2',\r\n      'efficiency': 'M3 3v18h18M18 17V9M13 17V5M8 17v-3',\r\n      'maintenance': 'M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z',\r\n      'cost': 'M12 1v22M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6'\r\n    };\r\n    \r\n    const iconName = this.analyticsService.getCategoryIcon(category || '');\r\n    return iconMap[iconName] || iconMap['help-circle'];\r\n  }\r\n\r\n  onViewDetails(insight: PerformanceInsight) {\r\n    this.viewDetails.emit(insight);\r\n  }\r\n}\r\n", "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CostOptimization } from '../../shared/ai-analytics.interface';\r\nimport { AIAnalyticsService } from '../../shared/ai-analytics.service';\r\n\r\n@Component({\r\n  selector: 'app-cost-optimizations',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"cost-optimizations-card\">\r\n      <div class=\"card-header\">\r\n        <h3 class=\"card-title\">Cost Optimizations</h3>\r\n        <div class=\"optimizations-count\">{{ costOptimizations.length }} opportunities</div>\r\n      </div>\r\n\r\n      <div class=\"optimizations-list\" *ngIf=\"costOptimizations.length > 0; else emptyState\">\r\n        <div \r\n          *ngFor=\"let optimization of costOptimizations; let i = index\" \r\n          class=\"optimization-item\"\r\n          [ngClass]=\"'category-' + (optimization.category || 'general')\">\r\n          <div class=\"optimization-header\">\r\n            <div class=\"optimization-icon\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path [attr.d]=\"getCategoryIconPath(optimization.category)\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"optimization-title\">{{ optimization.title }}</div>\r\n            <div class=\"category-badge\" *ngIf=\"optimization.category\">\r\n              {{ optimization.category | titlecase }}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"optimization-description\">{{ optimization.description }}</div>\r\n          \r\n          <div class=\"optimization-metrics\">\r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">Estimated Savings</div>\r\n              <div class=\"metric-value savings\">\r\n                {{ optimization.estimatedSavings | currency:'AED':'symbol':'1.2-2' }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">Payback Period</div>\r\n              <div class=\"metric-value\">{{ optimization.paybackPeriod }}</div>\r\n            </div>\r\n            \r\n            <div class=\"metric-item\">\r\n              <div class=\"metric-label\">Confidence</div>\r\n              <div class=\"metric-value\">\r\n                <div class=\"confidence-chip\">\r\n                  <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z\"></path>\r\n                    <path d=\"M12 16V12\"></path>\r\n                    <path d=\"M12 8H12.01\"></path>\r\n                  </svg>\r\n                  {{ optimization.confidence }}%\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"optimization-actions\">\r\n            <button \r\n              class=\"action-btn primary\"\r\n              (click)=\"onImplement(optimization)\">\r\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M9 12l2 2 4-4\"></path>\r\n                <path d=\"M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c1.5 0 2.91.37 4.15 1.02\"></path>\r\n              </svg>\r\n              Implement\r\n            </button>\r\n            \r\n            <button \r\n              class=\"action-btn secondary\"\r\n              (click)=\"onViewDetails(optimization)\">\r\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\r\n                <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\r\n              </svg>\r\n              View Details\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ng-template #emptyState>\r\n        <div class=\"empty-state\">\r\n          <svg class=\"empty-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n            <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z\"></path>\r\n            <path d=\"M12 8V12L15 15\"></path>\r\n          </svg>\r\n          <h4 class=\"empty-title\">No Cost Optimizations</h4>\r\n          <p class=\"empty-description\">\r\n            Generate analytics to discover AI-powered cost optimization opportunities.\r\n          </p>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./cost-optimizations.component.scss']\r\n})\r\nexport class CostOptimizationsComponent {\r\n  @Input() costOptimizations: CostOptimization[] = [];\r\n  @Output() implement = new EventEmitter<CostOptimization>();\r\n  @Output() viewDetails = new EventEmitter<CostOptimization>();\r\n\r\n  constructor(private analyticsService: AIAnalyticsService) {}\r\n\r\n  getCategoryIconPath(category?: string): string {\r\n    const iconMap: { [key: string]: string } = {\r\n      'energy': 'M13 2L3 14h9l-1 8 10-12h-9l1-8z',\r\n      'maintenance': 'M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z',\r\n      'vendor': 'M1 3h15l4 6-4 6H1V3z',\r\n      'lifecycle': 'M1 4v16l4-4 4 4 4-4 4 4V4H1z',\r\n      'general': 'M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z'\r\n    };\r\n    \r\n    const iconName = this.analyticsService.getCategoryIcon(category || '');\r\n    return iconMap[iconName] || iconMap['general'];\r\n  }\r\n\r\n  onImplement(optimization: CostOptimization) {\r\n    this.implement.emit(optimization);\r\n  }\r\n\r\n  onViewDetails(optimization: CostOptimization) {\r\n    this.viewDetails.emit(optimization);\r\n  }\r\n}\r\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { \r\n  AnalyticsSnapshot, \r\n  RiskAsset, \r\n  PerformanceInsight, \r\n  CostOptimization,\r\n  ScheduleSettings\r\n} from '../../shared/ai-analytics.interface';\r\nimport { AIAnalyticsService } from '../../shared/ai-analytics.service';\r\nimport { AnalyticsHeaderComponent } from './analytics-header.component';\r\nimport { HealthScoreCardComponent } from './health-score-card.component';\r\nimport { RiskAssetsComponent } from './risk-assets.component';\r\nimport { PerformanceInsightsComponent } from './performance-insights.component';\r\nimport { CostOptimizationsComponent } from './cost-optimizations.component';\r\n\r\n@Component({\r\n  selector: 'app-ai-analytics',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AnalyticsHeaderComponent,\r\n    HealthScoreCardComponent,\r\n    RiskAssetsComponent,\r\n    PerformanceInsightsComponent,\r\n    CostOptimizationsComponent\r\n  ],\r\n  template: `\r\n    <div class=\"ai-analytics-page\">\r\n      <!-- Header -->\r\n      <app-analytics-header\r\n        [lastUpdated]=\"latest?.createdAt\"\r\n        [isLoading]=\"isLoading\"\r\n        [isGenerating]=\"isGenerating\"\r\n        [hasData]=\"!!latest\"\r\n        (refresh)=\"onRefresh()\"\r\n        (generate)=\"onGenerate()\"\r\n        (export)=\"onExport()\"\r\n        (schedule)=\"onSchedule()\">\r\n      </app-analytics-header>\r\n\r\n      <!-- Main Content -->\r\n      <div class=\"analytics-content\" *ngIf=\"latest; else loadingState\">\r\n        <div class=\"content-grid\">\r\n          <!-- Left Column -->\r\n          <div class=\"left-column\">\r\n            <!-- Health Score -->\r\n            <app-health-score-card\r\n              [healthScore]=\"latest.healthScore\"\r\n              [avgAssetAge]=\"avgAssetAge\"\r\n              [maintenanceStatus]=\"maintenanceStatus\"\r\n              [performanceStatus]=\"performanceStatus\"\r\n              [conditionStatus]=\"conditionStatus\">\r\n            </app-health-score-card>\r\n\r\n            <!-- Performance Insights -->\r\n            <app-performance-insights\r\n              [performanceInsights]=\"latest.performanceInsights\"\r\n              (viewDetails)=\"onViewInsightDetails($event)\">\r\n            </app-performance-insights>\r\n          </div>\r\n\r\n          <!-- Right Column -->\r\n          <div class=\"right-column\">\r\n            <!-- Risk Assets -->\r\n            <app-risk-assets\r\n              [riskAssets]=\"latest.riskAssets\"\r\n              (scheduleMaintenance)=\"onScheduleMaintenance($event)\"\r\n              (createWorkOrder)=\"onCreateWorkOrder($event)\">\r\n            </app-risk-assets>\r\n\r\n            <!-- Cost Optimizations -->\r\n            <app-cost-optimizations\r\n              [costOptimizations]=\"latest.costOptimizations\"\r\n              (implement)=\"onImplementOptimization($event)\"\r\n              (viewDetails)=\"onViewOptimizationDetails($event)\">\r\n            </app-cost-optimizations>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Loading State -->\r\n      <ng-template #loadingState>\r\n        <div class=\"loading-state\" *ngIf=\"isLoading\">\r\n          <div class=\"loading-skeleton\">\r\n            <div class=\"skeleton-header\">\r\n              <div class=\"skeleton-icon\"></div>\r\n              <div class=\"skeleton-content\">\r\n                <div class=\"skeleton-line w-3-4\"></div>\r\n                <div class=\"skeleton-line w-1-2\"></div>\r\n              </div>\r\n            </div>\r\n            <div class=\"skeleton-body\">\r\n              <div class=\"skeleton-line w-full\"></div>\r\n              <div class=\"skeleton-line w-2-3\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Empty State -->\r\n        <div class=\"empty-state\" *ngIf=\"!isLoading && !latest\">\r\n          <svg class=\"empty-icon\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n            <path d=\"M3 3v18h18M18 17V9M13 17V5M8 17v-3\"></path>\r\n            <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"></path>\r\n          </svg>\r\n          <h2 class=\"empty-title\">No Analytics Data</h2>\r\n          <p class=\"empty-description\">\r\n            Generate your first AI-powered analytics report to get comprehensive insights into your asset portfolio.\r\n          </p>\r\n          <button class=\"generate-button\" (click)=\"onGenerate()\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\"></path>\r\n            </svg>\r\n            Generate Analytics\r\n          </button>\r\n        </div>\r\n      </ng-template>\r\n\r\n      <!-- Error State -->\r\n      <div class=\"error-state\" *ngIf=\"errorMessage\">\r\n        <svg class=\"error-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n          <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n          <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n          <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n        </svg>\r\n        <h3 class=\"error-title\">Error Loading Analytics</h3>\r\n        <p class=\"error-description\">{{ errorMessage }}</p>\r\n        <button class=\"retry-button\" (click)=\"onRefresh()\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path>\r\n            <path d=\"M21 3v5h-5\"></path>\r\n            <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path>\r\n            <path d=\"M3 21v-5h5\"></path>\r\n          </svg>\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./ai-analytics.component.scss']\r\n})\r\nexport class AIAnalyticsComponent implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject<void>();\r\n\r\n  // State\r\n  latest: AnalyticsSnapshot | null = null;\r\n  isLoading = false;\r\n  isGenerating = false;\r\n  errorMessage: string | null = null;\r\n\r\n  // Computed properties\r\n  get avgAssetAge(): number {\r\n    return 5.2; // This would come from the analytics data\r\n  }\r\n\r\n  get maintenanceStatus(): string {\r\n    if (!this.latest) return 'Unknown';\r\n    const maintenanceAssets = this.latest.riskAssets.filter(asset => \r\n      asset.recommendedAction.toLowerCase().includes('maintenance')\r\n    ).length;\r\n    \r\n    if (maintenanceAssets === 0) return 'Excellent';\r\n    if (maintenanceAssets <= 2) return 'Good';\r\n    if (maintenanceAssets <= 5) return 'Fair';\r\n    return 'Poor';\r\n  }\r\n\r\n  get performanceStatus(): string {\r\n    if (!this.latest) return 'Unknown';\r\n    const avgConfidence = this.latest.performanceInsights.reduce((sum, insight) => \r\n      sum + insight.confidence, 0) / this.latest.performanceInsights.length;\r\n    \r\n    if (avgConfidence >= 90) return 'Excellent';\r\n    if (avgConfidence >= 80) return 'Good';\r\n    if (avgConfidence >= 70) return 'Fair';\r\n    return 'Poor';\r\n  }\r\n\r\n  get conditionStatus(): string {\r\n    if (!this.latest) return 'Unknown';\r\n    const healthScore = this.latest.healthScore;\r\n    \r\n    if (healthScore >= 90) return 'Excellent';\r\n    if (healthScore >= 80) return 'Good';\r\n    if (healthScore >= 70) return 'Fair';\r\n    if (healthScore >= 60) return 'Poor';\r\n    return 'Critical';\r\n  }\r\n\r\n  constructor(private analyticsService: AIAnalyticsService) {}\r\n\r\n  ngOnInit() {\r\n    this.loadAnalytics();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  loadAnalytics() {\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n\r\n    this.analyticsService.getAnalytics()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.latest = response.data.latest;\r\n          } else {\r\n            this.errorMessage = response.error || 'Failed to load analytics';\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading analytics:', error);\r\n          this.errorMessage = 'Failed to load analytics. Please try again.';\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onRefresh() {\r\n    this.loadAnalytics();\r\n  }\r\n\r\n  onGenerate() {\r\n    this.isGenerating = true;\r\n    this.errorMessage = null;\r\n\r\n    this.analyticsService.generateAnalytics()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success && response.data) {\r\n            this.latest = response.data.latest;\r\n          } else {\r\n            this.errorMessage = response.error || 'Failed to generate analytics';\r\n          }\r\n          this.isGenerating = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error generating analytics:', error);\r\n          this.errorMessage = 'Failed to generate analytics. Please try again.';\r\n          this.isGenerating = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onExport() {\r\n    if (!this.latest) {\r\n      alert('No analytics data to export. Please generate analytics first.');\r\n      return;\r\n    }\r\n\r\n    this.analyticsService.exportAnalytics()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (blob) => {\r\n          const filename = `ai_analytics_${new Date().toISOString().split('T')[0]}.csv`;\r\n          this.analyticsService.downloadCsv(blob, filename);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error exporting analytics:', error);\r\n          this.errorMessage = 'Failed to export analytics. Please try again.';\r\n        }\r\n      });\r\n  }\r\n\r\n  onSchedule() {\r\n    // TODO: Implement schedule modal\r\n    alert('Schedule Updates feature coming soon!');\r\n  }\r\n\r\n  onScheduleMaintenance(asset: RiskAsset) {\r\n    // TODO: Implement schedule maintenance\r\n    alert(`Schedule maintenance for: ${asset.name}`);\r\n  }\r\n\r\n  onCreateWorkOrder(asset: RiskAsset) {\r\n    // TODO: Implement create work order\r\n    alert(`Create work order for: ${asset.name}`);\r\n  }\r\n\r\n  onViewInsightDetails(insight: PerformanceInsight) {\r\n    // TODO: Implement view insight details\r\n    alert(`View details for: ${insight.title}`);\r\n  }\r\n\r\n  onImplementOptimization(optimization: CostOptimization) {\r\n    // TODO: Implement optimization\r\n    alert(`Implement optimization: ${optimization.title}`);\r\n  }\r\n\r\n  onViewOptimizationDetails(optimization: CostOptimization) {\r\n    // TODO: Implement view optimization details\r\n    alert(`View details for: ${optimization.title}`);\r\n  }\r\n}\r\n", "import { Component, ViewChild, ElementRef, OnInit, OnDestroy, HostListener } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AIImageUploadService } from './shared/ai-image-upload.service';\r\nimport { RecognitionResult } from './shared/ai-recognition-result.interface';\r\nimport { LocationService, Location } from '../locations/services/location.service';\r\n// Removed old analytics service import\r\nimport { PredictiveMaintenanceComponent } from './components/predictive-maintenance/predictive-maintenance.component';\r\nimport { NaturalLanguageComponent } from './components/natural-language/natural-language.component';\r\nimport { AIRecommendationsComponent } from './components/ai-recommendations/ai-recommendations.component';\r\nimport { AIAnalyticsComponent } from './components/ai-analytics/ai-analytics.component';\r\n\r\n@Component({\r\n  selector: 'app-ai-features',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, PredictiveMaintenanceComponent, NaturalLanguageComponent, AIRecommendationsComponent, AIAnalyticsComponent],\r\n  templateUrl: './ai-features.component.html',\r\n  styleUrls: ['./ai-features.component.scss']\r\n})\r\nexport class AIFeaturesComponent implements OnInit, OnDestroy {\r\n  @ViewChild('fileInput') fileInput!: ElementRef<HTMLInputElement>;\r\n\r\n  activeTab: string = 'image-recognition';\r\n  selectedFiles: File[] = [];\r\n  filePreviews: { [key: string]: string } = {};\r\n  errorMessage: string = '';\r\n  analysisResult: RecognitionResult | null = null;\r\n  isAnalyzing: boolean = false;\r\n  \r\n  // Feedback properties\r\n  feedbackSubmitted: boolean = false;\r\n  feedbackType: 'accurate' | 'needs_correction' | null = null;\r\n  correctionText: string = '';\r\n  isSubmittingFeedback: boolean = false;\r\n  corrections: Array<{field: string, value: string}> = [];\r\n  \r\n  // Asset creation properties\r\n  showCreateAssetModal: boolean = false;\r\n  isCreatingAsset: boolean = false;\r\n  assetForm = {\r\n    name: '',\r\n    model: '',\r\n    description: '',\r\n    manufacturer: '',\r\n    serialNumber: '',\r\n    location: ''\r\n  };\r\n\r\n  // Location properties\r\n  private destroy$ = new Subject<void>();\r\n  locations: Location[] = [];\r\n  loadingLocations: boolean = false;\r\n\r\n  // Removed old analytics properties\r\n\r\n  tabs = [\r\n    { id: 'image-recognition', label: 'Image Recognition', icon: 'camera' },\r\n    { id: 'predictive-maintenance', label: 'Predictive Maintenance', icon: 'trending-up' },\r\n    { id: 'natural-language', label: 'Natural Language', icon: 'message-circle' },\r\n    { id: 'recommendations', label: 'Recommendations', icon: 'lightbulb' },\r\n    { id: 'analytics', label: 'AI Analytics', icon: 'bar-chart' }\r\n  ];\r\n\r\n  assetTypes = [\r\n    { name: 'HVAC Units', icon: 'hvac' },\r\n    { name: 'Generators', icon: 'generator' },\r\n    { name: 'Pumps', icon: 'pump' },\r\n    { name: 'Conveyor Systems', icon: 'conveyor' },\r\n    { name: 'Vehicles', icon: 'vehicle' },\r\n    { name: 'Machinery', icon: 'machinery' },\r\n    { name: 'Electrical Panels', icon: 'electrical' },\r\n    { name: 'Safety Equipment', icon: 'safety' }\r\n  ];\r\n\r\n  constructor(\r\n    private aiImageUploadService: AIImageUploadService,\r\n    private locationService: LocationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadLocations();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  setActiveTab(tabId: string) {\r\n    this.activeTab = tabId;\r\n  }\r\n\r\n  getTabIcon(iconName: string): string {\r\n    const icons: { [key: string]: string } = {\r\n      'camera': 'M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V20C18 21.1 17.1 22 16 22H8C6.9 22 6 21.1 6 20V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2M12 4V6H12V4M12 8C10.9 8 10 8.9 10 10S10.9 12 12 12S14 11.1 14 10S13.1 8 12 8M12 14C10.9 14 10 14.9 10 16S10.9 18 12 18S14 17.1 14 16S13.1 14 12 14Z',\r\n      'trending-up': 'M16 6L18.29 8.29L13.41 13.17L9.41 9.17L2 16.59L3.41 18L9.41 12L13.41 16L19.71 9.71L22 12V6H16Z',\r\n      'message-circle': 'M12 2C6.48 2 2 6.48 2 12C2 13.54 2.36 14.99 3 16.29L2 22L7.71 21C9.01 21.64 10.46 22 12 22C17.52 22 22 17.52 22 12S17.52 2 12 2M12 4C16.41 4 20 7.59 20 12S16.41 20 12 20C10.74 20 9.57 19.72 8.5 19.24L8 19L4 20L5 16L4.76 15.5C4.28 14.43 4 13.26 4 12C4 7.59 7.59 4 12 4M8 9V11H16V9H8M8 13V15H14V13H8Z',\r\n      'lightbulb': 'M12 2C8.13 2 5 5.13 5 9C5 11.38 6.19 13.47 8 14.74V17C8 17.55 8.45 18 9 18H15C15.55 18 16 17.55 16 17V14.74C17.81 13.47 19 11.38 19 9C19 5.13 15.87 2 12 2M9 21C9 21.55 9.45 22 10 22H14C14.55 22 15 21.55 15 21V20H9V21Z',\r\n      'bar-chart': 'M22 21H2V3H4V19H6V10H10V19H12V6H16V19H18V14H22V21Z'\r\n    };\r\n    return icons[iconName] || icons['camera'];\r\n  }\r\n\r\n  getAssetTypeIcon(iconName: string): string {\r\n    const icons: { [key: string]: string } = {\r\n      'hvac': 'M12 2L2 7L12 12L22 7L12 2Z',\r\n      'generator': 'M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V20C18 21.1 17.1 22 16 22H8C6.9 22 6 21.1 6 20V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2Z',\r\n      'pump': 'M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V20C18 21.1 17.1 22 16 22H8C6.9 22 6 21.1 6 20V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2Z',\r\n      'conveyor': 'M2 12H22M2 12L6 8M2 12L6 16M22 12L18 8M22 12L18 16',\r\n      'vehicle': 'M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V20C18 21.1 17.1 22 16 22H8C6.9 22 6 21.1 6 20V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2Z',\r\n      'machinery': 'M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V20C18 21.1 17.1 22 16 22H8C6.9 22 6 21.1 6 20V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2Z',\r\n      'electrical': 'M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V20C18 21.1 17.1 22 16 22H8C6.9 22 6 21.1 6 20V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2Z',\r\n      'safety': 'M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V20C18 21.1 17.1 22 16 22H8C6.9 22 6 21.1 6 20V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2Z'\r\n    };\r\n    return icons[iconName] || icons['hvac'];\r\n  }\r\n\r\n  // File handling methods\r\n  triggerFileInput() {\r\n    this.fileInput.nativeElement.click();\r\n  }\r\n\r\n  onFileSelected(event: any) {\r\n    const files = Array.from(event.target.files) as File[];\r\n    this.addFiles(files);\r\n  }\r\n\r\n  onDragOver(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const files = Array.from(event.dataTransfer?.files || []);\r\n    this.addFiles(files);\r\n  }\r\n\r\n  addFiles(files: File[]) {\r\n    this.errorMessage = '';\r\n\r\n    // Only take the first file\r\n    const file = files[0];\r\n    if (!file) return;\r\n\r\n    // Validate file\r\n    const validation = this.aiImageUploadService.validate(file);\r\n    if (!validation.ok) {\r\n      this.errorMessage = validation.reason || 'Invalid file';\r\n      return;\r\n    }\r\n\r\n    // Clear existing files and add new one\r\n    this.selectedFiles = [file];\r\n    this.filePreviews = {};\r\n    this.generateFilePreview(file);\r\n  }\r\n\r\n  generateFilePreview(file: File) {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      this.filePreviews[file.name] = e.target?.result as string;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  getFilePreview(file: File): string {\r\n    return this.filePreviews[file.name] || '';\r\n  }\r\n\r\n  removeFile(index: number) {\r\n    this.selectedFiles = [];\r\n    this.filePreviews = {};\r\n    this.errorMessage = '';\r\n  }\r\n\r\n  formatFileSize(bytes: number): string {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  async analyzeImages() {\r\n    if (this.selectedFiles.length === 0) {\r\n      this.errorMessage = 'Please select at least one image';\r\n      return;\r\n    }\r\n\r\n    this.isAnalyzing = true;\r\n    this.errorMessage = '';\r\n    this.analysisResult = null;\r\n    this.feedbackSubmitted = false;\r\n    this.feedbackType = null;\r\n    this.correctionText = '';\r\n    this.corrections = [];\r\n\r\n    try {\r\n      // Convert files to data URLs\r\n      const dataUrls: string[] = [];\r\n      for (const file of this.selectedFiles) {\r\n        const dataUrl = await this.aiImageUploadService.toDataUrl(file);\r\n        dataUrls.push(dataUrl);\r\n      }\r\n\r\n      // Convert data URLs to clean base64 for image recognition API\r\n      const cleanImages = dataUrls.map(img => {\r\n        if (img.startsWith('data:image/')) {\r\n          return img.split(',')[1] || img;\r\n        }\r\n        return img;\r\n      });\r\n\r\n      // Use AI Image Recognition Service\r\n      this.aiImageUploadService.analyze(cleanImages).subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.analysisResult = response.data;\r\n          } else {\r\n            this.errorMessage = 'Analysis failed. Please try again.';\r\n          }\r\n          this.isAnalyzing = false;\r\n        },\r\n        error: (error) => {\r\n          this.errorMessage = error?.error?.message || 'Analysis failed. Please try again.';\r\n          this.isAnalyzing = false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error)\r\n      this.errorMessage = 'Failed to process images. Please try again.';\r\n      this.isAnalyzing = false;\r\n    }\r\n  }\r\n\r\n  // Feedback methods\r\n  selectFeedback(type: 'accurate' | 'needs_correction') {\r\n    this.feedbackType = type;\r\n  }\r\n\r\n  submitFeedback() {\r\n    if (!this.feedbackType) return;\r\n\r\n    // Validate corrections if needs correction is selected\r\n    if (this.feedbackType === 'needs_correction' && this.corrections.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.isSubmittingFeedback = true;\r\n\r\n    // Simulate feedback submission\r\n    setTimeout(() => {\r\n      this.feedbackSubmitted = true;\r\n      this.errorMessage = '';\r\n      this.isSubmittingFeedback = false;\r\n      \r\n      console.log('Feedback submitted:', {\r\n        type: this.feedbackType,\r\n        corrections: this.corrections.map(c => c.value)\r\n      });\r\n      \r\n      // Reset after 3 seconds\r\n      setTimeout(() => {\r\n        this.feedbackSubmitted = false;\r\n        this.feedbackType = null;\r\n        this.correctionText = '';\r\n        this.corrections = [];\r\n      }, 3000);\r\n    }, 1000);\r\n  }\r\n\r\n  cancelFeedback() {\r\n    this.feedbackType = null;\r\n    this.correctionText = '';\r\n    this.corrections = [];\r\n  }\r\n\r\n  addCorrection() {\r\n    this.corrections.push({field: '', value: ''});\r\n  }\r\n\r\n  removeCorrection(index: number) {\r\n    this.corrections.splice(index, 1);\r\n  }\r\n\r\n  updateCorrection(index: number, field: 'field' | 'value', value: string) {\r\n    this.corrections[index][field] = value;\r\n  }\r\n\r\n  getConfidenceClass(confidence: number): string {\r\n    if (confidence >= 80) return 'confidence-high';\r\n    if (confidence >= 60) return 'confidence-medium';\r\n    return 'confidence-low';\r\n  }\r\n\r\n  getConfidenceLevel(confidence: number): string {\r\n    if (confidence >= 80) return 'high';\r\n    if (confidence >= 60) return 'medium';\r\n    return 'low';\r\n  }\r\n\r\n  getConfidenceLabel(confidence: number): string {\r\n    if (confidence >= 80) return 'High';\r\n    if (confidence >= 60) return 'Medium';\r\n    return 'Low';\r\n  }\r\n\r\n  getConditionClass(condition: string): string {\r\n    return condition.toLowerCase();\r\n  }\r\n\r\n  // Location methods\r\n  loadLocations() {\r\n    this.loadingLocations = true;\r\n    \r\n    this.locationService.getLocations({\r\n      per_page: 1000, // Get all locations\r\n      page: 1\r\n    })\r\n    .pipe(takeUntil(this.destroy$))\r\n    .subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.locations = response.data.locations;\r\n          // Sort locations by name on the client side\r\n          this.locations.sort((a, b) => a.name.localeCompare(b.name));\r\n        }\r\n        this.loadingLocations = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading locations:', error);\r\n        this.loadingLocations = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Dropdown state\r\n  showLocationDropdown = false;\r\n  selectedLocation: { id: number | string; name: string } | null = null;\r\n\r\n  // Asset creation methods\r\n  openCreateAssetModal() {\r\n    if (this.analysisResult) {\r\n      // Pre-fill form with AI recognition data\r\n      this.assetForm = {\r\n        name: this.analysisResult.assetType || '',\r\n        model: this.analysisResult.model || '',\r\n        description: `AI-identified ${this.analysisResult.assetType} in ${this.analysisResult.condition.toLowerCase()} condition`,\r\n        manufacturer: this.analysisResult.manufacturer || '',\r\n        serialNumber: this.analysisResult.serialNumber || '',\r\n        location: ''\r\n      };\r\n    }\r\n    this.showCreateAssetModal = true;\r\n  }\r\n\r\n  closeCreateAssetModal() {\r\n    this.showCreateAssetModal = false;\r\n    this.assetForm = {\r\n      name: '',\r\n      model: '',\r\n      description: '',\r\n      manufacturer: '',\r\n      serialNumber: '',\r\n      location: ''\r\n    };\r\n    this.selectedLocation = null;\r\n    this.showLocationDropdown = false;\r\n  }\r\n\r\n  // Dropdown methods\r\n  toggleLocationDropdown(): void {\r\n    this.showLocationDropdown = !this.showLocationDropdown;\r\n  }\r\n\r\n  selectLocation(location: any): void {\r\n    this.selectedLocation = location;\r\n    this.showLocationDropdown = false;\r\n    this.assetForm.location = location?.id ?? null;\r\n  }\r\n\r\n  getLocationDescription(location: any): string {\r\n    return location.description || `Location ID: ${location.id}`;\r\n  }\r\n\r\n  @HostListener('document:click')\r\n  closeOnOutsideClick(): void {\r\n    this.showLocationDropdown = false;\r\n  }\r\n\r\n  // Validation helpers\r\n  hasFieldError(controlName: string): boolean {\r\n    // For now, return false since we're using ngModel instead of reactive forms\r\n    // In a real implementation, you'd check the form control state\r\n    return false;\r\n  }\r\n\r\n  getFieldError(controlName: string): string {\r\n    // For now, return empty string since we're using ngModel instead of reactive forms\r\n    // In a real implementation, you'd return the actual validation error\r\n    return '';\r\n  }\r\n\r\n  createAsset() {\r\n    if (!this.assetForm.name.trim()) {\r\n      this.errorMessage = 'Asset name is required';\r\n      return;\r\n    }\r\n\r\n    this.isCreatingAsset = true;\r\n\r\n    // Simulate API call (replace with actual asset creation)\r\n    setTimeout(() => {\r\n      this.isCreatingAsset = false;\r\n      this.showCreateAssetModal = false;\r\n      this.analysisResult = null; // Clear results after creating asset\r\n      this.selectedFiles = [];\r\n      this.filePreviews = {};\r\n      \r\n      // Show success message\r\n      this.errorMessage = '';\r\n      // You could add a success notification here\r\n    }, 1500);\r\n  }\r\n\r\n  // Removed old analytics methods\r\n\r\n  // Removed old analytics methods\r\n\r\n  // Removed old analytics methods\r\n\r\n\r\n}\r\n", "<div class=\"ai-features-container\">\r\n  <!-- Header Section -->\r\n  <div class=\"header-section\">\r\n    <h1 class=\"main-title\">AI-Powered Features</h1>\r\n    <p class=\"main-description\">Transform your asset management with cutting-edge AI technology. Automate identification, predict maintenance needs, and optimize operations with intelligent insights.</p>\r\n  </div>\r\n\r\n  <!-- Tabs Navigation -->\r\n  <div class=\"tabs-container\">\r\n    <div class=\"tabs-nav\">\r\n      <button\r\n        *ngFor=\"let tab of tabs\"\r\n        [class.active]=\"activeTab === tab.id\"\r\n        (click)=\"setActiveTab(tab.id)\"\r\n        class=\"tab-button\">\r\n        <svg class=\"tab-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <path [attr.d]=\"getTabIcon(tab.icon)\"></path>\r\n        </svg>\r\n        <span class=\"tab-label\">{{ tab.label }}</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Tab Content -->\r\n  <div class=\"tab-content\">\r\n    <!-- Image Recognition Tab -->\r\n    <div *ngIf=\"activeTab === 'image-recognition'\" class=\"tab-panel\">\r\n      <div class=\"section-header\">\r\n        <h2 class=\"section-title\">AI Image Recognition</h2>\r\n        <p class=\"section-description\">Upload asset images for automatic identification, condition assessment, and intelligent data extraction.</p>\r\n      </div>\r\n\r\n      <!-- Asset Image Upload Section -->\r\n      <div class=\"upload-section\">\r\n        <div class=\"upload-area\" (click)=\"triggerFileInput()\" (dragover)=\"onDragOver($event)\" (drop)=\"onDrop($event)\">\r\n          <!-- Upload Placeholder (when no files) -->\r\n          <div class=\"upload-placeholder\" *ngIf=\"selectedFiles.length === 0\">\r\n            <div class=\"upload-icon\">\r\n              <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n                <path d=\"M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z\"></path>\r\n                <circle cx=\"12\" cy=\"13\" r=\"3\"></circle>\r\n            </svg>\r\n          </div>\r\n            <h3 class=\"upload-title\">Upload Asset Image</h3>\r\n            <p class=\"upload-text\">Drag & drop your image here, or click to browse</p>\r\n            <p class=\"upload-hint\">PNG, JPG, JPEG up to 10MB • High-quality, well-lit images recommended</p>\r\n        </div>\r\n\r\n            <!-- Single Image Preview -->\r\n            <div class=\"single-image-preview\" *ngIf=\"selectedFiles.length > 0\">\r\n              <div class=\"preview-item\">\r\n                <img [src]=\"getFilePreview(selectedFiles[0])\" [alt]=\"selectedFiles[0].name\" class=\"preview-image\">\r\n                <div class=\"preview-overlay\">\r\n                  <button class=\"remove-preview\" (click)=\"removeFile(0)\" title=\"Remove image\">\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <path d=\"M18 6L6 18M6 6L18 18\"></path>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <input #fileInput type=\"file\" accept=\"image/png,image/jpeg,image/jpg\" (change)=\"onFileSelected($event)\" style=\"display: none;\">\r\n          </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"upload-actions\">\r\n          <button class=\"btn-secondary\" (click)=\"triggerFileInput()\" [disabled]=\"isAnalyzing\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15M17 8L12 3M12 3L7 8M12 3V15\"></path>\r\n            </svg>\r\n            Upload Images\r\n          </button>\r\n          <button class=\"btn-primary\" (click)=\"analyzeImages()\" [disabled]=\"!selectedFiles.length || isAnalyzing\">\r\n            <svg *ngIf=\"!isAnalyzing\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15M17 8L12 3M12 3L7 8M12 3V15\"></path>\r\n            </svg>\r\n            <svg *ngIf=\"isAnalyzing\" class=\"animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n            </svg>\r\n            {{ isAnalyzing ? 'Analyzing...' : 'Analyze Image' }}\r\n          </button>\r\n              </div>\r\n\r\n        <!-- Loading Overlay -->\r\n        <div class=\"loading-overlay\" *ngIf=\"isAnalyzing\">\r\n          <div class=\"loading-content\">\r\n            <div class=\"loading-animation\">\r\n              <div class=\"ai-brain\">\r\n                <div class=\"brain-pulse\"></div>\r\n                <div class=\"brain-pulse delay-1\"></div>\r\n                <div class=\"brain-pulse delay-2\"></div>\r\n              </div>\r\n            </div>\r\n            <h3>AI is Analyzing Your Image</h3>\r\n            <p class=\"loading-description\">Our advanced AI is examining your asset image to identify its type, condition, and provide intelligent recommendations.</p>\r\n            <div class=\"loading-steps\">\r\n              <div class=\"step active\">\r\n                <div class=\"step-icon\">🔍</div>\r\n                <span>Scanning image details</span>\r\n              </div>\r\n              <div class=\"step\">\r\n                <div class=\"step-icon\">🤖</div>\r\n                <span>AI processing</span>\r\n              </div>\r\n              <div class=\"step\">\r\n                <div class=\"step-icon\">📊</div>\r\n                <span>Generating results</span>\r\n              </div>\r\n              </div>\r\n            <div class=\"loading-tip\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\r\n                <path d=\"M12 17h.01\"></path>\r\n              </svg>\r\n              <span>This usually takes 10-30 seconds</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Error Message -->\r\n        <div class=\"error-message\" *ngIf=\"errorMessage\">\r\n          <p>{{ errorMessage }}</p>\r\n        </div>\r\n\r\n        <!-- Recognition Results -->\r\n        <div class=\"recognition-results\" *ngIf=\"analysisResult\">\r\n          <!-- Results Header -->\r\n          <div class=\"results-header\">\r\n            <div class=\"header-content\">\r\n              <div class=\"header-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M9 12l2 2 4-4\"></path>\r\n                  <path d=\"M21 12c-1 0-3-1-3-3s2-3 3-3 3 1 3 3-2 3-3 3\"></path>\r\n                  <path d=\"M3 12c1 0 3-1 3-3s-2-3-3-3-3 1-3 3 2 3 3 3\"></path>\r\n                  <path d=\"M13 12h3a2 2 0 0 1 2 2v1\"></path>\r\n                  <path d=\"M13 12H9\"></path>\r\n                  <path d=\"M9 12H6a2 2 0 0 0-2 2v1\"></path>\r\n                </svg>\r\n              </div>\r\n              <div class=\"header-text\">\r\n                <h3>AI Recognition Complete</h3>\r\n                <p>Your asset has been successfully analyzed</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Main Results Card -->\r\n          <div class=\"results-card\">\r\n            <div class=\"card-header\">\r\n              <div class=\"asset-type\">\r\n                <div class=\"type-icon\">\r\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\r\n                    <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line>\r\n                    <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\r\n                  </svg>\r\n                </div>\r\n                <div class=\"type-info\">\r\n                  <h4>{{ analysisResult.assetType }}</h4>\r\n                  <span class=\"confidence-badge confidence-{{ getConfidenceLevel(analysisResult.confidence) }}\">\r\n                    {{ analysisResult.confidence }}% Confidence\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"card-content\">\r\n              <div class=\"details-grid\">\r\n                <div class=\"detail-item\" *ngIf=\"analysisResult.manufacturer\">\r\n                  <div class=\"detail-label\">\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <path d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\"></path>\r\n                    </svg>\r\n                    Manufacturer\r\n                  </div>\r\n                  <div class=\"detail-value\">{{ analysisResult.manufacturer }}</div>\r\n                </div>\r\n\r\n                <div class=\"detail-item\" *ngIf=\"analysisResult.model\">\r\n                  <div class=\"detail-label\">\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\r\n                      <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line>\r\n                      <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\r\n                    </svg>\r\n                    Model\r\n                  </div>\r\n                  <div class=\"detail-value\">{{ analysisResult.model }}</div>\r\n                </div>\r\n\r\n                <div class=\"detail-item\" *ngIf=\"analysisResult.serialNumber\">\r\n                  <div class=\"detail-label\">\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path>\r\n                      <polyline points=\"22,6 12,13 2,6\"></polyline>\r\n                    </svg>\r\n                    Serial Number\r\n                  </div>\r\n                  <div class=\"detail-value\">{{ analysisResult.serialNumber }}</div>\r\n                </div>\r\n\r\n                <div class=\"detail-item\" *ngIf=\"analysisResult.assetTag\">\r\n                  <div class=\"detail-label\">\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <path d=\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\"></path>\r\n                      <line x1=\"7\" y1=\"7\" x2=\"7.01\" y2=\"7\"></line>\r\n                    </svg>\r\n                    Asset Tag\r\n                  </div>\r\n                  <div class=\"detail-value\">{{ analysisResult.assetTag }}</div>\r\n                </div>\r\n\r\n                <div class=\"detail-item condition-item\" *ngIf=\"analysisResult.condition\">\r\n                  <div class=\"detail-label\">\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                      <polyline points=\"22,4 12,14.01 9,11.01\"></polyline>\r\n                    </svg>\r\n                    Condition\r\n                  </div>\r\n                  <div class=\"detail-value condition-badge condition-{{ analysisResult.condition.toLowerCase() }}\">\r\n                    {{ analysisResult.condition }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"description\" *ngIf=\"analysisResult.evidence?.notes\">\r\n                <div class=\"description-content\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                    <polyline points=\"14,2 14,8 20,8\"></polyline>\r\n                    <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\r\n                    <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\r\n                  </svg>\r\n                  <p>{{ analysisResult.evidence.notes }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n          <!-- Recommendations Card -->\r\n          <div class=\"recommendations-card\" *ngIf=\"analysisResult.recommendations && analysisResult.recommendations.length > 0\">\r\n            <div class=\"card-header\">\r\n              <div class=\"header-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\r\n                  <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\r\n                  <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                </svg>\r\n              </div>\r\n              <div class=\"header-text\">\r\n                <h4>AI Recommendations</h4>\r\n                <p>Based on the analysis, here are our suggestions</p>\r\n              </div>\r\n            </div>\r\n            <div class=\"recommendations-list\">\r\n              <div class=\"recommendation-item\" *ngFor=\"let rec of analysisResult.recommendations\">\r\n                <div class=\"rec-icon\">\r\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <polyline points=\"20,6 9,17 4,12\"></polyline>\r\n                  </svg>\r\n                </div>\r\n                <span>{{ rec }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Feedback Section -->\r\n          <div class=\"feedback-card\" *ngIf=\"!feedbackSubmitted\">\r\n            <div class=\"card-header\">\r\n              <div class=\"header-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\r\n                </svg>\r\n              </div>\r\n              <div class=\"header-text\">\r\n                <h4>Help Improve AI Recognition</h4>\r\n                <p>Was this recognition accurate? Your feedback helps improve our AI.</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"feedback-content\">\r\n              <div class=\"feedback-options\">\r\n                <button\r\n                  class=\"feedback-btn accurate\"\r\n                  [class.selected]=\"feedbackType === 'accurate'\"\r\n                  (click)=\"selectFeedback('accurate')\">\r\n                  <div class=\"btn-icon\">\r\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <path d=\"M14 9V5a3 3 0 0 0-6 0v4\"></path>\r\n                      <rect x=\"2\" y=\"9\" width=\"20\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\r\n                      <path d=\"M7 13h10\"></path>\r\n                    </svg>\r\n                  </div>\r\n                  <div class=\"btn-text\">\r\n                    <span class=\"btn-title\">Accurate</span>\r\n                    <span class=\"btn-subtitle\">Recognition was correct</span>\r\n                  </div>\r\n                </button>\r\n\r\n                <button\r\n                  class=\"feedback-btn needs-correction\"\r\n                  [class.selected]=\"feedbackType === 'needs_correction'\"\r\n                  (click)=\"selectFeedback('needs_correction')\">\r\n                  <div class=\"btn-icon\">\r\n                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <path d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 12a9 9 0 1 1 18 0 9 9 0 0 1-18 0z\"></path>\r\n                    </svg>\r\n                  </div>\r\n                  <div class=\"btn-text\">\r\n                    <span class=\"btn-title\">Needs Correction</span>\r\n                    <span class=\"btn-subtitle\">Something was wrong</span>\r\n                  </div>\r\n                </button>\r\n              </div>\r\n\r\n              <div class=\"correction-section\" *ngIf=\"feedbackType === 'needs_correction'\">\r\n                <div class=\"section-header\">\r\n                  <h5>What needs to be corrected?</h5>\r\n                  <p>Please specify what was incorrect in the recognition</p>\r\n                </div>\r\n                <div class=\"corrections-list\">\r\n                  <div class=\"correction-item\" *ngFor=\"let correction of corrections; let i = index\">\r\n                    <input\r\n                      type=\"text\"\r\n                      [(ngModel)]=\"correction.value\"\r\n                      placeholder=\"Enter correction...\"\r\n                      class=\"correction-input\">\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"remove-correction\"\r\n                      (click)=\"removeCorrection(i)\">\r\n                      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    class=\"add-correction\"\r\n                    (click)=\"addCorrection()\">\r\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                      <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\r\n                      <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n                    </svg>\r\n                    Add Correction\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"feedback-actions\" *ngIf=\"feedbackType\">\r\n                <button\r\n                  class=\"btn-secondary\"\r\n                  (click)=\"cancelFeedback()\">\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  class=\"btn-primary\"\r\n                  [disabled]=\"isSubmittingFeedback\"\r\n                  (click)=\"submitFeedback()\">\r\n                  <svg *ngIf=\"isSubmittingFeedback\" class=\"animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n                  </svg>\r\n                  {{ isSubmittingFeedback ? 'Submitting...' : 'Submit Feedback' }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Feedback Success -->\r\n          <div class=\"success-card\" *ngIf=\"feedbackSubmitted\">\r\n            <div class=\"success-content\">\r\n              <div class=\"success-icon\">\r\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                  <polyline points=\"22,4 12,14.01 9,11.01\"></polyline>\r\n                </svg>\r\n              </div>\r\n              <h4>Thank You!</h4>\r\n              <p>Your feedback has been submitted and will help improve our AI recognition.</p>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Create Asset Button -->\r\n          <div class=\"create-asset-section\">\r\n            <button class=\"create-asset-btn\" (click)=\"openCreateAssetModal()\">\r\n              <div class=\"btn-icon\">\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                  <polyline points=\"14,2 14,8 20,8\"></polyline>\r\n                  <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\r\n                  <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\r\n                  <polyline points=\"10,9 9,9 8,9\"></polyline>\r\n                </svg>\r\n              </div>\r\n              <div class=\"btn-text\">\r\n                <span class=\"btn-title\">Create Asset Record</span>\r\n                <span class=\"btn-subtitle\">Save this recognition as a new asset</span>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Supported Asset Types Section -->\r\n      <div class=\"supported-assets-section\">\r\n        <div class=\"section-header\">\r\n          <h3 class=\"section-title\">Supported Asset Types</h3>\r\n          <p class=\"section-description\">Our AI can recognize and analyze various types of industrial equipment and assets with high accuracy.</p>\r\n        </div>\r\n\r\n        <div class=\"asset-types-grid\">\r\n          <div class=\"asset-type-card\" *ngFor=\"let assetType of assetTypes\">\r\n            <div class=\"asset-icon-wrapper\">\r\n            <div class=\"asset-type-icon\">\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path [attr.d]=\"getAssetTypeIcon(assetType.icon)\"></path>\r\n              </svg>\r\n            </div>\r\n            </div>\r\n            <div class=\"asset-type-info\">\r\n            <span class=\"asset-type-name\">{{ assetType.name }}</span>\r\n              <span class=\"asset-type-status\">Supported</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    <!-- Analytics Loading Overlay -->\r\n    <div class=\"loading-overlay\" *ngIf=\"isAnalyzingAssets\">\r\n      <div class=\"loading-content\">\r\n        <div class=\"loading-spinner\">\r\n          <svg class=\"animate-spin\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n          </svg>\r\n        </div>\r\n        <h3>Analyzing Portfolio...</h3>\r\n        <p>Our AI is analyzing your asset portfolio to provide comprehensive insights and recommendations.</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n    <!-- Predictive Maintenance Tab -->\r\n    <div *ngIf=\"activeTab === 'predictive-maintenance'\" class=\"tab-panel\">\r\n      <app-predictive-maintenance></app-predictive-maintenance>\r\n    </div>\r\n\r\n    <!-- Natural Language Tab -->\r\n    <div *ngIf=\"activeTab === 'natural-language'\" class=\"tab-panel\">\r\n      <app-natural-language></app-natural-language>\r\n    </div>\r\n\r\n    <!-- AI Recommendations Tab -->\r\n    <div *ngIf=\"activeTab === 'recommendations'\" class=\"tab-panel\">\r\n      <app-ai-recommendations></app-ai-recommendations>\r\n    </div>\r\n\r\n    <!-- AI Analytics Tab -->\r\n    <div *ngIf=\"activeTab === 'analytics'\" class=\"tab-panel\">\r\n      <app-ai-analytics></app-ai-analytics>\r\n    </div>\r\n\r\n\r\n\r\n    <!-- Old Analytics Tab - Removed -->\r\n    <div *ngIf=\"false\" class=\"tab-panel\">\r\n      <div class=\"section-header\">\r\n        <h2 class=\"section-title\">AI Asset Analytics</h2>\r\n        <p class=\"section-description\">Get comprehensive insights into your asset portfolio with AI-powered analysis.</p>\r\n      </div>\r\n\r\n      <!-- Asset Selection Section -->\r\n      <div class=\"analytics-section\">\r\n        <div class=\"section-header\">\r\n          <h3>Asset Portfolio</h3>\r\n          <div class=\"section-actions\">\r\n            <button class=\"btn-secondary\" (click)=\"addSampleAssets()\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M12 5v14M5 12h14\"></path>\r\n              </svg>\r\n              Add Sample Assets\r\n            </button>\r\n            <button class=\"btn-secondary\" (click)=\"clearSelectedAssets()\" [disabled]=\"selectedAssets.length === 0\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6\"></path>\r\n              </svg>\r\n              Clear All\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Selected Assets List -->\r\n        <div class=\"selected-assets\" *ngIf=\"selectedAssets.length > 0\">\r\n          <div class=\"asset-card\" *ngFor=\"let asset of selectedAssets\">\r\n            <div class=\"asset-info\">\r\n              <h4>{{ asset.name }}</h4>\r\n              <p class=\"asset-details\">{{ asset.type }} • {{ asset.manufacturer }} {{ asset.model }}</p>\r\n              <p class=\"asset-meta\">Age: {{ asset.age }} years • Condition: {{ asset.condition }} • Value: ${{ asset.value | number }}</p>\r\n            </div>\r\n            <div class=\"asset-status\">\r\n              <span class=\"status-badge\" [ngClass]=\"asset.condition.toLowerCase()\">{{ asset.condition }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Empty State -->\r\n        <div class=\"empty-state\" *ngIf=\"selectedAssets.length === 0\">\r\n          <svg class=\"empty-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\">\r\n            <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n          </svg>\r\n          <h3>No Assets Selected</h3>\r\n          <p>Add assets to your portfolio to get AI-powered analytics and insights.</p>\r\n        </div>\r\n\r\n        <!-- Image Upload Section -->\r\n        <div class=\"image-upload-section\" *ngIf=\"selectedAssets.length > 0\">\r\n          <h4>Asset Images (Optional)</h4>\r\n          <p class=\"section-description\">Upload images of your assets for enhanced analysis. Maximum 5 images.</p>\r\n\r\n          <div class=\"image-upload-area\">\r\n            <input\r\n              type=\"file\"\r\n              #analyticsFileInput\r\n              (change)=\"onAnalyticsFileSelected($event)\"\r\n              accept=\"image/*\"\r\n              multiple\r\n              [disabled]=\"analyticsImages.length >= 5\"\r\n              class=\"file-input\">\r\n\r\n            <div class=\"upload-prompt\" (click)=\"analyticsFileInput.click()\">\r\n              <svg class=\"upload-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\r\n                <polyline points=\"17,8 12,3 7,8\"></polyline>\r\n                <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line>\r\n              </svg>\r\n              <p>Click to upload images or drag and drop</p>\r\n              <span class=\"upload-limit\">{{ analyticsImages.length }}/5 images</span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Image Previews -->\r\n          <div class=\"image-previews\" *ngIf=\"analyticsImages.length > 0\">\r\n            <div class=\"preview-item\" *ngFor=\"let image of analyticsImages; let i = index\">\r\n              <img [src]=\"image\" [alt]=\"'Asset image ' + (i + 1)\">\r\n              <button class=\"remove-image\" (click)=\"removeAnalyticsImage(i)\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <path d=\"M18 6L6 18M6 6L18 18\"></path>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"image-actions\" *ngIf=\"analyticsImages.length > 0\">\r\n            <button class=\"btn-secondary\" (click)=\"clearAnalyticsImages()\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6\"></path>\r\n              </svg>\r\n              Clear All Images\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Analysis Button -->\r\n        <div class=\"analysis-actions\" *ngIf=\"selectedAssets.length > 0\">\r\n          <button\r\n            class=\"btn-primary\"\r\n            (click)=\"analyzeAssets()\"\r\n            [disabled]=\"isAnalyzingAssets\">\r\n            <svg *ngIf=\"!isAnalyzingAssets\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M9 19c-5 0-7-2-7-5V6c0-3 2-5 7-5s7 2 7 5v8c0 3-2 5-7 5zM15 13l3 3-3 3\"></path>\r\n            </svg>\r\n            <svg *ngIf=\"isAnalyzingAssets\" class=\"animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n            </svg>\r\n            {{ isAnalyzingAssets ? 'Analyzing...' : 'Analyze Portfolio' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Analytics Results -->\r\n      <div class=\"analytics-results\" *ngIf=\"analyticsResult\">\r\n        <div class=\"results-header\">\r\n          <h3>Analytics Results</h3>\r\n        </div>\r\n\r\n        <!-- Health Score -->\r\n        <div class=\"health-score-section\">\r\n          <h4>Overall Health Score</h4>\r\n          <div class=\"health-score-display\">\r\n            <div class=\"score-circle\" [ngClass]=\"getHealthScoreClass(analyticsResult.healthScore)\">\r\n              <span class=\"score-value\">{{ analyticsResult.healthScore }}</span>\r\n              <span class=\"score-label\">/ 100</span>\r\n            </div>\r\n            <div class=\"score-description\">\r\n              <p>Portfolio Health Assessment</p>\r\n              <span class=\"score-status\" [ngClass]=\"getHealthScoreClass(analyticsResult.healthScore)\">\r\n                {{ analyticsResult.healthScore >= 80 ? 'Excellent' : analyticsResult.healthScore >= 60 ? 'Good' : analyticsResult.healthScore >= 40 ? 'Fair' : 'Poor' }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Risk Assets -->\r\n        <div class=\"risk-assets-section\" *ngIf=\"analyticsResult.riskAssets.length > 0\">\r\n          <h4>High-Risk Assets</h4>\r\n          <div class=\"risk-assets-list\">\r\n            <div class=\"risk-asset-card\" *ngFor=\"let asset of analyticsResult.riskAssets\">\r\n              <div class=\"risk-info\">\r\n                <h5>{{ asset.name }}</h5>\r\n                <p class=\"risk-reason\">{{ asset.reason }}</p>\r\n              </div>\r\n              <div class=\"risk-meta\">\r\n                <span class=\"risk-level\" [ngClass]=\"getRiskLevelClass(asset.riskLevel)\">{{ asset.riskLevel }}</span>\r\n                <span class=\"confidence\">{{ asset.confidence }}% confidence</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Performance Insights -->\r\n        <div class=\"insights-section\" *ngIf=\"analyticsResult.insights.length > 0\">\r\n          <h4>Performance Insights</h4>\r\n          <div class=\"insights-list\">\r\n            <div class=\"insight-card\" *ngFor=\"let insight of analyticsResult.insights\">\r\n              <div class=\"insight-header\">\r\n                <h5>{{ insight.title }}</h5>\r\n                <span class=\"impact-badge\" [ngClass]=\"getImpactClass(insight.impact)\">{{ insight.impact }}</span>\r\n              </div>\r\n              <p class=\"insight-description\">{{ insight.description }}</p>\r\n              <div class=\"insight-action\">\r\n                <strong>Action:</strong> {{ insight.action }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Cost Optimizations -->\r\n        <div class=\"optimizations-section\" *ngIf=\"analyticsResult.optimizations.length > 0\">\r\n          <h4>Cost Optimization Opportunities</h4>\r\n          <div class=\"optimizations-list\">\r\n            <div class=\"optimization-card\" *ngFor=\"let opt of analyticsResult.optimizations\">\r\n              <div class=\"optimization-header\">\r\n                <h5>{{ opt.title }}</h5>\r\n                <div class=\"savings-info\">\r\n                  <span class=\"savings-amount\">AED {{ opt.estimatedSavings | number }}</span>\r\n                  <span class=\"payback-period\">{{ opt.paybackPeriod }} payback</span>\r\n                </div>\r\n              </div>\r\n              <p class=\"optimization-description\">{{ opt.description }}</p>\r\n              <div class=\"optimization-confidence\">\r\n                <span class=\"confidence-label\">Confidence:</span>\r\n                <span class=\"confidence-value\">{{ opt.confidence }}%</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Error Message -->\r\n      <div class=\"error-message\" *ngIf=\"errorMessage\">\r\n        <p>{{ errorMessage }}</p>\r\n      </div>\r\n    </div>\r\n\r\n  <!-- Create Asset Record Modal -->\r\n  <div class=\"create-asset-modal\" *ngIf=\"showCreateAssetModal\">\r\n    <div class=\"modal-overlay\" (click)=\"closeCreateAssetModal()\"></div>\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <div class=\"modal-title\">\r\n          <div class=\"title-icon\">\r\n            <svg class=\"modal-icon\" width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n              <polyline points=\"14,2 14,8 20,8\"></polyline>\r\n              <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\r\n              <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\r\n              <polyline points=\"10,9 9,9 8,9\"></polyline>\r\n            </svg>\r\n          </div>\r\n          <div class=\"title-content\">\r\n            <h2>Create Asset Record</h2>\r\n            <p>Add a new asset to your inventory with detailed information</p>\r\n          </div>\r\n        </div>\r\n        <button class=\"close-modal\" (click)=\"closeCreateAssetModal()\">\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M18 6L6 18M6 6L18 18\"></path>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <p class=\"modal-subtitle\">Complete the asset details based on AI recognition</p>\r\n\r\n        <form class=\"asset-form\">\r\n          <div class=\"form-container\">\r\n            <div class=\"form-column\">\r\n              <div class=\"form-row\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('name')\">\r\n                  <label>Asset Name <span class=\"required\">*</span></label>\r\n                  <input\r\n                    type=\"text\"\r\n                    [(ngModel)]=\"assetForm.name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter asset name\"\r\n                    [class.error-input]=\"hasFieldError('name')\">\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('name')\">\r\n                    {{ getFieldError('name') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('model')\">\r\n                  <label>Model</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    [(ngModel)]=\"assetForm.model\"\r\n                    name=\"model\"\r\n                    placeholder=\"Enter model\"\r\n                    [class.error-input]=\"hasFieldError('model')\">\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('model')\">\r\n                    {{ getFieldError('model') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row full-width\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('description')\">\r\n                  <label>Description</label>\r\n                  <textarea\r\n                    [(ngModel)]=\"assetForm.description\"\r\n                    name=\"description\"\r\n                    placeholder=\"Enter description\"\r\n                    [class.error-input]=\"hasFieldError('description')\"></textarea>\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('description')\">\r\n                    {{ getFieldError('description') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-column\">\r\n              <div class=\"form-row\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('manufacturer')\">\r\n                  <label>Manufacturer</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    [(ngModel)]=\"assetForm.manufacturer\"\r\n                    name=\"manufacturer\"\r\n                    placeholder=\"Enter manufacturer\"\r\n                    [class.error-input]=\"hasFieldError('manufacturer')\">\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('manufacturer')\">\r\n                    {{ getFieldError('manufacturer') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row\">\r\n                <div class=\"form-group\" [class.error]=\"hasFieldError('serialNumber')\">\r\n                  <label>Serial Number</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    [(ngModel)]=\"assetForm.serialNumber\"\r\n                    name=\"serialNumber\"\r\n                    placeholder=\"Enter serial number\"\r\n                    [class.error-input]=\"hasFieldError('serialNumber')\">\r\n                  <div class=\"field-error\" *ngIf=\"hasFieldError('serialNumber')\">\r\n                    {{ getFieldError('serialNumber') }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-row full-width\">\r\n            <div class=\"form-group\" [class.error]=\"hasFieldError('location')\">\r\n              <label>Asset Location <span class=\"required\">*</span></label>\r\n\r\n              <div class=\"relative generic-dropdown\" (click)=\"$event.stopPropagation()\">\r\n                <button\r\n                  type=\"button\"\r\n                  (click)=\"toggleLocationDropdown()\"\r\n                  class=\"dropdown-button\"\r\n                  [class.error]=\"hasFieldError('location')\"\r\n                  [class.active]=\"showLocationDropdown\"\r\n                  [disabled]=\"loadingLocations\">\r\n                  <div class=\"dropdown-content\">\r\n                    <span *ngIf=\"!selectedLocation\" class=\"placeholder\">\r\n                      {{ loadingLocations ? 'Loading locations...' : 'Select a location' }}\r\n                    </span>\r\n\r\n                    <div *ngIf=\"selectedLocation\" class=\"selected-item\">\r\n                      <div class=\"item-icon\">\r\n                        <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <span class=\"selected-text\">{{ selectedLocation.name }}</span>\r\n                    </div>\r\n\r\n                    <svg class=\"dropdown-arrow\" [class.rotated]=\"showLocationDropdown\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n\r\n                <div *ngIf=\"showLocationDropdown\" class=\"dropdown-menu\">\r\n                  <div class=\"dropdown-header\">Select location</div>\r\n\r\n                  <button\r\n                    *ngFor=\"let location of locations\"\r\n                    type=\"button\"\r\n                    (click)=\"selectLocation(location)\"\r\n                    class=\"dropdown-item\"\r\n                    [class.selected]=\"selectedLocation?.id === location.id\">\r\n                    <div class=\"item-content\">\r\n                      <div class=\"item-icon\">\r\n                        <svg class=\"icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\r\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\r\n                        </svg>\r\n                      </div>\r\n                      <div class=\"item-details\">\r\n                        <div class=\"item-name\">{{ location.name }}</div>\r\n                        <div class=\"item-description\">{{ getLocationDescription(location) }}</div>\r\n                      </div>\r\n                    </div>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"field-error\" *ngIf=\"hasFieldError('location')\">\r\n                {{ getFieldError('location') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\">\r\n        <button class=\"btn-secondary\" (click)=\"closeCreateAssetModal()\" [disabled]=\"isCreatingAsset\">\r\n          Cancel\r\n        </button>\r\n        <button\r\n          class=\"btn-primary\"\r\n          (click)=\"createAsset()\"\r\n          [disabled]=\"isCreatingAsset || !assetForm.name.trim()\">\r\n          <svg *ngIf=\"!isCreatingAsset\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n          </svg>\r\n          <svg *ngIf=\"isCreatingAsset\" class=\"animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <path d=\"M21 12a9 9 0 11-6.219-8.56\"></path>\r\n          </svg>\r\n          {{ isCreatingAsset ? 'Creating...' : 'Create Asset' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>\r\n"],
  "mappings": "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",
  "names": ["err", "_c0", "_c0"]
}
