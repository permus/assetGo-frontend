{
  "version": 3,
  "sources": ["src/app/shared/components/pagination/pagination.component.ts", "src/app/shared/components/pagination/pagination.component.html"],
  "sourcesContent": ["import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nexport interface PaginationData {\r\n  current_page: number;\r\n  last_page: number;\r\n  per_page: number;\r\n  total: number;\r\n  from: number;\r\n  to: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-pagination',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.scss']\r\n})\r\nexport class PaginationComponent implements OnChanges {\r\n  @Input() pagination!: PaginationData;\r\n  @Input() showPerPageSelector: boolean = true;\r\n  @Input() showJumpToPage: boolean = true;\r\n  @Input() perPageOptions: number[] = [10, 20, 50, 100];\r\n  @Input() maxVisiblePages: number = 7;\r\n\r\n  @Output() pageChange = new EventEmitter<number>();\r\n  @Output() perPageChange = new EventEmitter<number>();\r\n\r\n  jumpToPage: number | null = null;\r\n  visiblePages: number[] = [];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['pagination']) {\r\n      this.calculateVisiblePages();\r\n      this.jumpToPage = this.pagination.current_page;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate which page numbers to show\r\n   */\r\n  private calculateVisiblePages(): void {\r\n    const current = this.pagination.current_page;\r\n    const total = this.pagination.last_page;\r\n    const maxVisible = this.maxVisiblePages;\r\n\r\n    this.visiblePages = [];\r\n\r\n    if (total <= maxVisible) {\r\n      // Show all pages if total is less than max visible\r\n      for (let i = 1; i <= total; i++) {\r\n        this.visiblePages.push(i);\r\n      }\r\n    } else {\r\n      // Calculate range around current page\r\n      let start = Math.max(1, current - Math.floor(maxVisible / 2));\r\n      let end = Math.min(total, start + maxVisible - 1);\r\n\r\n      // Adjust start if we're near the end\r\n      if (end - start + 1 < maxVisible) {\r\n        start = Math.max(1, end - maxVisible + 1);\r\n      }\r\n\r\n      for (let i = start; i <= end; i++) {\r\n        this.visiblePages.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Navigate to a specific page\r\n   */\r\n  goToPage(page: number): void {\r\n    if (page >= 1 && page <= this.pagination.last_page && page !== this.pagination.current_page) {\r\n      this.pageChange.emit(page);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change items per page\r\n   */\r\n  onPerPageChange(event: any): void {\r\n    const newPerPage = parseInt(event.target.value);\r\n    if (newPerPage !== this.pagination.per_page) {\r\n      this.perPageChange.emit(newPerPage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Jump to a specific page using input\r\n   */\r\n  onJumpToPage(): void {\r\n    if (this.jumpToPage && this.jumpToPage >= 1 && this.jumpToPage <= this.pagination.last_page) {\r\n      this.goToPage(this.jumpToPage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Go to previous page\r\n   */\r\n  previousPage(): void {\r\n    if (this.pagination.current_page > 1) {\r\n      this.goToPage(this.pagination.current_page - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Go to next page\r\n   */\r\n  nextPage(): void {\r\n    if (this.pagination.current_page < this.pagination.last_page) {\r\n      this.goToPage(this.pagination.current_page + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if we should show ellipsis before pages\r\n   */\r\n  get showStartEllipsis(): boolean {\r\n    return this.visiblePages.length > 0 && this.visiblePages[0] > 2;\r\n  }\r\n\r\n  /**\r\n   * Check if we should show ellipsis after pages\r\n   */\r\n  get showEndEllipsis(): boolean {\r\n    return this.visiblePages.length > 0 && \r\n           this.visiblePages[this.visiblePages.length - 1] < this.pagination.last_page - 1;\r\n  }\r\n}", "<!-- Pagination Component -->\r\n<div class=\"flex flex-col rounded-xl sm:flex-row sm:items-center sm:justify-between bg-white px-6 py-4 border-t border-gray-200\">\r\n\r\n  <!-- Left: Per Page Selector -->\r\n  <div *ngIf=\"showPerPageSelector\" class=\"flex items-center space-x-2 mb-4 sm:mb-0\">\r\n    <label for=\"per-page\" class=\"text-sm text-gray-700\">Show:</label>\r\n    <select\r\n      id=\"per-page\"\r\n      [value]=\"pagination.per_page\"\r\n      (change)=\"onPerPageChange($event)\"\r\n      class=\"px-3 py-1 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\r\n      <option *ngFor=\"let option of perPageOptions\" [value]=\"option\">\r\n        {{ option }}\r\n      </option>\r\n    </select>\r\n    <span class=\"text-sm text-gray-700\">per page</span>\r\n  </div>\r\n\r\n  <!-- Center: Pagination Controls -->\r\n  <div *ngIf=\"pagination.last_page > 1\" class=\"flex items-center justify-center mb-4 sm:mb-0\">\r\n    <nav class=\"flex items-center space-x-1\" aria-label=\"Pagination\">\r\n\r\n      <!-- Previous Button -->\r\n      <button\r\n        (click)=\"previousPage()\"\r\n        [disabled]=\"pagination.current_page === 1\"\r\n        class=\"flex items-center justify-center w-10 h-10 text-sm font-medium rounded-lg transition-colors\r\n               disabled:opacity-50 disabled:cursor-not-allowed\r\n               enabled:hover:bg-gray-50 enabled:text-gray-700\r\n               bg-white border border-gray-300 text-gray-500\">\r\n        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\"></path>\r\n        </svg>\r\n      </button>\r\n\r\n      <!-- First Page (if not in visible range) -->\r\n      <button\r\n        *ngIf=\"visiblePages.length > 0 && visiblePages[0] > 1\"\r\n        (click)=\"goToPage(1)\"\r\n        class=\"flex items-center justify-center w-10 h-10 text-sm font-medium rounded-lg transition-colors\r\n               bg-white text-gray-500 border border-gray-300 hover:bg-gray-50 hover:text-gray-700\">\r\n        1\r\n      </button>\r\n\r\n      <!-- Start Ellipsis -->\r\n      <span *ngIf=\"showStartEllipsis\" class=\"flex items-center justify-center w-10 h-10 text-gray-400\">\r\n        ...\r\n      </span>\r\n\r\n      <!-- Page Numbers -->\r\n      <button\r\n        *ngFor=\"let page of visiblePages\"\r\n        (click)=\"goToPage(page)\"\r\n        [class]=\"pagination.current_page === page ?\r\n                  'bg-blue-600 text-white border-blue-600 shadow-sm' :\r\n                  'bg-white text-gray-500 border-gray-300 hover:bg-gray-50 hover:text-gray-700'\"\r\n        class=\"flex items-center justify-center w-10 h-10 text-sm font-medium rounded-lg border transition-colors\">\r\n        {{ page }}\r\n      </button>\r\n\r\n      <!-- End Ellipsis -->\r\n      <span *ngIf=\"showEndEllipsis\" class=\"flex items-center justify-center w-10 h-10 text-gray-400\">\r\n        ...\r\n      </span>\r\n\r\n      <!-- Last Page (if not in visible range) -->\r\n      <button\r\n        *ngIf=\"visiblePages.length > 0 && visiblePages[visiblePages.length - 1] < pagination.last_page\"\r\n        (click)=\"goToPage(pagination.last_page)\"\r\n        class=\"flex items-center justify-center w-10 h-10 text-sm font-medium rounded-lg transition-colors\r\n               bg-white text-gray-500 border border-gray-300 hover:bg-gray-50 hover:text-gray-700\">\r\n        {{ pagination.last_page }}\r\n      </button>\r\n\r\n      <!-- Next Button -->\r\n      <button\r\n        (click)=\"nextPage()\"\r\n        [disabled]=\"pagination.current_page === pagination.last_page\"\r\n        class=\"flex items-center justify-center w-10 h-10 text-sm font-medium rounded-lg transition-colors\r\n               disabled:opacity-50 disabled:cursor-not-allowed\r\n               enabled:hover:bg-gray-50 enabled:text-gray-700\r\n               bg-white border border-gray-300 text-gray-500\">\r\n        <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\"></path>\r\n        </svg>\r\n      </button>\r\n\r\n    </nav>\r\n  </div>\r\n\r\n  <!-- Right: Pagination Info and Jump to Page -->\r\n  <div class=\"flex flex-col sm:flex-row sm:items-center sm:space-x-4\">\r\n\r\n    <!-- Pagination Info -->\r\n    <div class=\"text-sm text-gray-700 text-center sm:text-left mb-2 sm:mb-0\">\r\n      Showing {{ pagination.from }} - {{ pagination.to }} of {{ pagination.total }} entries\r\n    </div>\r\n\r\n    <!-- Jump to Page (only show if there are many pages) -->\r\n    <div *ngIf=\"showJumpToPage && pagination.last_page > 10\" class=\"flex items-center space-x-2\">\r\n      <label for=\"jump-page\" class=\"text-sm text-gray-700\">Go to:</label>\r\n      <input\r\n        id=\"jump-page\"\r\n        type=\"number\"\r\n        [(ngModel)]=\"jumpToPage\"\r\n        [min]=\"1\"\r\n        [max]=\"pagination.last_page\"\r\n        (keyup.enter)=\"onJumpToPage()\"\r\n        class=\"w-16 px-2 py-1 border border-gray-300 rounded text-sm text-center focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n        [placeholder]=\"pagination.current_page.toString()\">\r\n      <button\r\n        (click)=\"onJumpToPage()\"\r\n        [disabled]=\"!jumpToPage || jumpToPage < 1 || jumpToPage > pagination.last_page\"\r\n        class=\"px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\">\r\n        Go\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</div>\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWM,IAAA,yBAAA,GAAA,UAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AAF8C,IAAA,qBAAA,SAAA,SAAA;AAC5C,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,WAAA,GAAA;;;;;;AARN,IAAA,yBAAA,GAAA,OAAA,CAAA,EAAkF,GAAA,SAAA,CAAA;AAC5B,IAAA,iBAAA,GAAA,OAAA;AAAK,IAAA,uBAAA;AACzD,IAAA,yBAAA,GAAA,UAAA,CAAA;AAGE,IAAA,qBAAA,UAAA,SAAA,4DAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAU,OAAA,gBAAA,MAAA,CAAuB;IAAA,CAAA;AAEjC,IAAA,qBAAA,GAAA,6CAAA,GAAA,GAAA,UAAA,CAAA;AAGF,IAAA,uBAAA;AACA,IAAA,yBAAA,GAAA,QAAA,EAAA;AAAoC,IAAA,iBAAA,GAAA,UAAA;AAAQ,IAAA,uBAAA,EAAO;;;;AAPjD,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,SAAA,OAAA,WAAA,QAAA;AAG2B,IAAA,oBAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,cAAA;;;;;;AAyB3B,IAAA,yBAAA,GAAA,UAAA,EAAA;AAEE,IAAA,qBAAA,SAAA,SAAA,sEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,SAAS,CAAC,CAAC;IAAA,CAAA;AAGpB,IAAA,iBAAA,GAAA,KAAA;AACF,IAAA,uBAAA;;;;;AAGA,IAAA,yBAAA,GAAA,QAAA,EAAA;AACE,IAAA,iBAAA,GAAA,OAAA;AACF,IAAA,uBAAA;;;;;;AAGA,IAAA,yBAAA,GAAA,UAAA,EAAA;AAEE,IAAA,qBAAA,SAAA,SAAA,sEAAA;AAAA,YAAA,UAAA,wBAAA,GAAA,EAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,OAAA,CAAc;IAAA,CAAA;AAKvB,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;;AALE,IAAA,qBAAA,OAAA,WAAA,iBAAA,UAAA,qDAAA,6EAAA;AAIA,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,SAAA,GAAA;;;;;AAIF,IAAA,yBAAA,GAAA,QAAA,EAAA;AACE,IAAA,iBAAA,GAAA,OAAA;AACF,IAAA,uBAAA;;;;;;AAGA,IAAA,yBAAA,GAAA,UAAA,EAAA;AAEE,IAAA,qBAAA,SAAA,SAAA,sEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,OAAA,WAAA,SAAA,CAA8B;IAAA,CAAA;AAGvC,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,WAAA,WAAA,GAAA;;;;;;AApDN,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4F,GAAA,OAAA,EAAA,EACzB,GAAA,UAAA,EAAA;AAI7D,IAAA,qBAAA,SAAA,SAAA,6DAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,aAAA,CAAc;IAAA,CAAA;;AAMvB,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,QAAA,EAAA;AACF,IAAA,uBAAA,EAAM;AAIR,IAAA,qBAAA,GAAA,6CAAA,GAAA,GAAA,UAAA,EAAA,EAI6F,GAAA,2CAAA,GAAA,GAAA,QAAA,EAAA,EAKI,GAAA,6CAAA,GAAA,GAAA,UAAA,EAAA,EAWY,GAAA,2CAAA,GAAA,GAAA,QAAA,EAAA,EAKd,GAAA,6CAAA,GAAA,GAAA,UAAA,EAAA;;AAc/F,IAAA,yBAAA,IAAA,UAAA,EAAA;AACE,IAAA,qBAAA,SAAA,SAAA,8DAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,CAAA;;AAMnB,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,oBAAA,IAAA,QAAA,EAAA;AACF,IAAA,uBAAA,EAAM,EACC,EAEL;;;;AA9DF,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,WAAA,iBAAA,CAAA;AAYC,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,aAAA,SAAA,KAAA,OAAA,aAAA,CAAA,IAAA,CAAA;AAQI,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,iBAAA;AAMY,IAAA,oBAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,YAAA;AAUZ,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,eAAA;AAMJ,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,aAAA,SAAA,KAAA,OAAA,aAAA,OAAA,aAAA,SAAA,CAAA,IAAA,OAAA,WAAA,SAAA;AAUD,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,WAAA,iBAAA,OAAA,WAAA,SAAA;;;;;;AAsBJ,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA6F,GAAA,SAAA,EAAA;AACtC,IAAA,iBAAA,GAAA,QAAA;AAAM,IAAA,uBAAA;AAC3D,IAAA,yBAAA,GAAA,SAAA,EAAA;AAGE,IAAA,2BAAA,iBAAA,SAAA,kEAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,MAAA,6BAAA,OAAA,YAAA,MAAA,MAAA,OAAA,aAAA;AAAA,aAAA,sBAAA,MAAA;IAAA,CAAA;AAGA,IAAA,qBAAA,eAAA,SAAA,kEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAe,OAAA,aAAA,CAAc;IAAA,CAAA;AAN/B,IAAA,uBAAA;AASA,IAAA,yBAAA,GAAA,UAAA,EAAA;AACE,IAAA,qBAAA,SAAA,SAAA,6DAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,aAAA,CAAc;IAAA,CAAA;AAGvB,IAAA,iBAAA,GAAA,MAAA;AACF,IAAA,uBAAA,EAAS;;;;AAXP,IAAA,oBAAA,CAAA;AAAA,IAAA,2BAAA,WAAA,OAAA,UAAA;AACA,IAAA,qBAAA,OAAA,CAAA,EAAS,OAAA,OAAA,WAAA,SAAA,EACmB,eAAA,OAAA,WAAA,aAAA,SAAA,CAAA;AAM5B,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,CAAA,OAAA,cAAA,OAAA,aAAA,KAAA,OAAA,aAAA,OAAA,WAAA,SAAA;;;AD5FF,IAAO,sBAAP,MAAO,qBAAmB;EACrB;EACA,sBAA+B;EAC/B,iBAA0B;EAC1B,iBAA2B,CAAC,IAAI,IAAI,IAAI,GAAG;EAC3C,kBAA0B;EAEzB,aAAa,IAAI,aAAY;EAC7B,gBAAgB,IAAI,aAAY;EAE1C,aAA4B;EAC5B,eAAyB,CAAA;EAEzB,YAAY,SAAsB;AAChC,QAAI,QAAQ,YAAY,GAAG;AACzB,WAAK,sBAAqB;AAC1B,WAAK,aAAa,KAAK,WAAW;IACpC;EACF;;;;EAKQ,wBAAqB;AAC3B,UAAM,UAAU,KAAK,WAAW;AAChC,UAAM,QAAQ,KAAK,WAAW;AAC9B,UAAM,aAAa,KAAK;AAExB,SAAK,eAAe,CAAA;AAEpB,QAAI,SAAS,YAAY;AAEvB,eAAS,IAAI,GAAG,KAAK,OAAO,KAAK;AAC/B,aAAK,aAAa,KAAK,CAAC;MAC1B;IACF,OAAO;AAEL,UAAI,QAAQ,KAAK,IAAI,GAAG,UAAU,KAAK,MAAM,aAAa,CAAC,CAAC;AAC5D,UAAI,MAAM,KAAK,IAAI,OAAO,QAAQ,aAAa,CAAC;AAGhD,UAAI,MAAM,QAAQ,IAAI,YAAY;AAChC,gBAAQ,KAAK,IAAI,GAAG,MAAM,aAAa,CAAC;MAC1C;AAEA,eAAS,IAAI,OAAO,KAAK,KAAK,KAAK;AACjC,aAAK,aAAa,KAAK,CAAC;MAC1B;IACF;EACF;;;;EAKA,SAAS,MAAY;AACnB,QAAI,QAAQ,KAAK,QAAQ,KAAK,WAAW,aAAa,SAAS,KAAK,WAAW,cAAc;AAC3F,WAAK,WAAW,KAAK,IAAI;IAC3B;EACF;;;;EAKA,gBAAgB,OAAU;AACxB,UAAM,aAAa,SAAS,MAAM,OAAO,KAAK;AAC9C,QAAI,eAAe,KAAK,WAAW,UAAU;AAC3C,WAAK,cAAc,KAAK,UAAU;IACpC;EACF;;;;EAKA,eAAY;AACV,QAAI,KAAK,cAAc,KAAK,cAAc,KAAK,KAAK,cAAc,KAAK,WAAW,WAAW;AAC3F,WAAK,SAAS,KAAK,UAAU;IAC/B;EACF;;;;EAKA,eAAY;AACV,QAAI,KAAK,WAAW,eAAe,GAAG;AACpC,WAAK,SAAS,KAAK,WAAW,eAAe,CAAC;IAChD;EACF;;;;EAKA,WAAQ;AACN,QAAI,KAAK,WAAW,eAAe,KAAK,WAAW,WAAW;AAC5D,WAAK,SAAS,KAAK,WAAW,eAAe,CAAC;IAChD;EACF;;;;EAKA,IAAI,oBAAiB;AACnB,WAAO,KAAK,aAAa,SAAS,KAAK,KAAK,aAAa,CAAC,IAAI;EAChE;;;;EAKA,IAAI,kBAAe;AACjB,WAAO,KAAK,aAAa,SAAS,KAC3B,KAAK,aAAa,KAAK,aAAa,SAAS,CAAC,IAAI,KAAK,WAAW,YAAY;EACvF;;qCA9GW,sBAAmB;EAAA;yEAAnB,sBAAmB,WAAA,CAAA,CAAA,gBAAA,CAAA,GAAA,QAAA,EAAA,YAAA,cAAA,qBAAA,uBAAA,gBAAA,kBAAA,gBAAA,kBAAA,iBAAA,kBAAA,GAAA,SAAA,EAAA,YAAA,cAAA,eAAA,gBAAA,GAAA,UAAA,CAAA,8BAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,QAAA,YAAA,cAAA,eAAA,mBAAA,sBAAA,YAAA,QAAA,QAAA,YAAA,iBAAA,GAAA,CAAA,SAAA,4CAAA,GAAA,MAAA,GAAA,CAAA,SAAA,iDAAA,GAAA,MAAA,GAAA,CAAA,GAAA,QAAA,YAAA,eAAA,mBAAA,cAAA,GAAA,CAAA,GAAA,WAAA,iBAAA,eAAA,gBAAA,QAAA,SAAA,GAAA,CAAA,SAAA,+BAAA,GAAA,MAAA,GAAA,CAAA,GAAA,QAAA,gBAAA,aAAA,QAAA,SAAA,GAAA,CAAA,OAAA,YAAA,GAAA,WAAA,eAAA,GAAA,CAAA,MAAA,YAAA,GAAA,QAAA,QAAA,UAAA,mBAAA,cAAA,WAAA,sBAAA,gBAAA,uBAAA,yBAAA,GAAA,UAAA,OAAA,GAAA,CAAA,GAAA,SAAA,GAAA,SAAA,SAAA,GAAA,CAAA,GAAA,WAAA,eAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,QAAA,gBAAA,kBAAA,QAAA,SAAA,GAAA,CAAA,cAAA,cAAA,GAAA,QAAA,gBAAA,WAAA,GAAA,CAAA,GAAA,QAAA,gBAAA,kBAAA,QAAA,QAAA,WAAA,eAAA,cAAA,qBAAA,uBAAA,+BAAA,4BAAA,yBAAA,YAAA,UAAA,mBAAA,iBAAA,GAAA,SAAA,UAAA,GAAA,CAAA,QAAA,QAAA,UAAA,gBAAA,WAAA,aAAA,GAAA,OAAA,KAAA,GAAA,CAAA,kBAAA,SAAA,mBAAA,SAAA,gBAAA,KAAA,KAAA,iBAAA,GAAA,CAAA,SAAA,kMAAA,GAAA,SAAA,GAAA,MAAA,GAAA,CAAA,SAAA,4DAAA,GAAA,MAAA,GAAA,CAAA,SAAA,sGAAA,GAAA,SAAA,SAAA,GAAA,SAAA,SAAA,GAAA,CAAA,kBAAA,SAAA,mBAAA,SAAA,gBAAA,KAAA,KAAA,cAAA,GAAA,CAAA,GAAA,QAAA,gBAAA,kBAAA,QAAA,QAAA,WAAA,eAAA,cAAA,qBAAA,YAAA,iBAAA,UAAA,mBAAA,oBAAA,uBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,QAAA,gBAAA,kBAAA,QAAA,QAAA,eAAA,GAAA,CAAA,GAAA,QAAA,gBAAA,kBAAA,QAAA,QAAA,WAAA,eAAA,cAAA,UAAA,qBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,QAAA,gBAAA,WAAA,GAAA,CAAA,OAAA,aAAA,GAAA,WAAA,eAAA,GAAA,CAAA,MAAA,aAAA,QAAA,UAAA,GAAA,QAAA,QAAA,QAAA,UAAA,mBAAA,WAAA,WAAA,eAAA,sBAAA,gBAAA,uBAAA,yBAAA,GAAA,iBAAA,eAAA,WAAA,OAAA,OAAA,aAAA,GAAA,CAAA,GAAA,QAAA,QAAA,eAAA,cAAA,WAAA,WAAA,qBAAA,uBAAA,+BAAA,qBAAA,GAAA,SAAA,UAAA,CAAA,GAAA,UAAA,SAAA,6BAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACnBhC,MAAA,yBAAA,GAAA,OAAA,CAAA;AAGE,MAAA,qBAAA,GAAA,oCAAA,GAAA,GAAA,OAAA,CAAA,EAAkF,GAAA,oCAAA,IAAA,GAAA,OAAA,CAAA;AAuFlF,MAAA,yBAAA,GAAA,OAAA,CAAA,EAAoE,GAAA,OAAA,CAAA;AAIhE,MAAA,iBAAA,CAAA;AACF,MAAA,uBAAA;AAGA,MAAA,qBAAA,GAAA,oCAAA,GAAA,GAAA,OAAA,CAAA;AAmBF,MAAA,uBAAA,EAAM;;;AAlHA,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,mBAAA;AAeA,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,WAAA,YAAA,CAAA;AA4EF,MAAA,oBAAA,CAAA;AAAA,MAAA,6BAAA,aAAA,IAAA,WAAA,MAAA,OAAA,IAAA,WAAA,IAAA,QAAA,IAAA,WAAA,OAAA,WAAA;AAII,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,kBAAA,IAAA,WAAA,YAAA,EAAA;;oBDnFE,cAAY,SAAA,MAAE,aAAW,gBAAA,8BAAA,sBAAA,qBAAA,iBAAA,cAAA,cAAA,OAAA,GAAA,QAAA,CAAA,kwEAAA,EAAA,CAAA;;;sEAIxB,qBAAmB,CAAA;UAP/B;uBACW,kBAAgB,YACd,MAAI,SACP,CAAC,cAAc,WAAW,GAAC,UAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,QAAA,CAAA,igEAAA,EAAA,CAAA;cAK3B,YAAU,CAAA;UAAlB;MACQ,qBAAmB,CAAA;UAA3B;MACQ,gBAAc,CAAA;UAAtB;MACQ,gBAAc,CAAA;UAAtB;MACQ,iBAAe,CAAA;UAAvB;MAES,YAAU,CAAA;UAAnB;MACS,eAAa,CAAA;UAAtB;;;;6EARU,qBAAmB,EAAA,WAAA,uBAAA,UAAA,gEAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
