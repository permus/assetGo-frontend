{
  "version": 3,
  "sources": ["src/app/teams/services/team.service.ts", "src/app/work-orders/services/work-order.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { AuthService } from '../../core/services/auth.service';\r\n\r\n// Team interfaces\r\nexport interface Team {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n  company_id: number;\r\n  created_by: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  members?: TeamMember[];\r\n}\r\n\r\n// Team Member interfaces (users with user_type = 'team')\r\nexport interface TeamMember {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role_id?: number;\r\n  role?: {\r\n    id: number;\r\n    name: string;\r\n    description?: string;\r\n  };\r\n  roles?: Array<{\r\n    id: number;\r\n    name: string;\r\n    description?: string;\r\n    permissions?: any;\r\n  }>;\r\n  hourly_rate?: number;\r\n  user_type: 'team';\r\n  company_id: number;\r\n  created_by: number;\r\n  email_verified_at?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  showMenu?: boolean; // For UI dropdown menu state\r\n  // Location scoping info (optional fields provided by backend)\r\n  locations?: { id: number; name: string }[];\r\n  has_full_location_access?: boolean;\r\n  assigned_work_orders_count?: number;\r\n  assigned_work_orders_total_count?: number;\r\n  assigned_work_orders_active_count?: number;\r\n  assigned_work_orders_completed_count?: number;\r\n}\r\n\r\nexport interface TeamMemberStatistics {\r\n  // Team member counts\r\n  total_team_members: number;\r\n  active_team_members: number;\r\n  pending_team_members: number;\r\n\r\n  // Work order assignment aggregates\r\n  assigned_work_orders_total_count: number;\r\n  assigned_work_orders_active_count: number;\r\n  assigned_work_orders_completed_count: number;\r\n\r\n  // Derived KPI\r\n  completion_rate: number;\r\n\r\n  // Legacy optional fields for backward compatibility with older templates\r\n  work_orders_count?: number;\r\n  active_work_orders_count?: number;\r\n}\r\n\r\nexport interface AvailableRole {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n}\r\n\r\nexport interface Pagination {\r\n  current_page: number;\r\n  last_page: number;\r\n  per_page: number;\r\n  total: number;\r\n  from: number;\r\n  to: number;\r\n}\r\n\r\nexport interface TeamMembersPaginatedResponse {\r\n  success: boolean;\r\n  data: {\r\n    teams: TeamMember[];\r\n    pagination: Pagination;\r\n  };\r\n}\r\n\r\nexport interface TeamMemberResponse {\r\n  success: boolean;\r\n  data: TeamMember;\r\n}\r\n\r\nexport interface TeamMemberStatisticsResponse {\r\n  success: boolean;\r\n  data: TeamMemberStatistics;\r\n}\r\n\r\nexport interface TeamAnalyticsResponse {\r\n  success: boolean;\r\n  data: {\r\n    date_range_days: number;\r\n    productivity_rate_percent: number;\r\n    on_time_rate_percent: number;\r\n    avg_completion_days: number;\r\n    labor_cost_total: number;\r\n    top_performers: Array<{ user_id: number; first_name: string; last_name: string; completed_count: number }>;\r\n  };\r\n}\r\n\r\nexport interface AvailableRolesResponse {\r\n  success: boolean;\r\n  data: AvailableRole[];\r\n}\r\n\r\nexport interface CreateTeamMemberRequest {\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role_id: number;\r\n  hourly_rate?: number | null;\r\n  location_ids?: number[] | null; // omit or null => full access\r\n  expand_descendants?: boolean;   // default true\r\n}\r\n\r\nexport interface UpdateTeamMemberRequest {\r\n  first_name?: string;\r\n  last_name?: string;\r\n  email?: string;\r\n  role_id?: number;\r\n  hourly_rate?: number | null;\r\n  location_ids?: number[] | null;\r\n  expand_descendants?: boolean;\r\n}\r\n\r\nexport interface ResendInvitationRequest {\r\n  id: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n  private apiUrl = `${environment.apiUrl}/teams`;\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  private getAuthHeaders(): { headers: { [header: string]: string } } {\r\n    const token = this.authService.getToken();\r\n    return {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n      }\r\n    };\r\n  }\r\n\r\n  // Get paginated team members\r\n  getTeamMembers(\r\n    page: number = 1,\r\n    perPage: number = 15,\r\n    opts?: {\r\n      search?: string;\r\n      role_id?: number;\r\n      role_name?: string;\r\n      status?: 'active' | 'inactive';\r\n      type?: string;\r\n      sort_by?: 'name' | 'email' | 'created_at';\r\n      sort_dir?: 'asc' | 'desc';\r\n    }\r\n  ): Observable<TeamMembersPaginatedResponse> {\r\n    const token = this.authService.getToken();\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n    } as { [header: string]: string };\r\n\r\n    const params = new URLSearchParams();\r\n    params.set('page', String(page));\r\n    params.set('per_page', String(perPage));\r\n    if (opts?.search) params.set('search', opts.search);\r\n    if (opts?.role_id !== undefined) params.set('role_id', String(opts.role_id));\r\n    if (opts?.role_name) params.set('role_name', opts.role_name);\r\n    if (opts?.status) params.set('status', opts.status);\r\n    if (opts?.type) params.set('type', opts.type);\r\n    if (opts?.sort_by) params.set('sort_by', opts.sort_by);\r\n    if (opts?.sort_dir) params.set('sort_dir', opts.sort_dir);\r\n\r\n    const url = `${this.apiUrl}?${params.toString()}`;\r\n    return this.http.get<TeamMembersPaginatedResponse>(url, { headers });\r\n  }\r\n\r\n  // Convenience: get flat list of team members for selects\r\n  getTeamMembersFlat(perPage: number = 1000): Observable<TeamMember[]> {\r\n    return this.getTeamMembers(1, perPage).pipe(\r\n      map((res) => res?.data?.teams ?? [])\r\n    );\r\n  }\r\n\r\n  // Get a specific team member\r\n  getTeamMember(id: number): Observable<TeamMemberResponse> {\r\n    return this.http.get<TeamMemberResponse>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Create a new team member (invite)\r\n  createTeamMember(teamMemberData: CreateTeamMemberRequest): Observable<TeamMemberResponse> {\r\n    return this.http.post<TeamMemberResponse>(this.apiUrl, teamMemberData, this.getAuthHeaders());\r\n  }\r\n\r\n  // Update a team member\r\n  updateTeamMember(id: number, teamMemberData: UpdateTeamMemberRequest): Observable<TeamMemberResponse> {\r\n    return this.http.put<TeamMemberResponse>(`${this.apiUrl}/${id}`, teamMemberData, this.getAuthHeaders());\r\n  }\r\n\r\n  // Delete a team member\r\n  deleteTeamMember(id: number): Observable<{ success: boolean; message: string }> {\r\n    return this.http.delete<{ success: boolean; message: string }>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Resend invitation\r\n  resendInvitation(id: number): Observable<{ success: boolean; message: string }> {\r\n    return this.http.post<{ success: boolean; message: string }>(`${this.apiUrl}/${id}/resend-invitation`, {}, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get team member statistics\r\n  getTeamMemberStatistics(): Observable<TeamMemberStatisticsResponse> {\r\n    return this.http.get<TeamMemberStatisticsResponse>(`${this.apiUrl}/statistics`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get team analytics\r\n  getTeamAnalytics(params?: { date_range?: number }): Observable<TeamAnalyticsResponse> {\r\n    const token = this.authService.getToken();\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n    } as { [header: string]: string };\r\n\r\n    const query = new URLSearchParams();\r\n    if (params?.date_range) query.set('date_range', String(params.date_range));\r\n\r\n    const url = `${this.apiUrl}/analytics${query.toString() ? `?${query.toString()}` : ''}`;\r\n    return this.http.get<TeamAnalyticsResponse>(url, { headers });\r\n  }\r\n\r\n  // Get available roles for team members\r\n  getAvailableRoles(): Observable<AvailableRolesResponse> {\r\n    return this.http.get<AvailableRolesResponse>(`${this.apiUrl}/available-roles`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Team management methods\r\n  getTeam(id: number): Observable<{ success: boolean; data: Team }> {\r\n    return this.http.get<{ success: boolean; data: Team }>(`${this.apiUrl}/teams/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  createTeam(teamData: Partial<Team>): Observable<{ success: boolean; data: Team }> {\r\n    return this.http.post<{ success: boolean; data: Team }>(`${this.apiUrl}/teams`, teamData, this.getAuthHeaders());\r\n  }\r\n\r\n  updateTeam(id: number, teamData: Partial<Team>): Observable<{ success: boolean; data: Team }> {\r\n    return this.http.put<{ success: boolean; data: Team }>(`${this.apiUrl}/teams/${id}`, teamData, this.getAuthHeaders());\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { AuthService } from '../../core/services/auth.service';\r\n\r\nexport interface WorkOrderUser {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  user_type: string;\r\n  email: string;\r\n  email_verified_at: string;\r\n  company_id: number;\r\n  created_by: number;\r\n  permissions: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkOrderCompany {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  owner_id: string;\r\n  subscription_status: string;\r\n  subscription_expires_at: string | null;\r\n  business_type: string | null;\r\n  industry: string | null;\r\n  phone: string | null;\r\n  email: string | null;\r\n  address: string | null;\r\n  logo: string | null;\r\n  deleted_at: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkOrder {\r\n  id: number;\r\n  title: string;\r\n  description: string | null;\r\n  priority_id: number | null;\r\n  status_id: number | null;\r\n  category_id: number | null;\r\n  due_date: string | null;\r\n  completed_at: string | null;\r\n  asset_id: number | null;\r\n  location_id: number | null;\r\n  assigned_to: number | null;\r\n  assigned_by: number | null;\r\n  created_by: WorkOrderUser;\r\n  company_id: number;\r\n  estimated_hours: number | null;\r\n  actual_hours: number | null;\r\n  notes: string | null;\r\n  tags: string | null;\r\n  team: any | null;\r\n  meta: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n  deleted_at: string | null;\r\n  is_overdue: boolean;\r\n  days_until_due: number | null;\r\n  days_since_created: number;\r\n  resolution_time_days: number | null;\r\n  asset: any | null;\r\n  location: any | null;\r\n  company: WorkOrderCompany;\r\n  \r\n  // Relationships (populated by backend)\r\n  priority?: { id: number; name: string; slug: string };\r\n  status?: { id: number; name: string; slug: string };\r\n  category?: { id: number; name: string; slug: string };\r\n}\r\n\r\nexport interface WorkOrderListResponse {\r\n  current_page: number;\r\n  data: WorkOrder[];\r\n  first_page_url: string;\r\n  from: number;\r\n  last_page: number;\r\n  last_page_url: string;\r\n  links: Array<{\r\n    url: string | null;\r\n    label: string;\r\n    active: boolean;\r\n  }>;\r\n  next_page_url: string | null;\r\n  path: string;\r\n  per_page: number;\r\n  prev_page_url: string | null;\r\n  to: number;\r\n  total: number;\r\n}\r\n\r\n// Generic API response wrapper from backend\r\ninterface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n}\r\n\r\nexport interface CreateWorkOrderRequest {\r\n  title: string;\r\n  description?: string;\r\n  priority_id: number;\r\n  status_id: number;\r\n  category_id?: number;\r\n  due_date?: string;\r\n  asset_id?: number;\r\n  location_id?: number;\r\n  assigned_to?: number;\r\n  team_id?: number;\r\n  tags?: string;\r\n  estimated_hours?: number;\r\n  notes?: string;\r\n}\r\n\r\nexport interface WorkOrderStats {\r\n  total: number;\r\n  open: number;\r\n  inProgress: number;\r\n  completed: number;\r\n  critical: number;\r\n}\r\n\r\nexport interface WorkOrderPreview extends WorkOrder {\r\n  lastUpdated?: string;\r\n  timeSpent?: string;\r\n  totalCost?: number;\r\n  hourlyRate?: number;\r\n  comments?: WorkOrderComment[];\r\n  timeLogs?: TimeLog[];\r\n}\r\n\r\nexport interface WorkOrderComment {\r\n  id: number;\r\n  work_order_id?: number;\r\n  user?: { id: number; first_name: string; last_name: string; email: string };\r\n  comment: string;\r\n  meta?: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface TimeLog {\r\n  id: number;\r\n  description?: string | null;\r\n  start_time: string;\r\n  end_time?: string | null;\r\n  duration_minutes?: number | null;\r\n  user?: { id: number; first_name: string; last_name: string; email: string };\r\n  hourly_rate?: number | null;\r\n  total_cost?: number | null;\r\n}\r\n\r\nexport interface WorkOrderAssignment {\r\n  id: number;\r\n  work_order_id: number;\r\n  user: { id: number; first_name: string; last_name: string; email: string };\r\n  user_id: number;\r\n  assigned_by?: number | null;\r\n  status?: string; // optional: 'assigned' | 'accepted' | 'declined' | 'completed'\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkOrderPartItem {\r\n  id: number;\r\n  work_order_id: number;\r\n  part_id: number;\r\n  part?: { id: number; name: string; uom?: string };\r\n  location_id?: number | null;\r\n  qty: number;\r\n  unit_cost?: number | null;\r\n  status: 'reserved' | 'consumed';\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n// New interfaces for enhanced analytics and filtering\r\nexport interface WorkOrderAnalytics {\r\n  // KPIs\r\n  total_work_orders: number;\r\n  open_work_orders: number;\r\n  in_progress_work_orders: number;\r\n  completed_work_orders: number;\r\n  overdue_work_orders: number;\r\n  average_resolution_time_days: number;\r\n  completion_rate_percentage: number;\r\n  active_technicians: number;\r\n\r\n  // Distributions\r\n  status_distribution: { [key: string]: number };\r\n  priority_distribution: { [key: string]: number };\r\n\r\n  // Trends\r\n  monthly_performance_trend: Array<{\r\n    year: number;\r\n    month: number;\r\n    created_count: number;\r\n    completed_count: number;\r\n  }>;\r\n  top_technician_performance: Array<{\r\n    assigned_to: number;\r\n    completed_count: number;\r\n    avg_resolution_days: number;\r\n    assignedTo?: {\r\n      id: number;\r\n      first_name: string;\r\n      last_name: string;\r\n    };\r\n  }>;\r\n}\r\n\r\nexport interface WorkOrderHistoryEvent {\r\n  type: 'created' | 'updated' | 'comment' | string;\r\n  title: string;\r\n  timestamp: string;\r\n  user?: { id: number; first_name: string; last_name: string; email: string } | null;\r\n  details?: any;\r\n}\r\n\r\nexport interface WorkOrderStatistics {\r\n  status_counts: { [key: string]: number };\r\n  priority_counts: { [key: string]: number };\r\n  overdue_count: number;\r\n  recent_created: number;\r\n  recent_completed: number;\r\n}\r\n\r\nexport interface WorkOrderFilters {\r\n  assets: Array<{ id: number; name: string; asset_id: string }>;\r\n  locations: Array<{ id: number; name: string }>;\r\n  users: Array<{ id: number; first_name: string; last_name: string }>;\r\n  status_options: { [key: string]: string };\r\n  priority_options: { [key: string]: string };\r\n}\r\n\r\nexport interface WorkOrderSearchParams {\r\n  status_id?: number | null;\r\n  priority_id?: number | null;\r\n  category_id?: number | null;\r\n  asset_id?: number;\r\n  location_id?: number;\r\n  assigned_to?: number;\r\n  overdue?: boolean;\r\n  start_date?: string;\r\n  end_date?: string;\r\n  search?: string;\r\n  sort_by?: string;\r\n  sort_dir?: 'asc' | 'desc';\r\n  page?: number;\r\n  per_page?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WorkOrderService {\r\n  private apiUrl = `${environment.apiUrl}/work-orders`;\r\n  \r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  private getAuthHeaders(): { headers: { [header: string]: string } } {\r\n    const token = this.authService.getToken();\r\n    return {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n      }\r\n    };\r\n  }\r\n\r\n  // Comments API\r\n  getComments(workOrderId: number): Observable<WorkOrderComment[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderComment[]>>(`${this.apiUrl}/${workOrderId}/comments`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Assignments API\r\n  getAssignments(workOrderId: number): Observable<WorkOrderAssignment[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderAssignment[]>>(`${this.apiUrl}/${workOrderId}/assignments`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  setAssignments(workOrderId: number, userIds: number[]): Observable<WorkOrderAssignment[]> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrderAssignment[]>>(\r\n        `${this.apiUrl}/${workOrderId}/assignments`,\r\n        { user_ids: userIds },\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  deleteAssignment(workOrderId: number, assignmentId: number): Observable<{ success: boolean; message?: string }> {\r\n    return this.http\r\n      .delete<{ success: boolean; message?: string }>(`${this.apiUrl}/${workOrderId}/assignments/${assignmentId}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Update a single assignment's status\r\n  updateAssignmentStatus(workOrderId: number, assignmentId: number, status: string): Observable<WorkOrderAssignment> {\r\n    return this.http\r\n      .put<ApiResponse<WorkOrderAssignment>>(\r\n        `${this.apiUrl}/${workOrderId}/assignments/${assignmentId}`,\r\n        { status },\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Assign a work order to a user\r\n  assignWorkOrder(workOrderId: number, assignmentData: { user_id: number; due_date?: string; notes?: string }): Observable<any> {\r\n    return this.http\r\n      .post<ApiResponse<any>>(\r\n        `${this.apiUrl}/${workOrderId}/assign`,\r\n        assignmentData,\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Parts API\r\n  getParts(workOrderId: number): Observable<WorkOrderPartItem[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderPartItem[]>>(`${this.apiUrl}/${workOrderId}/parts`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  addParts(workOrderId: number, items: Array<{ part_id: number; qty: number; unit_cost?: number; location_id?: number }>): Observable<WorkOrderPartItem[]> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrderPartItem[]>>(`${this.apiUrl}/${workOrderId}/parts`, { items }, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  updatePart(workOrderId: number, partItemId: number, payload: Partial<{ qty: number; unit_cost: number; status: 'reserved' | 'consumed' }>): Observable<WorkOrderPartItem> {\r\n    return this.http\r\n      .put<ApiResponse<WorkOrderPartItem>>(`${this.apiUrl}/${workOrderId}/parts/${partItemId}`, payload, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  deletePart(workOrderId: number, partItemId: number): Observable<{ success: boolean }> {\r\n    return this.http\r\n      .delete<{ success: boolean }>(`${this.apiUrl}/${workOrderId}/parts/${partItemId}`, this.getAuthHeaders());\r\n  }\r\n\r\n  addComment(workOrderId: number, comment: string, meta?: any): Observable<WorkOrderComment> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrderComment>>(\r\n        `${this.apiUrl}/${workOrderId}/comments`,\r\n        { comment, meta },\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  deleteComment(workOrderId: number, commentId: number): Observable<{ success: boolean; message?: string }> {\r\n    return this.http\r\n      .delete<{ success: boolean; message?: string }>(`${this.apiUrl}/${workOrderId}/comments/${commentId}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Enhanced: Get all work orders with advanced filtering and search\r\n  getWorkOrders(params?: WorkOrderSearchParams): Observable<WorkOrderListResponse> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params) {\r\n      Object.keys(params).forEach(key => {\r\n        const value = params[key as keyof WorkOrderSearchParams];\r\n        if (value !== undefined && value !== null && value !== '') {\r\n          httpParams = httpParams.set(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.http.get<WorkOrderListResponse>(\r\n      this.apiUrl, \r\n      { ...this.getAuthHeaders(), params: httpParams }\r\n    );\r\n  }\r\n\r\n  // Get a single work order by ID\r\n  getWorkOrderById(id: string): Observable<WorkOrderPreview> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderPreview>>(`${this.apiUrl}/${id}`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Update status by status_id\r\n  updateWorkOrderStatus(id: number, status_id: number): Observable<WorkOrder> {\r\n    return this.http\r\n      .post<ApiResponse<WorkOrder>>(`${this.apiUrl}/${id}/status`, { status_id }, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Create a new work order\r\n  createWorkOrder(workOrder: CreateWorkOrderRequest): Observable<WorkOrder> {\r\n    return this.http.post<WorkOrder>(this.apiUrl, workOrder, this.getAuthHeaders());\r\n  }\r\n\r\n  // Update an existing work order\r\n  updateWorkOrder(id: number, workOrder: Partial<CreateWorkOrderRequest>): Observable<WorkOrder> {\r\n    return this.http.put<WorkOrder>(`${this.apiUrl}/${id}`, workOrder, this.getAuthHeaders());\r\n  }\r\n\r\n  // Delete a work order\r\n  deleteWorkOrder(id: number): Observable<{ success: boolean }> {\r\n    return this.http.delete<{ success: boolean }>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get comprehensive work order analytics\r\n  getWorkOrderAnalytics(): Observable<WorkOrderAnalytics> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderAnalytics>>(`${this.apiUrl}/analytics`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Get basic work order statistics\r\n  getWorkOrderStatistics(): Observable<WorkOrderStatistics> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderStatistics>>(`${this.apiUrl}/statistics`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Get work order count with filters\r\n  getWorkOrderCount(params?: WorkOrderSearchParams): Observable<{ count: number }> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params) {\r\n      Object.keys(params).forEach(key => {\r\n        const value = params[key as keyof WorkOrderSearchParams];\r\n        if (value !== undefined && value !== null && value !== '') {\r\n          httpParams = httpParams.set(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.http\r\n      .get<ApiResponse<{ count: number }>>(\r\n        `${this.apiUrl}/count`, \r\n        { ...this.getAuthHeaders(), params: httpParams }\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Get available filter options\r\n  getWorkOrderFilters(): Observable<WorkOrderFilters> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderFilters>>(`${this.apiUrl}/filters`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // History API\r\n  getWorkOrderHistory(id: number): Observable<WorkOrderHistoryEvent[]> {\r\n    return this.http\r\n      .get<ApiResponse<WorkOrderHistoryEvent[]>>(`${this.apiUrl}/${id}/history`, this.getAuthHeaders())\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Time tracking API\r\n  getTimeLogs(workOrderId: number): Observable<{ logs: TimeLog[]; totals: { total_minutes: number; total_cost: number } }> {\r\n    return this.http\r\n      .get<ApiResponse<{ logs: TimeLog[]; totals: { total_minutes: number; total_cost: number } }>>(\r\n        `${this.apiUrl}/${workOrderId}/time-logs`,\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  startTimer(workOrderId: number, payload: { description?: string; hourly_rate?: number }): Observable<TimeLog> {\r\n    return this.http\r\n      .post<ApiResponse<TimeLog>>(\r\n        `${this.apiUrl}/${workOrderId}/time-logs/start`,\r\n        payload,\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  stopTimer(workOrderId: number): Observable<TimeLog> {\r\n    return this.http\r\n      .post<ApiResponse<TimeLog>>(\r\n        `${this.apiUrl}/${workOrderId}/time-logs/stop`,\r\n        {},\r\n        this.getAuthHeaders()\r\n      )\r\n      .pipe(map((res) => res.data));\r\n  }\r\n\r\n  // Legacy: Get work order statistics (kept for backward compatibility)\r\n  // Note: This method is deprecated, use getWorkOrderStatistics() instead\r\n  getWorkOrderStats(): Observable<WorkOrderStats> {\r\n    // For backward compatibility, we'll call the statistics endpoint and transform the data\r\n    return this.http.get<WorkOrderStatistics>(`${this.apiUrl}/statistics`, this.getAuthHeaders())\r\n      .pipe(\r\n        map(stats => ({\r\n          total: Object.values(stats.status_counts || {}).reduce((sum, count) => sum + count, 0),\r\n          open: stats.status_counts?.['open'] || 0,\r\n          inProgress: stats.status_counts?.['in-progress'] || 0,\r\n          completed: stats.status_counts?.['completed'] || 0,\r\n          critical: stats.priority_counts?.['critical'] || 0\r\n        }))\r\n      );\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
