{
  "version": 3,
  "sources": ["src/app/maintenance/pages/analytics-page.component.ts", "src/app/maintenance/pages/analytics-page.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaintenanceService } from '../maintenance.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-analytics-page',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './analytics-page.component.html',\r\n  styleUrls: ['./analytics-page.component.scss']\r\n})\r\nexport class AnalyticsPageComponent implements OnInit {\r\n  loading = false;\r\n  error: string | null = null;\r\n  // simple series placeholders\r\n  trendLabels: string[] = [];\r\n  trendData: number[] = [];\r\n  typeBreakdown: { name: string; value: number }[] = [];\r\n  monthlyCostsLabels: string[] = [];\r\n  monthlyCostsData: number[] = [];\r\n\r\n  constructor(private api: MaintenanceService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.fetch();\r\n  }\r\n\r\n  fetch() {\r\n    this.loading = true;\r\n    // Approximate analytics using schedules; swap to real endpoint later\r\n    this.api.listSchedules({ per_page: 500 }).subscribe({\r\n      next: (res) => {\r\n        const items: any[] = Array.isArray(res?.data) ? res.data : (Array.isArray(res?.data?.schedules) ? res.data.schedules : []);\r\n        // trend by month count (due_date month)\r\n        const mapCounts: Record<string, number> = {};\r\n        const mapCosts: Record<string, number> = {};\r\n        for (const s of items) {\r\n          const d = s.due_date ? new Date(s.due_date) : null;\r\n          const key = d && !isNaN(d.getTime()) ? `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}` : 'unknown';\r\n          mapCounts[key] = (mapCounts[key] || 0) + 1;\r\n          // cost placeholder 0\r\n          mapCosts[key] = (mapCosts[key] || 0) + (s.cost || 0);\r\n        }\r\n        this.trendLabels = Object.keys(mapCounts).sort();\r\n        this.trendData = this.trendLabels.map(k => mapCounts[k]);\r\n\r\n        this.monthlyCostsLabels = Object.keys(mapCosts).sort();\r\n        this.monthlyCostsData = this.monthlyCostsLabels.map(k => mapCosts[k]);\r\n\r\n        // type breakdown placeholder\r\n        const breakdown: Record<string, number> = { preventive: 0, corrective: 0, emergency: 0 };\r\n        for (const s of items) breakdown['preventive']++;\r\n        this.typeBreakdown = Object.entries(breakdown).map(([name, value]) => ({ name, value }));\r\n\r\n        this.loading = false;\r\n      },\r\n      error: () => { this.loading = false; this.error = 'Failed to load analytics'; }\r\n    });\r\n  }\r\n\r\n  get totalCount(): number {\r\n    let sum = 0;\r\n    for (const n of this.trendData) sum += Number(n) || 0;\r\n    return sum;\r\n  }\r\n}\r\n\r\n\r\n", "<div class=\"min-h-screen bg-gray-50 text-gray-900 p-6\">\r\n  <div class=\"flex items-center justify-between mb-4\">\r\n    <h1 class=\"text-xl font-semibold\">Preventive Maintenance Analytics</h1>\r\n  </div>\r\n\r\n  <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4 metrics-grid\">\r\n    <div class=\"metric-card info\">\r\n      <div class=\"metric-header\">\r\n        <div class=\"title\">Total Maintenance</div>\r\n        <div class=\"badge\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-5 text-blue-600\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21.75 6.75a4.5 4.5 0 0 1-4.884 4.484c-1.076-.091-2.264.071-2.95.904l-7.152 8.684a2.548 2.548 0 1 1-3.586-3.586l8.684-7.152c.833-.686.995-1.874.904-2.95a4.5 4.5 0 0 1 6.336-4.486l-3.276 3.276a3.004 3.004 0 0 0 2.25 2.25l3.276-3.276c.256.565.398 1.192.398 1.852Z\" />\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.867 19.125h.008v.008h-.008v-.008Z\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value\">{{ totalCount }}</div>\r\n      <div class=\"hint\">0 upcoming</div>\r\n    </div>\r\n    <div class=\"metric-card success\">\r\n      <div class=\"metric-header\">\r\n        <div class=\"title\">Preventive Ratio</div>\r\n        <div class=\"badge\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-5 text-green-600\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M2.25 18 9 11.25l4.306 4.306a11.95 11.95 0 0 1 5.814-5.518l2.74-1.22m0 0-5.94-2.281m5.94 2.28-2.28 5.941\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value text-green-600\">0.0%</div>\r\n      <div class=\"hint\">Target: 80%</div>\r\n    </div>\r\n    <div class=\"metric-card warning\">\r\n      <div class=\"metric-header\">\r\n        <div class=\"title\">Avg Cost</div>\r\n        <div class=\"badge\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-5 text-orange-600\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value\">$0</div>\r\n      <div class=\"hint\">Per maintenance activity</div>\r\n    </div>\r\n    <div class=\"metric-card danger\">\r\n      <div class=\"metric-header\">\r\n        <div class=\"title\">Avg Duration</div>\r\n        <div class=\"badge\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-5 text-red-600\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"value\">0.0h</div>\r\n      <div class=\"hint\">Per maintenance activity</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n    <div class=\"panel\">\r\n      <div class=\"panel-title\">Maintenance Trend</div>\r\n      <div class=\"grid grid-cols-12 gap-1 text-xs text-gray-400\">\r\n        <div class=\"col-span-12 flex items-end h-48 space-x-2\">\r\n          <ng-container *ngFor=\"let v of trendData; let i = index\">\r\n            <div class=\"bar\" [style.height.%]=\"(v || 0) * 12\" [attr.title]=\"trendLabels[i] + ': ' + v\"></div>\r\n          </ng-container>\r\n        </div>\r\n        <div class=\"col-span-12 flex justify-between mt-2\">\r\n          <span *ngFor=\"let l of trendLabels\">{{ l }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel\">\r\n      <div class=\"panel-title\">Maintenance Types</div>\r\n      <div class=\"flex items-end h-48 space-x-3\">\r\n        <div *ngFor=\"let t of typeBreakdown\" class=\"w-12\">\r\n          <div class=\"bar bg-purple-500\" [style.height.%]=\"(t.value || 0) * 10\" [attr.title]=\"t.name + ': ' + t.value\"></div>\r\n          <div class=\"text-xs text-center mt-1\">{{ t.name }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"panel mt-4\">\r\n    <div class=\"panel-title\">Maintenance Costs</div>\r\n    <div class=\"grid grid-cols-12 gap-1 text-xs text-gray-400\">\r\n      <div class=\"col-span-12 flex items-end h-48 space-x-2\">\r\n        <ng-container *ngFor=\"let v of monthlyCostsData; let i = index\">\r\n          <div class=\"bar bg-emerald-500\" [style.height.%]=\"(v || 0)\" [attr.title]=\"monthlyCostsLabels[i] + ': $' + v\"></div>\r\n        </ng-container>\r\n      </div>\r\n      <div class=\"col-span-12 flex justify-between mt-2\">\r\n        <span *ngFor=\"let l of monthlyCostsLabels\">{{ l }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"panel mt-4\">\r\n    <div class=\"panel-title !mb-0\">Key Insights</div>\r\n    <p class=\"text-sm text-gray-500 mb-3\">Automated analysis of your maintenance performance</p>\r\n    <ul class=\"list-none text-sm  text-lg\">\r\n      <li class=\"flex items-center gap-2 text-md text-yellow-400 mb-2\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-5\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M2.25 18 9 11.25l4.306 4.306a11.95 11.95 0 0 1 5.814-5.518l2.74-1.22m0 0-5.94-2.281m5.94 2.28-2.28 5.941\" />\r\n        </svg>\r\n        Consider increasing preventive maintenance to reduce corrective work.</li>\r\n      <li class=\" flex items-center gap-2 text-md text-gray-500\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-5\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21.75 6.75a4.5 4.5 0 0 1-4.884 4.484c-1.076-.091-2.264.071-2.95.904l-7.152 8.684a2.548 2.548 0 1 1-3.586-3.586l8.684-7.152c.833-.686.995-1.874.904-2.95a4.5 4.5 0 0 1 6.336-4.486l-3.276 3.276a3.004 3.004 0 0 0 2.25 2.25l3.276-3.276c.256.565.398 1.192.398 1.852Z\" />\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.867 19.125h.008v.008h-.008v-.008Z\" />\r\n        </svg>\r\n\r\n        No maintenance history found. Start by completing some maintenance activities.</li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n\r\n\r\n"],
  "mappings": "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",
  "names": []
}
