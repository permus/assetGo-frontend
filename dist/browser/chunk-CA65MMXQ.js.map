{
  "version": 3,
  "sources": ["src/app/inventory/components/analytics/analytics.component.ts", "src/app/inventory/components/analytics/analytics.component.html"],
  "sourcesContent": ["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InventoryAnalyticsService, DashboardData, AbcAnalysisItem, TurnoverData, StockAgingData, KpisData, CategoryTurnoverItem, MonthlyTurnoverPoint } from '../../../core/services/inventory-analytics.service';\r\nimport { CurrencyService } from '../../../core/services/currency.service';\r\nimport { Chart, ChartConfiguration, ChartData, registerables } from 'chart.js';\r\nimport { Subject, takeUntil } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-analytics',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './analytics.component.html',\r\n  styleUrls: ['./analytics.component.scss']\r\n})\r\nexport class AnalyticsComponent implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject<void>();\r\n\r\n  activeTab = 'turnover';\r\n  selectedPeriod: '1m' | '3m' | '6m' | '1y' = '6m';\r\n\r\n  // Config: monthly carrying cost rate (e.g., 2% of inventory value)\r\n  private readonly carryingRateMonthly = 0.02;\r\n\r\n  // Loading and error states\r\n  loading = false;\r\n  error: string | null = null;\r\n\r\n  // Real-time analytics data from API\r\n  dashboardData: DashboardData | null = null;\r\n  abcAnalysisData: AbcAnalysisItem[] = [];\r\n  overviewData: DashboardData | null = null;\r\n  turnoverData: TurnoverData | null = null;\r\n  agingData: StockAgingData | null = null;\r\n  kpis: KpisData | null = null;\r\n  categoryTurnover: CategoryTurnoverItem[] = [];\r\n  monthlyTrend: MonthlyTurnoverPoint[] = [];\r\n  hasTrendData = false;\r\n\r\n  // Simple chart metrics for SVG rendering\r\n  private readonly trendChartWidth = 400;\r\n  private readonly trendChartHeight = 200;\r\n  private readonly trendYPadding = 10; // top/bottom padding\r\n  private readonly trendYScaleHeight = 180; // drawable height\r\n  trendMax = 1;\r\n  trendTicks: number[] = [1, 0.75, 0.5, 0.25, 0];\r\n\r\n  // Chart.js instances\r\n  private trendChart?: Chart;\r\n  private agingChart?: Chart;\r\n  private abcChart?: Chart;\r\n\r\n  // ABC Analysis summary\r\n  abcSummary = {\r\n    classA: { count: 0, value: 0, percentage: 0 },\r\n    classB: { count: 0, value: 0, percentage: 0 },\r\n    classC: { count: 0, value: 0, percentage: 0 }\r\n  };\r\n\r\n\r\n  constructor(private analyticsService: InventoryAnalyticsService, private currency: CurrencyService) { }\r\n\r\n  ngOnInit(): void {\r\n    // Register Chart.js before any chart creation to avoid first-render issues\r\n    Chart.register(...registerables);\r\n    this.loadAllAnalytics();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  loadAllAnalytics(): void {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    // Load analytics endpoints including KPIs\r\n    Promise.all([\r\n      this.loadAbcAnalysis(),\r\n      this.loadDashboardOverview(),\r\n      this.loadTurnover(this.selectedPeriod),\r\n      this.loadStockAging(),\r\n      this.loadTurnoverByCategory(this.selectedPeriod),\r\n      this.loadMonthlyTrend(this.selectedPeriod),\r\n      this.loadKpis(this.selectedPeriod)\r\n    ]).finally(() => {\r\n      this.loading = false;\r\n    });\r\n  }\r\n\r\n  loadInventoryAnalytics(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getInventoryAnalytics()\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              this.dashboardData = response.data;\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading inventory analytics:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  loadMonthlyTrend(period: '1m' | '3m' | '6m' | '1y'): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getMonthlyTurnoverTrend({ period })\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              const pts = response.data.points || [];\r\n              this.monthlyTrend = pts.length ? pts : this.generateZeroTrend(period);\r\n              this.updateTrendMeta();\r\n              // Render twice to ensure first paint after layout\r\n              setTimeout(() => this.renderTrendChart(true as any), 0);\r\n              setTimeout(() => this.renderTrendChart(), 500);\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading monthly turnover trend:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  loadTurnoverByCategory(period: '1m' | '3m' | '6m' | '1y'): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getTurnoverByCategory({ period })\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              this.categoryTurnover = response.data.categories || [];\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading turnover by category:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  loadTurnover(period: '1m' | '3m' | '6m' | '1y'): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getTurnover({ period })\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              this.turnoverData = response.data;\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading turnover:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  loadKpis(period: '1m' | '3m' | '6m' | '1y'): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getKpis({ period, carrying_rate: 0.24, dead_days: 90 })\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              this.kpis = response.data;\r\n              // Prefer KPIs for the top cards when available\r\n              this.turnoverData = {\r\n                period: response.data.period,\r\n                cogs: 0,\r\n                avg_inventory_value: response.data.avg_inventory_value,\r\n                turnover: response.data.turnover,\r\n                days_on_hand: response.data.days_on_hand\r\n              };\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading KPIs:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  loadStockAging(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getStockAging()\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              const data = response.data;\r\n              // Fallback buckets with zeros when API returns none\r\n              if (!data || !data.buckets || data.buckets.length === 0) {\r\n                this.agingData = {\r\n                  buckets: [\r\n                    { label: '0-30 days', days_from: 0, days_to: 30, count: 0, value: 0 },\r\n                    { label: '31-60 days', days_from: 31, days_to: 60, count: 0, value: 0 },\r\n                    { label: '61-90 days', days_from: 61, days_to: 90, count: 0, value: 0 },\r\n                    { label: '91-180 days', days_from: 91, days_to: 180, count: 0, value: 0 },\r\n                    { label: '180+ days', days_from: 181, days_to: null, count: 0, value: 0 },\r\n                  ],\r\n                  slow_moving: [],\r\n                };\r\n              } else {\r\n                this.agingData = data;\r\n              }\r\n              setTimeout(() => this.renderAgingChart(), 0);\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading stock aging:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  loadAbcAnalysis(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getAbcAnalysis()\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              this.abcAnalysisData = response.data;\r\n              this.calculateAbcSummary();\r\n              if (this.activeTab === 'abc') setTimeout(() => this.renderAbcChart(), 0);\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading ABC analysis:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  loadDashboardOverview(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.analyticsService.getDashboardData()\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n          next: (response) => {\r\n            if (response.success) {\r\n              this.overviewData = response.data;\r\n            }\r\n            resolve();\r\n          },\r\n          error: (err) => {\r\n            console.error('Error loading dashboard overview:', err);\r\n            resolve();\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  calculateAbcSummary(): void {\r\n    if (!this.abcAnalysisData.length) return;\r\n\r\n    const classA = this.abcAnalysisData.filter(item => item.class === 'A');\r\n    const classB = this.abcAnalysisData.filter(item => item.class === 'B');\r\n    const classC = this.abcAnalysisData.filter(item => item.class === 'C');\r\n\r\n    const totalValue = this.abcAnalysisData.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    this.abcSummary.classA = {\r\n      count: classA.length,\r\n      value: classA.reduce((sum, item) => sum + item.value, 0),\r\n      percentage: totalValue > 0 ? (classA.reduce((sum, item) => sum + item.value, 0) / totalValue) * 100 : 0\r\n    };\r\n\r\n    this.abcSummary.classB = {\r\n      count: classB.length,\r\n      value: classB.reduce((sum, item) => sum + item.value, 0),\r\n      percentage: totalValue > 0 ? (classB.reduce((sum, item) => sum + item.value, 0) / totalValue) * 100 : 0\r\n    };\r\n\r\n    this.abcSummary.classC = {\r\n      count: classC.length,\r\n      value: classC.reduce((sum, item) => sum + item.value, 0),\r\n      percentage: totalValue > 0 ? (classC.reduce((sum, item) => sum + item.value, 0) / totalValue) * 100 : 0\r\n    };\r\n  }\r\n\r\n  // ABC helpers for UI breakdown\r\n  private getClassCount(abc: 'A' | 'B' | 'C'): number {\r\n    if (abc === 'A') return this.abcSummary.classA.count;\r\n    if (abc === 'B') return this.abcSummary.classB.count;\r\n    return this.abcSummary.classC.count;\r\n  }\r\n\r\n  private getClassValue(abc: 'A' | 'B' | 'C'): number {\r\n    if (abc === 'A') return this.abcSummary.classA.value;\r\n    if (abc === 'B') return this.abcSummary.classB.value;\r\n    return this.abcSummary.classC.value;\r\n  }\r\n\r\n  getClassQuantityPercentage(abc: 'A' | 'B' | 'C'): number {\r\n    const totalItems = this.abcAnalysisData.length || 1;\r\n    return Number(((this.getClassCount(abc) / totalItems) * 100).toFixed(1));\r\n  }\r\n\r\n  getClassValuePercentage(abc: 'A' | 'B' | 'C'): number {\r\n    if (abc === 'A') return Number(this.abcSummary.classA.percentage.toFixed(1));\r\n    if (abc === 'B') return Number(this.abcSummary.classB.percentage.toFixed(1));\r\n    return Number(this.abcSummary.classC.percentage.toFixed(1));\r\n  }\r\n\r\n  onTabChange(tab: string): void {\r\n    this.activeTab = tab;\r\n    if (tab === 'turnover') {\r\n      this.loadTurnover(this.selectedPeriod);\r\n      this.loadTurnoverByCategory(this.selectedPeriod);\r\n      this.loadMonthlyTrend(this.selectedPeriod).then(() => setTimeout(() => this.renderTrendChart(true as any), 0));\r\n      this.loadKpis(this.selectedPeriod);\r\n    }\r\n    if (tab === 'aging') {\r\n      this.loadStockAging();\r\n    }\r\n    if (tab === 'abc') {\r\n      this.loadAbcAnalysis().then(() => setTimeout(() => this.renderAbcChart(true as any), 0));\r\n    }\r\n  }\r\n\r\n  onPeriodChange(event: Event): void {\r\n    const target = event.target as HTMLSelectElement;\r\n    if (target && target.value) {\r\n      // map old select values to API period tokens if needed\r\n      const map: any = { '1month': '1m', '3months': '3m', '6months': '6m', '1year': '1y' };\r\n      const val = map[target.value] || target.value;\r\n      this.selectedPeriod = val as any;\r\n      this.loadTurnover(this.selectedPeriod);\r\n      this.loadTurnoverByCategory(this.selectedPeriod);\r\n      this.loadMonthlyTrend(this.selectedPeriod);\r\n      this.loadKpis(this.selectedPeriod);\r\n    }\r\n  }\r\n\r\n  exportReport(): void {\r\n    console.log('Exporting analytics report for period:', this.selectedPeriod);\r\n    // Here you would implement the actual export functionality\r\n  }\r\n\r\n  // Removed getCurrentData; now using live turnoverData\r\n\r\n  refreshData(): void {\r\n    this.loadAllAnalytics();\r\n  }\r\n\r\n  formatCurrency(amount: number): string { return this.currency.format(amount); }\r\n\r\n  getAbcClassColor(abcClass: string): string {\r\n    switch (abcClass) {\r\n      case 'A': return 'bg-green-100 text-green-800';\r\n      case 'B': return 'bg-yellow-100 text-yellow-800';\r\n      case 'C': return 'bg-blue-100 text-blue-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  }\r\n\r\n  // Derived KPI helpers for top cards\r\n  getCarryingCostMonthly(): number {\r\n    if (this.kpis) return this.kpis.carrying_cost_monthly || 0;\r\n    const total = this.dashboardData?.total_value ?? this.overviewData?.total_value ?? 0;\r\n    return total * this.carryingRateMonthly; // fallback\r\n  }\r\n\r\n  getDeadStockValue(): number {\r\n    if (this.kpis) return this.kpis.dead_stock_value || 0;\r\n    if (!this.agingData?.slow_moving?.length) return 0; // fallback\r\n    return this.agingData.slow_moving.reduce((sum, item) => sum + (item.value || 0), 0);\r\n  }\r\n\r\n  getDeadStockItems(): number {\r\n    if (this.kpis) return this.kpis.dead_stock_items || 0;\r\n    return this.agingData?.slow_moving?.length ?? 0; // fallback\r\n  }\r\n\r\n  // Helpers for category turnover chart\r\n  getMaxCategoryTurnover(): number {\r\n    if (!this.categoryTurnover || this.categoryTurnover.length === 0) return 1;\r\n    const max = Math.max(...this.categoryTurnover.map(c => c.turnover || 0));\r\n    return max > 0 ? max : 1;\r\n  }\r\n\r\n  // Trend helpers (computed in TS to keep template simple)\r\n  private updateTrendMeta(): void {\r\n    const max = Math.max(...(this.monthlyTrend || []).map(p => p.turnover || 0), 0);\r\n    this.trendMax = this.niceCeil(max);\r\n    this.hasTrendData = (this.monthlyTrend || []).some(p => (p.turnover || 0) > 0);\r\n    const t1 = this.trendMax;\r\n    const t2 = this.trendMax * 0.75;\r\n    const t3 = this.trendMax * 0.5;\r\n    const t4 = this.trendMax * 0.25;\r\n    this.trendTicks = [t1, t2, t3, t4, 0];\r\n  }\r\n\r\n  private niceCeil(value: number): number {\r\n    const thresholds = [0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50];\r\n    if (value <= 0) return 1;\r\n    for (const t of thresholds) if (value <= t) return t;\r\n    return Math.pow(10, Math.ceil(Math.log10(value)));\r\n  }\r\n\r\n  formatTick(val: number): string {\r\n    const decimals = this.trendMax < 1 ? 2 : 1;\r\n    return Number(val).toFixed(decimals);\r\n  }\r\n\r\n  private renderTrendChart(force?: boolean): void {\r\n    const labels = (this.monthlyTrend || []).map(p => p.label.split(' ')[0]);\r\n    const data = (this.monthlyTrend || []).map(p => p.turnover || 0);\r\n\r\n    const config: ChartConfiguration<'line'> = {\r\n      type: 'line',\r\n      data: {\r\n        labels,\r\n        datasets: [{\r\n          label: 'Turnover',\r\n          data,\r\n          borderColor: '#0d9488',\r\n          backgroundColor: 'rgba(13,148,136,0.2)',\r\n          tension: 0.3,\r\n          pointRadius: 3,\r\n          pointBackgroundColor: '#0d9488'\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        animation: false,\r\n        plugins: { legend: { display: false } },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            suggestedMax: Math.max(1, this.trendMax),\r\n            ticks: {\r\n              callback: (value) => this.formatTick(Number(value))\r\n            }\r\n          },\r\n          x: {\r\n            grid: { display: false }\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    const canvas = document.getElementById('monthlyTrendCanvas') as HTMLCanvasElement | null;\r\n    if (!canvas) return;\r\n\r\n    if (this.trendChart && !force) {\r\n      this.trendChart.data.labels = labels;\r\n      this.trendChart.data.datasets[0].data = data as any;\r\n      this.trendChart.update();\r\n      return;\r\n    }\r\n    if (this.trendChart && force) {\r\n      this.trendChart.destroy();\r\n      this.trendChart = undefined;\r\n    }\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n    this.trendChart = new Chart(ctx, config);\r\n  }\r\n\r\n  private renderAgingChart(force?: boolean): void {\r\n    const canvas = document.getElementById('agingBucketsCanvas') as HTMLCanvasElement | null;\r\n    if (!canvas || !this.agingData) return;\r\n\r\n    const labels = (this.agingData.buckets || []).map(b => b.label);\r\n    const counts = (this.agingData.buckets || []).map(b => b.count);\r\n    const values = (this.agingData.buckets || []).map(b => b.value);\r\n\r\n    const config: ChartConfiguration<'bar'> = {\r\n      type: 'bar',\r\n      data: {\r\n        labels,\r\n        datasets: [{\r\n          label: 'Items',\r\n          data: counts,\r\n          backgroundColor: 'rgba(59,130,246,0.3)',\r\n          borderColor: '#3b82f6',\r\n          borderWidth: 1,\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          legend: { display: false },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: (ctx) => {\r\n                const idx = ctx.dataIndex;\r\n                const count = counts[idx] ?? 0;\r\n                const val = values[idx] ?? 0;\r\n                return ` ${count} items — ${this.currency.getCurrent()} ${val.toLocaleString()}`;\r\n              }\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          y: { beginAtZero: true, ticks: { precision: 0 } },\r\n          x: { grid: { display: false } }\r\n        }\r\n      }\r\n    };\r\n\r\n    if (this.agingChart && !force) {\r\n      this.agingChart.data.labels = labels;\r\n      this.agingChart.data.datasets[0].data = counts as any;\r\n      this.agingChart.update();\r\n      return;\r\n    }\r\n    if (this.agingChart && force) {\r\n      this.agingChart.destroy();\r\n      this.agingChart = undefined;\r\n    }\r\n    this.agingChart = new Chart(canvas.getContext('2d')!, config);\r\n  }\r\n\r\n  private renderAbcChart(force?: boolean): void {\r\n    const canvas = document.getElementById('abcPieCanvas') as HTMLCanvasElement | null;\r\n    if (!canvas) return;\r\n    const counts = [\r\n      this.abcAnalysisData.filter(i => i.class === 'A').length,\r\n      this.abcAnalysisData.filter(i => i.class === 'B').length,\r\n      this.abcAnalysisData.filter(i => i.class === 'C').length,\r\n    ];\r\n    const config: ChartConfiguration<'doughnut'> = {\r\n      type: 'doughnut',\r\n      data: {\r\n        labels: ['Class A', 'Class B', 'Class C'],\r\n        datasets: [{\r\n          data: counts,\r\n          backgroundColor: ['#2563eb', '#10b981', '#f59e0b'],\r\n          borderColor: ['#2563eb', '#10b981', '#f59e0b'],\r\n          borderWidth: 1\r\n        }]\r\n      },\r\n      options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: true, position: 'bottom' } } }\r\n    };\r\n\r\n    if (this.abcChart && !force) {\r\n      this.abcChart.data.datasets[0].data = counts as any;\r\n      this.abcChart.update();\r\n      return;\r\n    }\r\n    if (this.abcChart && force) {\r\n      this.abcChart.destroy();\r\n      this.abcChart = undefined;\r\n    }\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n    this.abcChart = new Chart(ctx, config);\r\n  }\r\n\r\n  private generateZeroTrend(period: '1m' | '3m' | '6m' | '1y') {\r\n    const monthsMap: any = { '1m': 1, '3m': 3, '6m': 6, '1y': 12 };\r\n    const n = monthsMap[period] || 6;\r\n    const points: MonthlyTurnoverPoint[] = [] as any;\r\n    const now = new Date();\r\n    for (let i = n - 1; i >= 0; i--) {\r\n      const d = new Date(now.getFullYear(), now.getMonth() - i, 1);\r\n      const label = d.toLocaleString(undefined, { month: 'short', year: 'numeric' });\r\n      const ym = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;\r\n      points.push({ month: ym, label, cogs: 0, avg_inventory_value: 0, turnover: 0 });\r\n    }\r\n    return points;\r\n  }\r\n\r\n  getTrendPath(): string {\r\n    const n = this.monthlyTrend?.length || 0;\r\n    if (n === 0) return '';\r\n    const stepX = this.trendChartWidth / Math.max(1, n - 1);\r\n    let d = '';\r\n    for (let i = 0; i < n; i++) {\r\n      const x = i * stepX;\r\n      const y = this.trendY(this.monthlyTrend[i]);\r\n      d += i === 0 ? `M${x},${y}` : ` L${x},${y}`;\r\n    }\r\n    return d;\r\n  }\r\n\r\n  trendX(index: number): number {\r\n    const n = this.monthlyTrend?.length || 0;\r\n    const stepX = this.trendChartWidth / Math.max(1, n - 1);\r\n    return index * stepX;\r\n  }\r\n\r\n  trendY(point: MonthlyTurnoverPoint): number {\r\n    const ratio = Math.min(1, Math.max(0, (point?.turnover || 0) / this.trendMax));\r\n    return this.trendChartHeight - (ratio * this.trendYScaleHeight) - this.trendYPadding;\r\n  }\r\n}\r\n", "<div class=\"analytics\">\r\n  <!-- Loading State -->\r\n  <div *ngIf=\"loading\" class=\"loading-state\">\r\n    <div class=\"loading-spinner\"></div>\r\n    <p>Loading inventory analytics...</p>\r\n  </div>\r\n\r\n  <!-- Error State -->\r\n  <div *ngIf=\"error && !loading\" class=\"error-state\">\r\n    <svg class=\"w-12 h-12 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\r\n    </svg>\r\n    <h3 class=\"error-title\">{{ error }}</h3>\r\n    <button class=\"btn btn-primary\" (click)=\"refreshData()\">\r\n      <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n      </svg>\r\n      Retry\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Analytics Content -->\r\n  <div *ngIf=\"!loading && !error\">\r\n    <!-- Header Section -->\r\n    <div class=\"analytics-header\">\r\n      <div class=\"header-left\">\r\n        <h2 class=\"main-title\">Inventory Analytics</h2>\r\n        <p class=\"subtitle\">Advanced insights and performance metrics</p>\r\n      </div>\r\n      <div class=\"header-right\">\r\n        <div class=\"period-dropdown\">\r\n          <select class=\"period-select\" [value]=\"selectedPeriod\" (change)=\"onPeriodChange($event)\">\r\n            <option value=\"6m\">Last 6 Months</option>\r\n            <option value=\"3m\">Last 3 Months</option>\r\n            <option value=\"1m\">Last Month</option>\r\n            <option value=\"1y\">Last Year</option>\r\n          </select>\r\n          <svg class=\"dropdown-arrow\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\r\n          </svg>\r\n        </div>\r\n        <button class=\"refresh-btn\" (click)=\"refreshData()\" title=\"Refresh Data\">\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n          </svg>\r\n        </button>\r\n        <button class=\"export-btn !hidden\" (click)=\"exportReport()\">\r\n          <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n          </svg>\r\n          Export Report\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- KPI Cards Row: Inventory Turnover, Carrying Cost, Dead Stock Value, Avg Days on Hand -->\r\n    <div class=\"metric-cards-row\">\r\n      <!-- Inventory Turnover -->\r\n      <div class=\"metric-card turnover\" *ngIf=\"turnoverData\">\r\n        <div class=\"card-content\">\r\n          <div class=\"metric-value\">{{ (turnoverData.turnover || 0) | number:'1.1-2' }}x</div>\r\n          <div class=\"metric-label\">Inventory Turnover</div>\r\n          <div class=\"metric-change\" *ngIf=\"kpis?.turnover_change_pct !== null && kpis?.turnover_change_pct !== undefined\">\r\n            {{ kpis?.turnover_change_pct! | number:'1.0-2' }}% from last period\r\n          </div>\r\n        </div>\r\n        <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z\"></path>\r\n        </svg>\r\n      </div>\r\n\r\n      <!-- Carrying Cost (Derived monthly) -->\r\n      <div class=\"metric-card carrying-cost\">\r\n        <div class=\"card-content\">\r\n          <div class=\"metric-value\">{{ formatCurrency(getCarryingCostMonthly()) }}</div>\r\n          <div class=\"metric-label\">Carrying Cost</div>\r\n          <div class=\"metric-change\">Monthly holding cost</div>\r\n        </div>\r\n        <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>\r\n        </svg>\r\n      </div>\r\n\r\n      <!-- Dead Stock Value (Derived from slow_moving) -->\r\n      <div class=\"metric-card dead-stock\">\r\n        <div class=\"card-content\">\r\n          <div class=\"metric-value warning\">{{ formatCurrency(getDeadStockValue()) }}</div>\r\n          <div class=\"metric-label\">Dead Stock Value</div>\r\n          <div class=\"metric-change\">{{ getDeadStockItems() }} items</div>\r\n        </div>\r\n        <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>\r\n        </svg>\r\n      </div>\r\n\r\n      <!-- Avg Days on Hand -->\r\n      <div class=\"metric-card avg-days\" *ngIf=\"turnoverData\">\r\n        <div class=\"card-content\">\r\n          <div class=\"metric-value\">{{ turnoverData.days_on_hand !== null ? (turnoverData.days_on_hand | number:'1.0-0') + ' days' : '-' }}</div>\r\n          <div class=\"metric-label\">Avg Days on Hand</div>\r\n        </div>\r\n        <svg class=\"metric-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Navigation Tabs -->\r\n    <div class=\"analytics-tabs\">\r\n      <button class=\"tab-button\" [class.active]=\"activeTab === 'turnover'\" (click)=\"onTabChange('turnover')\">\r\n        <span class=\"tab-text\">Turnover Analysis</span>\r\n      </button>\r\n      <button class=\"tab-button\" [class.active]=\"activeTab === 'abc'\" (click)=\"onTabChange('abc')\">\r\n        <span class=\"tab-text\">ABC Analysis</span>\r\n      </button>\r\n      <button class=\"tab-button\" [class.active]=\"activeTab === 'demand'\" (click)=\"onTabChange('demand')\">\r\n        <span class=\"tab-text\">Demand Forecast</span>\r\n      </button>\r\n      <button class=\"tab-button\" [class.active]=\"activeTab === 'aging'\" (click)=\"onTabChange('aging')\">\r\n        <span class=\"tab-text\">Stock Aging</span>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Overview Tab Content removed -->\r\n    <div *ngIf=\"false\" class=\"tab-content\">\r\n      <!-- Real-time Analytics Cards -->\r\n      <div class=\"analytics-cards\">\r\n        <!-- Inventory Analytics Card -->\r\n        <div class=\"analytics-card\" *ngIf=\"dashboardData\">\r\n          <div class=\"card-header\">\r\n            <h3 class=\"card-title\">Inventory Analytics</h3>\r\n            <span class=\"card-subtitle\">Real-time data from /api/inventory/analytics/dashboard</span>\r\n          </div>\r\n          <div class=\"card-metrics\">\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Total Value:</span>\r\n              <span class=\"metric-value\">{{ formatCurrency(dashboardData.total_value) }}</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Total Parts:</span>\r\n              <span class=\"metric-value\">{{ dashboardData.total_parts.toLocaleString() }}</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Low Stock:</span>\r\n              <span class=\"metric-value warning\">{{ dashboardData.low_stock_count.toLocaleString() }}</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Out of Stock:</span>\r\n              <span class=\"metric-value danger\">{{ dashboardData.out_of_stock_count.toLocaleString() }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Overview Card -->\r\n        <div class=\"analytics-card\" *ngIf=\"overviewData\">\r\n          <div class=\"card-header\">\r\n            <h3 class=\"card-title\">Dashboard Overview</h3>\r\n            <span class=\"card-subtitle\">Data from /api/inventory/dashboard/overview</span>\r\n          </div>\r\n          <div class=\"card-metrics\">\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Total Value:</span>\r\n              <span class=\"metric-value\">{{ formatCurrency(overviewData.total_value) }}</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Total Parts:</span>\r\n              <span class=\"metric-value\">{{ overviewData.total_parts.toLocaleString() }}</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Low Stock:</span>\r\n              <span class=\"metric-value warning\">{{ overviewData.low_stock_count.toLocaleString() }}</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Out of Stock:</span>\r\n              <span class=\"metric-value danger\">{{ overviewData.out_of_stock_count.toLocaleString() }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- ABC Analysis Summary Card -->\r\n        <div class=\"analytics-card\" *ngIf=\"abcAnalysisData.length > 0\">\r\n          <div class=\"card-header\">\r\n            <h3 class=\"card-title\">ABC Analysis Summary</h3>\r\n            <span class=\"card-subtitle\">Data from /api/inventory/analytics/abc-analysis</span>\r\n          </div>\r\n          <div class=\"card-metrics\">\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Class A Items:</span>\r\n              <span class=\"metric-value\">{{ abcSummary.classA.count }} ({{ abcSummary.classA.percentage.toFixed(1) }}%)</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Class B Items:</span>\r\n              <span class=\"metric-value\">{{ abcSummary.classB.count }} ({{ abcSummary.classB.percentage.toFixed(1) }}%)</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Class C Items:</span>\r\n              <span class=\"metric-value\">{{ abcSummary.classC.count }} ({{ abcSummary.classC.percentage.toFixed(1) }}%)</span>\r\n            </div>\r\n            <div class=\"metric-item\">\r\n              <span class=\"metric-label\">Total Items:</span>\r\n              <span class=\"metric-value\">{{ abcAnalysisData.length }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- ABC Analysis Table -->\r\n      <div class=\"abc-table-section\" *ngIf=\"abcAnalysisData.length > 0\">\r\n        <h3 class=\"section-title\">ABC Analysis Details</h3>\r\n        <div class=\"table-container\">\r\n          <table class=\"analytics-table\">\r\n            <thead>\r\n              <tr class=\"uppercase\">\r\n                <th>Part ID</th>\r\n                <th>Part Name</th>\r\n                <th>Value</th>\r\n                <th>Cumulative Ratio</th>\r\n                <th>ABC Class</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let item of abcAnalysisData.slice(0, 10)\">\r\n                <td>{{ item.part_id }}</td>\r\n                <td>{{ item.name }}</td>\r\n                <td>{{ formatCurrency(item.value) }}</td>\r\n                <td>{{ (item.cumulative_ratio * 100).toFixed(2) }}%</td>\r\n                <td>\r\n                  <span class=\"abc-badge\" [class]=\"getAbcClassColor(item.class)\">\r\n                    {{ item.class }}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <div class=\"table-footer\" *ngIf=\"abcAnalysisData.length > 10\">\r\n            <p>Showing first 10 items of {{ abcAnalysisData.length }} total items</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Turnover Analysis Tab Content -->\r\n    <div *ngIf=\"activeTab === 'turnover'\" class=\"tab-content\">\r\n\r\n      <!-- Charts Section -->\r\n      <div class=\"charts-section\">\r\n        <!-- Left Chart Panel -->\r\n        <div class=\"chart-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3 class=\"panel-title\">Inventory Turnover by Category</h3>\r\n            <p class=\"panel-subtitle\">How quickly inventory moves across categories</p>\r\n          </div>\r\n          <div class=\"chart-container\">\r\n            <div class=\"chart-placeholder\" *ngIf=\"!categoryTurnover?.length\">\r\n              <div class=\"empty-state\">No data yet</div>\r\n            </div>\r\n            <div class=\"bar-chart\" *ngIf=\"categoryTurnover?.length\">\r\n              <div class=\"bars\">\r\n                <div class=\"bar\" *ngFor=\"let c of categoryTurnover.slice(0,8)\" [title]=\"c.category_name + ': ' + (c.turnover | number:'1.1-2') + 'x'\">\r\n                  <div class=\"bar-fill\" [style.height]=\"(c.turnover / getMaxCategoryTurnover()) * 100 + '%'\">\r\n                    <span class=\"bar-value\">{{ (c.turnover || 0) | number:'1.1-2' }}x</span>\r\n                  </div>\r\n                  <div class=\"bar-label\">{{ c.category_name }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Right Chart Panel -->\r\n        <div class=\"chart-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3 class=\"panel-title\">Monthly Turnover Trend</h3>\r\n            <p class=\"panel-subtitle\">Turnover ratio over time</p>\r\n          </div>\r\n          @if (monthlyTrend.length > 0){\r\n            <div class=\"chart-container\" style=\"height:220px;padding:12px 8px;\">\r\n              <canvas id=\"monthlyTrendCanvas\"></canvas>\r\n            </div>\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Other Tab Contents -->\r\n    <div *ngIf=\"activeTab === 'abc'\" class=\"tab-content\">\r\n      <div class=\"charts-section\">\r\n        <div class=\"chart-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3 class=\"panel-title\">ABC Analysis Distribution</h3>\r\n            <p class=\"panel-subtitle\">Parts categorized by value contribution</p>\r\n          </div>\r\n          <div class=\"chart-container\" style=\"height:260px;padding:12px 8px;\">\r\n            <canvas id=\"abcPieCanvas\"></canvas>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"chart-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3 class=\"panel-title\">ABC Category Breakdown</h3>\r\n            <p class=\"panel-subtitle\">Value and quantity by category</p>\r\n          </div>\r\n          <div class=\"abc-breakdown\">\r\n            <div class=\"abc-row a\">\r\n              <div class=\"left\">\r\n                <span class=\"badge a\">Class A</span>\r\n                <div class=\"items\">{{ abcSummary.classA.count }} items</div>\r\n                <div class=\"sub\">{{ getClassValuePercentage('A') }}% of total value</div>\r\n              </div>\r\n              <div class=\"right\">\r\n                <div class=\"value\">{{ formatCurrency(abcSummary.classA.value) }}</div>\r\n                <div class=\"qty\">{{ getClassQuantityPercentage('A') }}% of quantity</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"abc-row b\">\r\n              <div class=\"left\">\r\n                <span class=\"badge b\">Class B</span>\r\n                <div class=\"items\">{{ abcSummary.classB.count }} items</div>\r\n                <div class=\"sub\">{{ getClassValuePercentage('B') }}% of total value</div>\r\n              </div>\r\n              <div class=\"right\">\r\n                <div class=\"value\">{{ formatCurrency(abcSummary.classB.value) }}</div>\r\n                <div class=\"qty\">{{ getClassQuantityPercentage('B') }}% of quantity</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"abc-row c\">\r\n              <div class=\"left\">\r\n                <span class=\"badge c\">Class C</span>\r\n                <div class=\"items\">{{ abcSummary.classC.count }} items</div>\r\n                <div class=\"sub\">{{ getClassValuePercentage('C') }}% of total value</div>\r\n              </div>\r\n              <div class=\"right\">\r\n                <div class=\"value\">{{ formatCurrency(abcSummary.classC.value) }}</div>\r\n                <div class=\"qty\">{{ getClassQuantityPercentage('C') }}% of quantity</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"activeTab === 'demand'\" class=\"tab-content\">\r\n      <div class=\"tab-placeholder\">\r\n        <h3>Demand Forecast</h3>\r\n        <p>Demand forecasting analytics will be implemented here.</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"activeTab === 'aging'\" class=\"tab-content\">\r\n      <div class=\"charts-section\" *ngIf=\"agingData\">\r\n        <!-- Left: Stock Age Distribution -->\r\n        <div class=\"chart-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3 class=\"panel-title\">Stock Age Distribution</h3>\r\n            <p class=\"panel-subtitle\">Inventory value by age buckets</p>\r\n          </div>\r\n          <div class=\"chart-container\" style=\"height:260px;padding:12px 8px;\">\r\n            <canvas id=\"agingBucketsCanvas\"></canvas>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Right: Slow Moving Items -->\r\n        <div class=\"chart-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3 class=\"panel-title\">Slow Moving Items</h3>\r\n            <p class=\"panel-subtitle\">Items with low turnover requiring attention</p>\r\n          </div>\r\n          <div class=\"table-container\" *ngIf=\"agingData?.slow_moving?.length; else noSlowMoving\">\r\n            <table class=\"panel-table\">\r\n              <thead>\r\n                <tr class=\"uppercase\">\r\n                  <th>Part</th>\r\n                  <th>On Hand</th>\r\n                  <th>Value</th>\r\n                  <th>Days Since</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let item of agingData.slow_moving\">\r\n                  <td>{{ item.name || item.part_id }}</td>\r\n                  <td>{{ item.on_hand }}</td>\r\n                  <td>{{ formatCurrency(item.value) }}</td>\r\n                  <td>{{ item.days_since_movement }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <ng-template #noSlowMoving>\r\n            <div class=\"chart-container\">\r\n              <div class=\"chart-placeholder\">No slow moving items</div>\r\n            </div>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Voice Assistant Button -->\r\n  <button class=\"voice-assistant\" (click)=\"refreshData()\" title=\"Refresh Data\">\r\n    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n    </svg>\r\n  </button>\r\n</div>\r\n"],
  "mappings": "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",
  "names": []
}
