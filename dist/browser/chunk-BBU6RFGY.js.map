{
  "version": 3,
  "sources": ["src/app/teams/services/team.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { AuthService } from '../../core/services/auth.service';\r\n\r\n// Team Member interfaces (users with user_type = 'team')\r\nexport interface TeamMember {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role_id?: number;\r\n  role?: {\r\n    id: number;\r\n    name: string;\r\n    description?: string;\r\n  };\r\n  hourly_rate?: number;\r\n  user_type: 'team';\r\n  company_id: number;\r\n  created_by: number;\r\n  email_verified_at?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  showMenu?: boolean; // For UI dropdown menu state\r\n}\r\n\r\nexport interface TeamMemberStatistics {\r\n  total_team_members: number;\r\n  active_team_members: number;\r\n  pending_team_members: number;\r\n}\r\n\r\nexport interface AvailableRole {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n}\r\n\r\nexport interface TeamMembersResponse {\r\n  success: boolean;\r\n  data: TeamMember[];\r\n}\r\n\r\nexport interface TeamMemberResponse {\r\n  success: boolean;\r\n  data: TeamMember;\r\n}\r\n\r\nexport interface TeamMemberStatisticsResponse {\r\n  success: boolean;\r\n  data: TeamMemberStatistics;\r\n}\r\n\r\nexport interface AvailableRolesResponse {\r\n  success: boolean;\r\n  data: AvailableRole[];\r\n}\r\n\r\nexport interface CreateTeamMemberRequest {\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role_id: number;\r\n  hourly_rate?: number;\r\n}\r\n\r\nexport interface UpdateTeamMemberRequest {\r\n  first_name?: string;\r\n  last_name?: string;\r\n  email?: string;\r\n  role_id?: number;\r\n  hourly_rate?: number;\r\n}\r\n\r\nexport interface ResendInvitationRequest {\r\n  id: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n  private apiUrl = `${environment.apiUrl}/teams`;\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  private getAuthHeaders(): { headers: { [header: string]: string } } {\r\n    const token = this.authService.getToken();\r\n    return {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token ? { 'Authorization': `Bearer ${token}` } : {})\r\n      }\r\n    };\r\n  }\r\n\r\n  // Get all team members\r\n  getTeamMembers(): Observable<TeamMembersResponse> {\r\n    return this.http.get<TeamMembersResponse>(this.apiUrl, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get a specific team member\r\n  getTeamMember(id: number): Observable<TeamMemberResponse> {\r\n    return this.http.get<TeamMemberResponse>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Create a new team member (invite)\r\n  createTeamMember(teamMemberData: CreateTeamMemberRequest): Observable<TeamMemberResponse> {\r\n    return this.http.post<TeamMemberResponse>(this.apiUrl, teamMemberData, this.getAuthHeaders());\r\n  }\r\n\r\n  // Update a team member\r\n  updateTeamMember(id: number, teamMemberData: UpdateTeamMemberRequest): Observable<TeamMemberResponse> {\r\n    return this.http.put<TeamMemberResponse>(`${this.apiUrl}/${id}`, teamMemberData, this.getAuthHeaders());\r\n  }\r\n\r\n  // Delete a team member\r\n  deleteTeamMember(id: number): Observable<{ success: boolean; message: string }> {\r\n    return this.http.delete<{ success: boolean; message: string }>(`${this.apiUrl}/${id}`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Resend invitation\r\n  resendInvitation(id: number): Observable<{ success: boolean; message: string }> {\r\n    return this.http.post<{ success: boolean; message: string }>(`${this.apiUrl}/${id}/resend-invitation`, {}, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get team member statistics\r\n  getTeamMemberStatistics(): Observable<TeamMemberStatisticsResponse> {\r\n    return this.http.get<TeamMemberStatisticsResponse>(`${this.apiUrl}/statistics`, this.getAuthHeaders());\r\n  }\r\n\r\n  // Get available roles for team members\r\n  getAvailableRoles(): Observable<AvailableRolesResponse> {\r\n    return this.http.get<AvailableRolesResponse>(`${this.apiUrl}/available-roles`, this.getAuthHeaders());\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAmFM,IAAO,cAAP,MAAO,aAAW;EAGF;EAA0B;EAFtC,SAAS,GAAG,YAAY,MAAM;EAEtC,YAAoB,MAA0B,aAAwB;AAAlD,SAAA,OAAA;AAA0B,SAAA,cAAA;EAA2B;EAEjE,iBAAc;AACpB,UAAM,QAAQ,KAAK,YAAY,SAAQ;AACvC,WAAO;MACL,SAAS;QACP,gBAAgB;SACZ,QAAQ,EAAE,iBAAiB,UAAU,KAAK,GAAE,IAAK,CAAA;;EAG3D;;EAGA,iBAAc;AACZ,WAAO,KAAK,KAAK,IAAyB,KAAK,QAAQ,KAAK,eAAc,CAAE;EAC9E;;EAGA,cAAc,IAAU;AACtB,WAAO,KAAK,KAAK,IAAwB,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,KAAK,eAAc,CAAE;EACxF;;EAGA,iBAAiB,gBAAuC;AACtD,WAAO,KAAK,KAAK,KAAyB,KAAK,QAAQ,gBAAgB,KAAK,eAAc,CAAE;EAC9F;;EAGA,iBAAiB,IAAY,gBAAuC;AAClE,WAAO,KAAK,KAAK,IAAwB,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,gBAAgB,KAAK,eAAc,CAAE;EACxG;;EAGA,iBAAiB,IAAU;AACzB,WAAO,KAAK,KAAK,OAA8C,GAAG,KAAK,MAAM,IAAI,EAAE,IAAI,KAAK,eAAc,CAAE;EAC9G;;EAGA,iBAAiB,IAAU;AACzB,WAAO,KAAK,KAAK,KAA4C,GAAG,KAAK,MAAM,IAAI,EAAE,sBAAsB,CAAA,GAAI,KAAK,eAAc,CAAE;EAClI;;EAGA,0BAAuB;AACrB,WAAO,KAAK,KAAK,IAAkC,GAAG,KAAK,MAAM,eAAe,KAAK,eAAc,CAAE;EACvG;;EAGA,oBAAiB;AACf,WAAO,KAAK,KAAK,IAA4B,GAAG,KAAK,MAAM,oBAAoB,KAAK,eAAc,CAAE;EACtG;;qCArDW,cAAW,mBAAA,UAAA,GAAA,mBAAA,WAAA,CAAA;EAAA;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;;;sEAEP,aAAW,CAAA;UAHvB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
